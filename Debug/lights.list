
lights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fed4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08010064  08010064  00020064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010674  08010674  000300a4  2**0
                  CONTENTS
  4 .ARM          00000008  08010674  08010674  00020674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801067c  0801067c  000300a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801067c  0801067c  0002067c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010680  08010680  00020680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08010684  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a4  2**0
                  CONTENTS
 10 .bss          00004190  200000a4  200000a4  000300a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004234  20004234  000300a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020f65  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004af6  00000000  00000000  00051039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001968  00000000  00000000  00055b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001780  00000000  00000000  00057498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007c9a  00000000  00000000  00058c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022287  00000000  00000000  000608b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d42c8  00000000  00000000  00082b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00156e01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e40  00000000  00000000  00156e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801004c 	.word	0x0801004c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0801004c 	.word	0x0801004c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ws2812_init>:
uint16_t BUF_DMA[ARRAY_LEN] = {0};


//----------------------------------------------------------------------------------------
void ws2812_init(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
	int i = 0;;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
	for(i = DELAY_LEN; i<ARRAY_LEN; i++)
 800058e:	2330      	movs	r3, #48	; 0x30
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	e007      	b.n	80005a4 <ws2812_init+0x20>
	{
		BUF_DMA[i] = LOW;
 8000594:	4a09      	ldr	r2, [pc, #36]	; (80005bc <ws2812_init+0x38>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	213a      	movs	r1, #58	; 0x3a
 800059a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i = DELAY_LEN; i<ARRAY_LEN; i++)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80005aa:	dbf3      	blt.n	8000594 <ws2812_init+0x10>
	}
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200000c0 	.word	0x200000c0

080005c0 <ws2812_pixel_rgb_to_buf_dma>:
//----------------------------------------------------------------------------------------
void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 80005c0:	b490      	push	{r4, r7}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4604      	mov	r4, r0
 80005c8:	4608      	mov	r0, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	461a      	mov	r2, r3
 80005ce:	4623      	mov	r3, r4
 80005d0:	71fb      	strb	r3, [r7, #7]
 80005d2:	4603      	mov	r3, r0
 80005d4:	71bb      	strb	r3, [r7, #6]
 80005d6:	460b      	mov	r3, r1
 80005d8:	717b      	strb	r3, [r7, #5]
 80005da:	4613      	mov	r3, r2
 80005dc:	807b      	strh	r3, [r7, #2]
	volatile uint16_t i;

	for(i=0; i<8; i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	81fb      	strh	r3, [r7, #14]
 80005e2:	e07a      	b.n	80006da <ws2812_pixel_rgb_to_buf_dma+0x11a>
	{
		if (BitIsSet(Rpixel,(7-i)) == 1)
 80005e4:	79fa      	ldrb	r2, [r7, #7]
 80005e6:	89fb      	ldrh	r3, [r7, #14]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	f1c3 0307 	rsb	r3, r3, #7
 80005ee:	fa42 f303 	asr.w	r3, r2, r3
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d00e      	beq.n	8000618 <ws2812_pixel_rgb_to_buf_dma+0x58>
		{
			BUF_DMA[DELAY_LEN+posX*24+i+8] = HIGH;
 80005fa:	887a      	ldrh	r2, [r7, #2]
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	00db      	lsls	r3, r3, #3
 8000604:	3330      	adds	r3, #48	; 0x30
 8000606:	89fa      	ldrh	r2, [r7, #14]
 8000608:	b292      	uxth	r2, r2
 800060a:	4413      	add	r3, r2
 800060c:	3308      	adds	r3, #8
 800060e:	4a38      	ldr	r2, [pc, #224]	; (80006f0 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000610:	2173      	movs	r1, #115	; 0x73
 8000612:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000616:	e00d      	b.n	8000634 <ws2812_pixel_rgb_to_buf_dma+0x74>
		}
		else
		{
			BUF_DMA[DELAY_LEN+posX*24+i+8] = LOW;
 8000618:	887a      	ldrh	r2, [r7, #2]
 800061a:	4613      	mov	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4413      	add	r3, r2
 8000620:	00db      	lsls	r3, r3, #3
 8000622:	3330      	adds	r3, #48	; 0x30
 8000624:	89fa      	ldrh	r2, [r7, #14]
 8000626:	b292      	uxth	r2, r2
 8000628:	4413      	add	r3, r2
 800062a:	3308      	adds	r3, #8
 800062c:	4a30      	ldr	r2, [pc, #192]	; (80006f0 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 800062e:	213a      	movs	r1, #58	; 0x3a
 8000630:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		if (BitIsSet(Gpixel,(7-i)) == 1)
 8000634:	79ba      	ldrb	r2, [r7, #6]
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	b29b      	uxth	r3, r3
 800063a:	f1c3 0307 	rsb	r3, r3, #7
 800063e:	fa42 f303 	asr.w	r3, r2, r3
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	2b00      	cmp	r3, #0
 8000648:	d00d      	beq.n	8000666 <ws2812_pixel_rgb_to_buf_dma+0xa6>
		{
			BUF_DMA[DELAY_LEN+posX*24+i+0] = HIGH;
 800064a:	887a      	ldrh	r2, [r7, #2]
 800064c:	4613      	mov	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	4413      	add	r3, r2
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	3330      	adds	r3, #48	; 0x30
 8000656:	89fa      	ldrh	r2, [r7, #14]
 8000658:	b292      	uxth	r2, r2
 800065a:	4413      	add	r3, r2
 800065c:	4a24      	ldr	r2, [pc, #144]	; (80006f0 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 800065e:	2173      	movs	r1, #115	; 0x73
 8000660:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000664:	e00c      	b.n	8000680 <ws2812_pixel_rgb_to_buf_dma+0xc0>
		}
		else
		{
			BUF_DMA[DELAY_LEN+posX*24+i+0] = LOW;
 8000666:	887a      	ldrh	r2, [r7, #2]
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	3330      	adds	r3, #48	; 0x30
 8000672:	89fa      	ldrh	r2, [r7, #14]
 8000674:	b292      	uxth	r2, r2
 8000676:	4413      	add	r3, r2
 8000678:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 800067a:	213a      	movs	r1, #58	; 0x3a
 800067c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		if (BitIsSet(Bpixel,(7-i)) == 1)
 8000680:	797a      	ldrb	r2, [r7, #5]
 8000682:	89fb      	ldrh	r3, [r7, #14]
 8000684:	b29b      	uxth	r3, r3
 8000686:	f1c3 0307 	rsb	r3, r3, #7
 800068a:	fa42 f303 	asr.w	r3, r2, r3
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00e      	beq.n	80006b4 <ws2812_pixel_rgb_to_buf_dma+0xf4>
		{
			BUF_DMA[DELAY_LEN+posX*24+i+16] = HIGH;
 8000696:	887a      	ldrh	r2, [r7, #2]
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	3330      	adds	r3, #48	; 0x30
 80006a2:	89fa      	ldrh	r2, [r7, #14]
 80006a4:	b292      	uxth	r2, r2
 80006a6:	4413      	add	r3, r2
 80006a8:	3310      	adds	r3, #16
 80006aa:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 80006ac:	2173      	movs	r1, #115	; 0x73
 80006ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006b2:	e00d      	b.n	80006d0 <ws2812_pixel_rgb_to_buf_dma+0x110>
		}
		else
		{
			BUF_DMA[DELAY_LEN+posX*24+i+16] = LOW;
 80006b4:	887a      	ldrh	r2, [r7, #2]
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	3330      	adds	r3, #48	; 0x30
 80006c0:	89fa      	ldrh	r2, [r7, #14]
 80006c2:	b292      	uxth	r2, r2
 80006c4:	4413      	add	r3, r2
 80006c6:	3310      	adds	r3, #16
 80006c8:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 80006ca:	213a      	movs	r1, #58	; 0x3a
 80006cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0; i<8; i++)
 80006d0:	89fb      	ldrh	r3, [r7, #14]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	3301      	adds	r3, #1
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	81fb      	strh	r3, [r7, #14]
 80006da:	89fb      	ldrh	r3, [r7, #14]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	2b07      	cmp	r3, #7
 80006e0:	d980      	bls.n	80005e4 <ws2812_pixel_rgb_to_buf_dma+0x24>
		}
	}
}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc90      	pop	{r4, r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	200000c0 	.word	0x200000c0

080006f4 <ws2812_light_L>:
//----------------------------------------------------------------------------------------
void ws2812_light_L(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim8,TIM_CHANNEL_3,(uint32_t*)&BUF_DMA,ARRAY_LEN*2);
 80006f8:	f241 2390 	movw	r3, #4752	; 0x1290
 80006fc:	4a03      	ldr	r2, [pc, #12]	; (800070c <ws2812_light_L+0x18>)
 80006fe:	2108      	movs	r1, #8
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <ws2812_light_L+0x1c>)
 8000702:	f005 fae3 	bl	8005ccc <HAL_TIM_PWM_Start_DMA>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000c0 	.word	0x200000c0
 8000710:	200014f8 	.word	0x200014f8

08000714 <ws2812_light_R>:
//----------------------------------------------------------------------------------------
void ws2812_light_R(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim8,TIM_CHANNEL_4,(uint32_t*)&BUF_DMA,ARRAY_LEN*2);
 8000718:	f241 2390 	movw	r3, #4752	; 0x1290
 800071c:	4a03      	ldr	r2, [pc, #12]	; (800072c <ws2812_light_R+0x18>)
 800071e:	210c      	movs	r1, #12
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <ws2812_light_R+0x1c>)
 8000722:	f005 fad3 	bl	8005ccc <HAL_TIM_PWM_Start_DMA>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000c0 	.word	0x200000c0
 8000730:	200014f8 	.word	0x200014f8

08000734 <left_down_simple_turn_on>:
//----------------------------------------------------------------------------------------
void left_down_simple_turn_on(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
	int i = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
	for(i = 0; i <= 31; i++)
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	e00b      	b.n	800075c <left_down_simple_turn_on+0x28>
	{
		ws2812_pixel_rgb_to_buf_dma(100 , 50, 0, i);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	b29b      	uxth	r3, r3
 8000748:	2200      	movs	r2, #0
 800074a:	2132      	movs	r1, #50	; 0x32
 800074c:	2064      	movs	r0, #100	; 0x64
 800074e:	f7ff ff37 	bl	80005c0 <ws2812_pixel_rgb_to_buf_dma>
		ws2812_light_L();
 8000752:	f7ff ffcf 	bl	80006f4 <ws2812_light_L>
	for(i = 0; i <= 31; i++)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3301      	adds	r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b1f      	cmp	r3, #31
 8000760:	ddf0      	ble.n	8000744 <left_down_simple_turn_on+0x10>
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <left_up_simple_turn_on>:
//----------------------------------------------------------------------------------------
void left_up_simple_turn_on(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	int i = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
	for(i = 32; i <= 64; i++)
 8000776:	2320      	movs	r3, #32
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	e00b      	b.n	8000794 <left_up_simple_turn_on+0x28>
	{
		ws2812_pixel_rgb_to_buf_dma(100 , 50, 0, i);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	b29b      	uxth	r3, r3
 8000780:	2200      	movs	r2, #0
 8000782:	2132      	movs	r1, #50	; 0x32
 8000784:	2064      	movs	r0, #100	; 0x64
 8000786:	f7ff ff1b 	bl	80005c0 <ws2812_pixel_rgb_to_buf_dma>
		ws2812_light_L();
 800078a:	f7ff ffb3 	bl	80006f4 <ws2812_light_L>
	for(i = 32; i <= 64; i++)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3301      	adds	r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b40      	cmp	r3, #64	; 0x40
 8000798:	ddf0      	ble.n	800077c <left_up_simple_turn_on+0x10>
	}
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <left_down_simple_turn_off>:
//----------------------------------------------------------------------------------------
void left_down_simple_turn_off(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
	int i = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
	for(i = 0; i <= 31; i++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	e00b      	b.n	80007cc <left_down_simple_turn_off+0x28>
	{
		ws2812_pixel_rgb_to_buf_dma(0 , 0, 0, i);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff feff 	bl	80005c0 <ws2812_pixel_rgb_to_buf_dma>
		ws2812_light_L();
 80007c2:	f7ff ff97 	bl	80006f4 <ws2812_light_L>
	for(i = 0; i <= 31; i++)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3301      	adds	r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b1f      	cmp	r3, #31
 80007d0:	ddf0      	ble.n	80007b4 <left_down_simple_turn_off+0x10>
	}
}
 80007d2:	bf00      	nop
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <left_up_simple_turn_off>:
//----------------------------------------------------------------------------------------
void left_up_simple_turn_off(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	int i = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
	for(i = 32; i <= 64; i++)
 80007e6:	2320      	movs	r3, #32
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	e00b      	b.n	8000804 <left_up_simple_turn_off+0x28>
	{
		ws2812_pixel_rgb_to_buf_dma(0 , 0, 0, i);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff fee3 	bl	80005c0 <ws2812_pixel_rgb_to_buf_dma>
		ws2812_light_L();
 80007fa:	f7ff ff7b 	bl	80006f4 <ws2812_light_L>
	for(i = 32; i <= 64; i++)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3301      	adds	r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b40      	cmp	r3, #64	; 0x40
 8000808:	ddf0      	ble.n	80007ec <left_up_simple_turn_off+0x10>
	}
}
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <right_down_simple_turn_on>:
//----------------------------------------------------------------------------------------
void right_down_simple_turn_on(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
	int i = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
	for(i = 0; i <= 31; i++)
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	e00b      	b.n	800083c <right_down_simple_turn_on+0x28>
	{
		ws2812_pixel_rgb_to_buf_dma(0 , 0, 50, i);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	b29b      	uxth	r3, r3
 8000828:	2232      	movs	r2, #50	; 0x32
 800082a:	2100      	movs	r1, #0
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff fec7 	bl	80005c0 <ws2812_pixel_rgb_to_buf_dma>
		ws2812_light_R();
 8000832:	f7ff ff6f 	bl	8000714 <ws2812_light_R>
	for(i = 0; i <= 31; i++)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3301      	adds	r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b1f      	cmp	r3, #31
 8000840:	ddf0      	ble.n	8000824 <right_down_simple_turn_on+0x10>
	}
}
 8000842:	bf00      	nop
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <ritht_down_simple_turn_off>:
		ws2812_pixel_rgb_to_buf_dma(100 , 50, 0, i);
		ws2812_light_R();
	}
}
void ritht_down_simple_turn_off(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
	int i = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
	for(i = 0; i <= 31; i++)
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	e00b      	b.n	8000874 <ritht_down_simple_turn_off+0x28>
	{
		ws2812_pixel_rgb_to_buf_dma(0 , 0, 0, i);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	b29b      	uxth	r3, r3
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff feab 	bl	80005c0 <ws2812_pixel_rgb_to_buf_dma>
		ws2812_light_R();
 800086a:	f7ff ff53 	bl	8000714 <ws2812_light_R>
	for(i = 0; i <= 31; i++)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3301      	adds	r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b1f      	cmp	r3, #31
 8000878:	ddf0      	ble.n	800085c <ritht_down_simple_turn_off+0x10>
	}
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <ritht_up_simple_turn_off>:
void ritht_up_simple_turn_off(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
	int i = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
	for(i = 32; i <= 64; i++)
 800088e:	2320      	movs	r3, #32
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	e00b      	b.n	80008ac <ritht_up_simple_turn_off+0x28>
	{
		ws2812_pixel_rgb_to_buf_dma(0 , 0, 0, i);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	b29b      	uxth	r3, r3
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fe8f 	bl	80005c0 <ws2812_pixel_rgb_to_buf_dma>
		ws2812_light_R();
 80008a2:	f7ff ff37 	bl	8000714 <ws2812_light_R>
	for(i = 32; i <= 64; i++)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3301      	adds	r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b40      	cmp	r3, #64	; 0x40
 80008b0:	ddf0      	ble.n	8000894 <ritht_up_simple_turn_off+0x10>
	}
}
 80008b2:	bf00      	nop
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <simple_blink_test>:
		}
	}
}
//----------------------------------------------------------------------------------------
void simple_blink_test(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	left_down_simple_turn_off();
 80008c0:	f7ff ff70 	bl	80007a4 <left_down_simple_turn_off>
	left_up_simple_turn_off();
 80008c4:	f7ff ff8a 	bl	80007dc <left_up_simple_turn_off>
	ritht_down_simple_turn_off();
 80008c8:	f7ff ffc0 	bl	800084c <ritht_down_simple_turn_off>
	ritht_up_simple_turn_off();
 80008cc:	f7ff ffda 	bl	8000884 <ritht_up_simple_turn_off>
	HAL_Delay(500);
 80008d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d4:	f001 fe5a 	bl	800258c <HAL_Delay>


	left_down_simple_turn_on();
 80008d8:	f7ff ff2c 	bl	8000734 <left_down_simple_turn_on>
	HAL_Delay(500);
 80008dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e0:	f001 fe54 	bl	800258c <HAL_Delay>
	left_up_simple_turn_on();
 80008e4:	f7ff ff42 	bl	800076c <left_up_simple_turn_on>
	HAL_Delay(500);
 80008e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ec:	f001 fe4e 	bl	800258c <HAL_Delay>
	right_down_simple_turn_on();
 80008f0:	f7ff ff90 	bl	8000814 <right_down_simple_turn_on>
	HAL_Delay(500);
 80008f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008f8:	f001 fe48 	bl	800258c <HAL_Delay>

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b5b0      	push	{r4, r5, r7, lr}
 8000902:	b08c      	sub	sp, #48	; 0x30
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000906:	f001 fdcf 	bl	80024a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090a:	f000 f863 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090e:	f000 fbe5 	bl	80010dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000912:	f000 fbbb 	bl	800108c <MX_DMA_Init>
  MX_USB_HOST_Init();
 8000916:	f00e fbd1 	bl	800f0bc <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 800091a:	f000 fb8d 	bl	8001038 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800091e:	f000 f8c3 	bl	8000aa8 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000922:	f000 faa7 	bl	8000e74 <MX_TIM7_Init>
  MX_FATFS_Init();
 8000926:	f008 fc39 	bl	800919c <MX_FATFS_Init>
  MX_TIM2_Init();
 800092a:	f000 f8f3 	bl	8000b14 <MX_TIM2_Init>
  MX_TIM3_Init();
 800092e:	f000 f987 	bl	8000c40 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000932:	f000 fa1d 	bl	8000d70 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000936:	f000 fad3 	bl	8000ee0 <MX_TIM8_Init>
   /////////////////////////////////////////////////////////////////
   // PC8  - left LED stript
   // PC9  - rigtht LED stript

   // Test turn on LEFT LIGHTS
   ws2812_init();
 800093a:	f7ff fe23 	bl	8000584 <ws2812_init>

   simple_blink_test();
 800093e:	f7ff ffbd 	bl	80008bc <simple_blink_test>
//   HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_4, (uint32_t*)&BUF_DMA, 2);
   //  right_down_up_part_turn_on_off(true, false, 10, true, 0, 0, 20);  //DOESNT WORK
   //HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_3, (uint32_t*)&BUF_DMA, ARRAY_LEN);

   /////////////////////////////////////////////////////////////////////////////////
  test_micto_cd_card();
 8000942:	f001 faed 	bl	8001f20 <test_micto_cd_card>
 // test_changes_bratiles();
 // test_from_midle_to_corner();

  // For test print counter ower COM port
  int j = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  char str_count[6] = {0};
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
 800094e:	2300      	movs	r3, #0
 8000950:	853b      	strh	r3, [r7, #40]	; 0x28
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Print test information ower COM POrt
	  sprintf(str_count,"%d",j);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000958:	491a      	ldr	r1, [pc, #104]	; (80009c4 <main+0xc4>)
 800095a:	4618      	mov	r0, r3
 800095c:	f00e ffe8 	bl	800f930 <siprintf>
	  char test_str[30]= "Hello from STM: ";
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <main+0xc8>)
 8000962:	1d3c      	adds	r4, r7, #4
 8000964:	461d      	mov	r5, r3
 8000966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096a:	682b      	ldr	r3, [r5, #0]
 800096c:	7023      	strb	r3, [r4, #0]
 800096e:	f107 0315 	add.w	r3, r7, #21
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	731a      	strb	r2, [r3, #12]
	  strcat(test_str, str_count);
 800097c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f00e fff3 	bl	800f970 <strcat>
	  strcat(test_str, "\n\r");
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc1f 	bl	80001d0 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4413      	add	r3, r2
 800099a:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <main+0xcc>)
 800099c:	8811      	ldrh	r1, [r2, #0]
 800099e:	7892      	ldrb	r2, [r2, #2]
 80009a0:	8019      	strh	r1, [r3, #0]
 80009a2:	709a      	strb	r2, [r3, #2]
	  HAL_UART_Transmit_IT(&huart3, test_str, sizeof(test_str));
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	221e      	movs	r2, #30
 80009a8:	4619      	mov	r1, r3
 80009aa:	4809      	ldr	r0, [pc, #36]	; (80009d0 <main+0xd0>)
 80009ac:	f006 fc97 	bl	80072de <HAL_UART_Transmit_IT>
	  j++;
 80009b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b2:	3301      	adds	r3, #1
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_Delay(1000);
 80009b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ba:	f001 fde7 	bl	800258c <HAL_Delay>
	  //


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009be:	f00e fba3 	bl	800f108 <MX_USB_HOST_Process>
  {
 80009c2:	e7c6      	b.n	8000952 <main+0x52>
 80009c4:	08010064 	.word	0x08010064
 80009c8:	0801006c 	.word	0x0801006c
 80009cc:	08010068 	.word	0x08010068
 80009d0:	20001600 	.word	0x20001600

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	; 0x50
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	2230      	movs	r2, #48	; 0x30
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f00e feac 	bl	800f740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <SystemClock_Config+0xcc>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a27      	ldr	r2, [pc, #156]	; (8000aa0 <SystemClock_Config+0xcc>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <SystemClock_Config+0xcc>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <SystemClock_Config+0xd0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a21      	ldr	r2, [pc, #132]	; (8000aa4 <SystemClock_Config+0xd0>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <SystemClock_Config+0xd0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a30:	2301      	movs	r3, #1
 8000a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a44:	2308      	movs	r3, #8
 8000a46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a48:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a52:	2307      	movs	r3, #7
 8000a54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f004 f88e 	bl	8004b7c <HAL_RCC_OscConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a66:	f000 fca5 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	2105      	movs	r1, #5
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f004 faef 	bl	800506c <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a94:	f000 fc8e 	bl	80013b4 <Error_Handler>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3750      	adds	r7, #80	; 0x50
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40007000 	.word	0x40007000

08000aa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_SPI1_Init+0x64>)
 8000aae:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <MX_SPI1_Init+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_SPI1_Init+0x64>)
 8000ab4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_SPI1_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_SPI1_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_SPI1_Init+0x64>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_SPI1_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_SPI1_Init+0x64>)
 8000ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_SPI1_Init+0x64>)
 8000adc:	2228      	movs	r2, #40	; 0x28
 8000ade:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_SPI1_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <MX_SPI1_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_SPI1_Init+0x64>)
 8000af4:	220a      	movs	r2, #10
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_SPI1_Init+0x64>)
 8000afa:	f004 fcd7 	bl	80054ac <HAL_SPI_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b04:	f000 fc56 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20001380 	.word	0x20001380
 8000b10:	40013000 	.word	0x40013000

08000b14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	; 0x38
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	f107 0320 	add.w	r3, r7, #32
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
 8000b40:	615a      	str	r2, [r3, #20]
 8000b42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b44:	4b3d      	ldr	r3, [pc, #244]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000b46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2100-1;
 8000b4c:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000b4e:	f640 0233 	movw	r2, #2099	; 0x833
 8000b52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b54:	4b39      	ldr	r3, [pc, #228]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 8000b5a:	4b38      	ldr	r3, [pc, #224]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000b5c:	22f9      	movs	r2, #249	; 0xf9
 8000b5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b60:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b66:	4b35      	ldr	r3, [pc, #212]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b6c:	4833      	ldr	r0, [pc, #204]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000b6e:	f004 ff93 	bl	8005a98 <HAL_TIM_Base_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b78:	f000 fc1c 	bl	80013b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b86:	4619      	mov	r1, r3
 8000b88:	482c      	ldr	r0, [pc, #176]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000b8a:	f005 fd03 	bl	8006594 <HAL_TIM_ConfigClockSource>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b94:	f000 fc0e 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b98:	4828      	ldr	r0, [pc, #160]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000b9a:	f005 f83d 	bl	8005c18 <HAL_TIM_PWM_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ba4:	f000 fc06 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb0:	f107 0320 	add.w	r3, r7, #32
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4821      	ldr	r0, [pc, #132]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000bb8:	f006 f9d0 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000bc2:	f000 fbf7 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc6:	2360      	movs	r3, #96	; 0x60
 8000bc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4817      	ldr	r0, [pc, #92]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000bde:	f005 fc17 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000be8:	f000 fbe4 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2204      	movs	r2, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000bf4:	f005 fc0c 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000bfe:	f000 fbd9 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2208      	movs	r2, #8
 8000c06:	4619      	mov	r1, r3
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000c0a:	f005 fc01 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000c14:	f000 fbce 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4807      	ldr	r0, [pc, #28]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000c20:	f005 fbf6 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000c2a:	f000 fbc3 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <MX_TIM2_Init+0x128>)
 8000c30:	f000 fd3c 	bl	80016ac <HAL_TIM_MspPostInit>

}
 8000c34:	bf00      	nop
 8000c36:	3738      	adds	r7, #56	; 0x38
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200013d8 	.word	0x200013d8

08000c40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	f107 0320 	add.w	r3, r7, #32
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c70:	4b3d      	ldr	r3, [pc, #244]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000c72:	4a3e      	ldr	r2, [pc, #248]	; (8000d6c <MX_TIM3_Init+0x12c>)
 8000c74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2100-1;
 8000c76:	4b3c      	ldr	r3, [pc, #240]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000c78:	f640 0233 	movw	r2, #2099	; 0x833
 8000c7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b3a      	ldr	r3, [pc, #232]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250-1;
 8000c84:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000c86:	22f9      	movs	r2, #249	; 0xf9
 8000c88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8a:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c90:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c96:	4834      	ldr	r0, [pc, #208]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000c98:	f004 fefe 	bl	8005a98 <HAL_TIM_Base_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ca2:	f000 fb87 	bl	80013b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	482d      	ldr	r0, [pc, #180]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000cb4:	f005 fc6e 	bl	8006594 <HAL_TIM_ConfigClockSource>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000cbe:	f000 fb79 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cc2:	4829      	ldr	r0, [pc, #164]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000cc4:	f004 ffa8 	bl	8005c18 <HAL_TIM_PWM_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000cce:	f000 fb71 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4821      	ldr	r0, [pc, #132]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000ce2:	f006 f93b 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000cec:	f000 fb62 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf0:	2360      	movs	r3, #96	; 0x60
 8000cf2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	4619      	mov	r1, r3
 8000d06:	4818      	ldr	r0, [pc, #96]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000d08:	f005 fb82 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d12:	f000 fb4f 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2204      	movs	r2, #4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4812      	ldr	r0, [pc, #72]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000d1e:	f005 fb77 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000d28:	f000 fb44 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2208      	movs	r2, #8
 8000d30:	4619      	mov	r1, r3
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000d34:	f005 fb6c 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000d3e:	f000 fb39 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	220c      	movs	r2, #12
 8000d46:	4619      	mov	r1, r3
 8000d48:	4807      	ldr	r0, [pc, #28]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000d4a:	f005 fb61 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000d54:	f000 fb2e 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d58:	4803      	ldr	r0, [pc, #12]	; (8000d68 <MX_TIM3_Init+0x128>)
 8000d5a:	f000 fca7 	bl	80016ac <HAL_TIM_MspPostInit>

}
 8000d5e:	bf00      	nop
 8000d60:	3738      	adds	r7, #56	; 0x38
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20001420 	.word	0x20001420
 8000d6c:	40000400 	.word	0x40000400

08000d70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	f107 0320 	add.w	r3, r7, #32
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000da0:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <MX_TIM4_Init+0xfc>)
 8000da2:	4a33      	ldr	r2, [pc, #204]	; (8000e70 <MX_TIM4_Init+0x100>)
 8000da4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2100-1;
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <MX_TIM4_Init+0xfc>)
 8000da8:	f640 0233 	movw	r2, #2099	; 0x833
 8000dac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <MX_TIM4_Init+0xfc>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <MX_TIM4_Init+0xfc>)
 8000db6:	22f9      	movs	r2, #249	; 0xf9
 8000db8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dba:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <MX_TIM4_Init+0xfc>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_TIM4_Init+0xfc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dc6:	4829      	ldr	r0, [pc, #164]	; (8000e6c <MX_TIM4_Init+0xfc>)
 8000dc8:	f004 fe66 	bl	8005a98 <HAL_TIM_Base_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000dd2:	f000 faef 	bl	80013b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de0:	4619      	mov	r1, r3
 8000de2:	4822      	ldr	r0, [pc, #136]	; (8000e6c <MX_TIM4_Init+0xfc>)
 8000de4:	f005 fbd6 	bl	8006594 <HAL_TIM_ConfigClockSource>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000dee:	f000 fae1 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000df2:	481e      	ldr	r0, [pc, #120]	; (8000e6c <MX_TIM4_Init+0xfc>)
 8000df4:	f004 ff10 	bl	8005c18 <HAL_TIM_PWM_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000dfe:	f000 fad9 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e0a:	f107 0320 	add.w	r3, r7, #32
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4816      	ldr	r0, [pc, #88]	; (8000e6c <MX_TIM4_Init+0xfc>)
 8000e12:	f006 f8a3 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e1c:	f000 faca 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e20:	2360      	movs	r3, #96	; 0x60
 8000e22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2204      	movs	r2, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_TIM4_Init+0xfc>)
 8000e38:	f005 faea 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000e42:	f000 fab7 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2208      	movs	r2, #8
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <MX_TIM4_Init+0xfc>)
 8000e4e:	f005 fadf 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000e58:	f000 faac 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e5c:	4803      	ldr	r0, [pc, #12]	; (8000e6c <MX_TIM4_Init+0xfc>)
 8000e5e:	f000 fc25 	bl	80016ac <HAL_TIM_MspPostInit>

}
 8000e62:	bf00      	nop
 8000e64:	3738      	adds	r7, #56	; 0x38
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20001468 	.word	0x20001468
 8000e70:	40000800 	.word	0x40000800

08000e74 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_TIM7_Init+0x64>)
 8000e84:	4a15      	ldr	r2, [pc, #84]	; (8000edc <MX_TIM7_Init+0x68>)
 8000e86:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100;
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <MX_TIM7_Init+0x64>)
 8000e8a:	2264      	movs	r2, #100	; 0x64
 8000e8c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_TIM7_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <MX_TIM7_Init+0x64>)
 8000e96:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000e9a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_TIM7_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <MX_TIM7_Init+0x64>)
 8000ea4:	f004 fdf8 	bl	8005a98 <HAL_TIM_Base_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000eae:	f000 fa81 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_TIM7_Init+0x64>)
 8000ec0:	f006 f84c 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000eca:	f000 fa73 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200014b0 	.word	0x200014b0
 8000edc:	40001400 	.word	0x40001400

08000ee0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b096      	sub	sp, #88	; 0x58
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
 8000f0e:	615a      	str	r2, [r3, #20]
 8000f10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2220      	movs	r2, #32
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f00e fc11 	bl	800f740 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f1e:	4b44      	ldr	r3, [pc, #272]	; (8001030 <MX_TIM8_Init+0x150>)
 8000f20:	4a44      	ldr	r2, [pc, #272]	; (8001034 <MX_TIM8_Init+0x154>)
 8000f22:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f24:	4b42      	ldr	r3, [pc, #264]	; (8001030 <MX_TIM8_Init+0x150>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2a:	4b41      	ldr	r3, [pc, #260]	; (8001030 <MX_TIM8_Init+0x150>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 8000f30:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <MX_TIM8_Init+0x150>)
 8000f32:	22d2      	movs	r2, #210	; 0xd2
 8000f34:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	4b3e      	ldr	r3, [pc, #248]	; (8001030 <MX_TIM8_Init+0x150>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f3c:	4b3c      	ldr	r3, [pc, #240]	; (8001030 <MX_TIM8_Init+0x150>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f42:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <MX_TIM8_Init+0x150>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f48:	4839      	ldr	r0, [pc, #228]	; (8001030 <MX_TIM8_Init+0x150>)
 8000f4a:	f004 fda5 	bl	8005a98 <HAL_TIM_Base_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000f54:	f000 fa2e 	bl	80013b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f62:	4619      	mov	r1, r3
 8000f64:	4832      	ldr	r0, [pc, #200]	; (8001030 <MX_TIM8_Init+0x150>)
 8000f66:	f005 fb15 	bl	8006594 <HAL_TIM_ConfigClockSource>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000f70:	f000 fa20 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f74:	482e      	ldr	r0, [pc, #184]	; (8001030 <MX_TIM8_Init+0x150>)
 8000f76:	f004 fe4f 	bl	8005c18 <HAL_TIM_PWM_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000f80:	f000 fa18 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f90:	4619      	mov	r1, r3
 8000f92:	4827      	ldr	r0, [pc, #156]	; (8001030 <MX_TIM8_Init+0x150>)
 8000f94:	f005 ffe2 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000f9e:	f000 fa09 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa2:	2360      	movs	r3, #96	; 0x60
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	481a      	ldr	r0, [pc, #104]	; (8001030 <MX_TIM8_Init+0x150>)
 8000fc8:	f005 fa22 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8000fd2:	f000 f9ef 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fda:	220c      	movs	r2, #12
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4814      	ldr	r0, [pc, #80]	; (8001030 <MX_TIM8_Init+0x150>)
 8000fe0:	f005 fa16 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8000fea:	f000 f9e3 	bl	80013b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001006:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <MX_TIM8_Init+0x150>)
 8001012:	f006 f81f 	bl	8007054 <HAL_TIMEx_ConfigBreakDeadTime>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 800101c:	f000 f9ca 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <MX_TIM8_Init+0x150>)
 8001022:	f000 fb43 	bl	80016ac <HAL_TIM_MspPostInit>

}
 8001026:	bf00      	nop
 8001028:	3758      	adds	r7, #88	; 0x58
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200014f8 	.word	0x200014f8
 8001034:	40010400 	.word	0x40010400

08001038 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <MX_USART3_UART_Init+0x50>)
 8001040:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001048:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001070:	f006 f856 	bl	8007120 <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800107a:	f000 f99b 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20001600 	.word	0x20001600
 8001088:	40004800 	.word	0x40004800

0800108c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_DMA_Init+0x4c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <MX_DMA_Init+0x4c>)
 800109c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_DMA_Init+0x4c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	203a      	movs	r0, #58	; 0x3a
 80010b4:	f001 fb69 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010b8:	203a      	movs	r0, #58	; 0x3a
 80010ba:	f001 fb82 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2046      	movs	r0, #70	; 0x46
 80010c4:	f001 fb61 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80010c8:	2046      	movs	r0, #70	; 0x46
 80010ca:	f001 fb7a 	bl	80027c2 <HAL_NVIC_EnableIRQ>

}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800

080010dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	4b9c      	ldr	r3, [pc, #624]	; (8001368 <MX_GPIO_Init+0x28c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a9b      	ldr	r2, [pc, #620]	; (8001368 <MX_GPIO_Init+0x28c>)
 80010fc:	f043 0310 	orr.w	r3, r3, #16
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b99      	ldr	r3, [pc, #612]	; (8001368 <MX_GPIO_Init+0x28c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	4b95      	ldr	r3, [pc, #596]	; (8001368 <MX_GPIO_Init+0x28c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a94      	ldr	r2, [pc, #592]	; (8001368 <MX_GPIO_Init+0x28c>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b92      	ldr	r3, [pc, #584]	; (8001368 <MX_GPIO_Init+0x28c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b8e      	ldr	r3, [pc, #568]	; (8001368 <MX_GPIO_Init+0x28c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a8d      	ldr	r2, [pc, #564]	; (8001368 <MX_GPIO_Init+0x28c>)
 8001134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b8b      	ldr	r3, [pc, #556]	; (8001368 <MX_GPIO_Init+0x28c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b87      	ldr	r3, [pc, #540]	; (8001368 <MX_GPIO_Init+0x28c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a86      	ldr	r2, [pc, #536]	; (8001368 <MX_GPIO_Init+0x28c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b84      	ldr	r3, [pc, #528]	; (8001368 <MX_GPIO_Init+0x28c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	4b80      	ldr	r3, [pc, #512]	; (8001368 <MX_GPIO_Init+0x28c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a7f      	ldr	r2, [pc, #508]	; (8001368 <MX_GPIO_Init+0x28c>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b7d      	ldr	r3, [pc, #500]	; (8001368 <MX_GPIO_Init+0x28c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b79      	ldr	r3, [pc, #484]	; (8001368 <MX_GPIO_Init+0x28c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a78      	ldr	r2, [pc, #480]	; (8001368 <MX_GPIO_Init+0x28c>)
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b76      	ldr	r3, [pc, #472]	; (8001368 <MX_GPIO_Init+0x28c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2108      	movs	r1, #8
 800119e:	4873      	ldr	r0, [pc, #460]	; (800136c <MX_GPIO_Init+0x290>)
 80011a0:	f002 f8c8 	bl	8003334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2101      	movs	r1, #1
 80011a8:	4871      	ldr	r0, [pc, #452]	; (8001370 <MX_GPIO_Init+0x294>)
 80011aa:	f002 f8c3 	bl	8003334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2108      	movs	r1, #8
 80011b2:	4870      	ldr	r0, [pc, #448]	; (8001374 <MX_GPIO_Init+0x298>)
 80011b4:	f002 f8be 	bl	8003334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TEST_OUT_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80011b8:	2200      	movs	r2, #0
 80011ba:	f64f 0110 	movw	r1, #63504	; 0xf810
 80011be:	486e      	ldr	r0, [pc, #440]	; (8001378 <MX_GPIO_Init+0x29c>)
 80011c0:	f002 f8b8 	bl	8003334 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011c4:	2308      	movs	r3, #8
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4864      	ldr	r0, [pc, #400]	; (800136c <MX_GPIO_Init+0x290>)
 80011dc:	f001 ff0e 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	485e      	ldr	r0, [pc, #376]	; (8001370 <MX_GPIO_Init+0x294>)
 80011f8:	f001 ff00 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80011fc:	2308      	movs	r3, #8
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800120c:	2305      	movs	r3, #5
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	4856      	ldr	r0, [pc, #344]	; (8001370 <MX_GPIO_Init+0x294>)
 8001218:	f001 fef0 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800121c:	2301      	movs	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001220:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	4850      	ldr	r0, [pc, #320]	; (8001374 <MX_GPIO_Init+0x298>)
 8001232:	f001 fee3 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 8001236:	2308      	movs	r3, #8
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001242:	2302      	movs	r3, #2
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4849      	ldr	r0, [pc, #292]	; (8001374 <MX_GPIO_Init+0x298>)
 800124e:	f001 fed5 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001252:	2310      	movs	r3, #16
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001262:	2306      	movs	r3, #6
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4841      	ldr	r0, [pc, #260]	; (8001374 <MX_GPIO_Init+0x298>)
 800126e:	f001 fec5 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001272:	2304      	movs	r3, #4
 8001274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	483d      	ldr	r0, [pc, #244]	; (800137c <MX_GPIO_Init+0x2a0>)
 8001286:	f001 feb9 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800128a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800129c:	2305      	movs	r3, #5
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4835      	ldr	r0, [pc, #212]	; (800137c <MX_GPIO_Init+0x2a0>)
 80012a8:	f001 fea8 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 80012ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	482c      	ldr	r0, [pc, #176]	; (8001378 <MX_GPIO_Init+0x29c>)
 80012c6:	f001 fe99 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012ca:	f24f 0310 	movw	r3, #61456	; 0xf010
 80012ce:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	4825      	ldr	r0, [pc, #148]	; (8001378 <MX_GPIO_Init+0x29c>)
 80012e4:	f001 fe8a 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012e8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012fa:	2306      	movs	r3, #6
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	481a      	ldr	r0, [pc, #104]	; (8001370 <MX_GPIO_Init+0x294>)
 8001306:	f001 fe79 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800130a:	2320      	movs	r3, #32
 800130c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	4816      	ldr	r0, [pc, #88]	; (8001378 <MX_GPIO_Init+0x29c>)
 800131e:	f001 fe6d 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001322:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001328:	2312      	movs	r3, #18
 800132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132c:	2301      	movs	r3, #1
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001334:	2304      	movs	r3, #4
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	480f      	ldr	r0, [pc, #60]	; (800137c <MX_GPIO_Init+0x2a0>)
 8001340:	f001 fe5c 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001344:	2302      	movs	r3, #2
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001348:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_GPIO_Init+0x290>)
 800135a:	f001 fe4f 	bl	8002ffc <HAL_GPIO_Init>

}
 800135e:	bf00      	nop
 8001360:	3730      	adds	r7, #48	; 0x30
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40021000 	.word	0x40021000
 8001370:	40020800 	.word	0x40020800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40020400 	.word	0x40020400

08001380 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	if(htim==&htim7)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d106      	bne.n	800139e <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		Timer7++;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	3301      	adds	r3, #1
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800139c:	801a      	strh	r2, [r3, #0]

	}
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200014b0 	.word	0x200014b0
 80013b0:	20001644 	.word	0x20001644

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013bc:	e7fe      	b.n	80013bc <Error_Handler+0x8>
	...

080013c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_MspInit+0x4c>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <HAL_MspInit+0x4c>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_MspInit+0x4c>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a08      	ldr	r2, [pc, #32]	; (800140c <HAL_MspInit+0x4c>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013fe:	2007      	movs	r0, #7
 8001400:	f001 f9b8 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800

08001410 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a19      	ldr	r2, [pc, #100]	; (8001494 <HAL_SPI_MspInit+0x84>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d12b      	bne.n	800148a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_SPI_MspInit+0x88>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a17      	ldr	r2, [pc, #92]	; (8001498 <HAL_SPI_MspInit+0x88>)
 800143c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_SPI_MspInit+0x88>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_SPI_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <HAL_SPI_MspInit+0x88>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_SPI_MspInit+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800146a:	23e0      	movs	r3, #224	; 0xe0
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147a:	2305      	movs	r3, #5
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <HAL_SPI_MspInit+0x8c>)
 8001486:	f001 fdb9 	bl	8002ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40013000 	.word	0x40013000
 8001498:	40023800 	.word	0x40023800
 800149c:	40020000 	.word	0x40020000

080014a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b0:	d116      	bne.n	80014e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	4b74      	ldr	r3, [pc, #464]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a73      	ldr	r2, [pc, #460]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b71      	ldr	r3, [pc, #452]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	201c      	movs	r0, #28
 80014d4:	f001 f959 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d8:	201c      	movs	r0, #28
 80014da:	f001 f972 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80014de:	e0ce      	b.n	800167e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM3)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a69      	ldr	r2, [pc, #420]	; (800168c <HAL_TIM_Base_MspInit+0x1ec>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d10e      	bne.n	8001508 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	4b66      	ldr	r3, [pc, #408]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a65      	ldr	r2, [pc, #404]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b63      	ldr	r3, [pc, #396]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]
}
 8001506:	e0ba      	b.n	800167e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM4)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a60      	ldr	r2, [pc, #384]	; (8001690 <HAL_TIM_Base_MspInit+0x1f0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d10e      	bne.n	8001530 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	4b5c      	ldr	r3, [pc, #368]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a5b      	ldr	r2, [pc, #364]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b59      	ldr	r3, [pc, #356]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
}
 800152e:	e0a6      	b.n	800167e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM7)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a57      	ldr	r2, [pc, #348]	; (8001694 <HAL_TIM_Base_MspInit+0x1f4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d116      	bne.n	8001568 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b52      	ldr	r3, [pc, #328]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a51      	ldr	r2, [pc, #324]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 8001544:	f043 0320 	orr.w	r3, r3, #32
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b4f      	ldr	r3, [pc, #316]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 0320 	and.w	r3, r3, #32
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2037      	movs	r0, #55	; 0x37
 800155c:	f001 f915 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001560:	2037      	movs	r0, #55	; 0x37
 8001562:	f001 f92e 	bl	80027c2 <HAL_NVIC_EnableIRQ>
}
 8001566:	e08a      	b.n	800167e <HAL_TIM_Base_MspInit+0x1de>
  else if(htim_base->Instance==TIM8)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a4a      	ldr	r2, [pc, #296]	; (8001698 <HAL_TIM_Base_MspInit+0x1f8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	f040 8085 	bne.w	800167e <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	4b43      	ldr	r3, [pc, #268]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 800157a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157c:	4a42      	ldr	r2, [pc, #264]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	6453      	str	r3, [r2, #68]	; 0x44
 8001584:	4b40      	ldr	r3, [pc, #256]	; (8001688 <HAL_TIM_Base_MspInit+0x1e8>)
 8001586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch1_ch2_ch3.Instance = DMA2_Stream2;
 8001590:	4b42      	ldr	r3, [pc, #264]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 8001592:	4a43      	ldr	r2, [pc, #268]	; (80016a0 <HAL_TIM_Base_MspInit+0x200>)
 8001594:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8001596:	4b41      	ldr	r3, [pc, #260]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1_ch2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800159c:	4b3f      	ldr	r3, [pc, #252]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 800159e:	2240      	movs	r2, #64	; 0x40
 80015a0:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80015a8:	4b3c      	ldr	r3, [pc, #240]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 80015aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ae:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015b0:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 80015b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015b6:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015b8:	4b38      	ldr	r3, [pc, #224]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 80015ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015be:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1_ch2_ch3.Init.Mode = DMA_NORMAL;
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80015c6:	4b35      	ldr	r3, [pc, #212]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015cc:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1_ch2_ch3) != HAL_OK)
 80015d2:	4832      	ldr	r0, [pc, #200]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 80015d4:	f001 f910 	bl	80027f8 <HAL_DMA_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_TIM_Base_MspInit+0x142>
      Error_Handler();
 80015de:	f7ff fee9 	bl	80013b4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1_ch2_ch3);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a2d      	ldr	r2, [pc, #180]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 80015e6:	625a      	str	r2, [r3, #36]	; 0x24
 80015e8:	4a2c      	ldr	r2, [pc, #176]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch1_ch2_ch3);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a2a      	ldr	r2, [pc, #168]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
 80015f4:	4a29      	ldr	r2, [pc, #164]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch1_ch2_ch3);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a27      	ldr	r2, [pc, #156]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001600:	4a26      	ldr	r2, [pc, #152]	; (800169c <HAL_TIM_Base_MspInit+0x1fc>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim8_ch4_trig_com.Instance = DMA2_Stream7;
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 8001608:	4a27      	ldr	r2, [pc, #156]	; (80016a8 <HAL_TIM_Base_MspInit+0x208>)
 800160a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Channel = DMA_CHANNEL_7;
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 800160e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001612:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 8001616:	2240      	movs	r2, #64	; 0x40
 8001618:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001620:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 8001622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001626:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 800162a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800162e:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 8001632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001636:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 800164a:	4816      	ldr	r0, [pc, #88]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 800164c:	f001 f8d4 	bl	80027f8 <HAL_DMA_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_TIM_Base_MspInit+0x1ba>
      Error_Handler();
 8001656:	f7ff fead 	bl	80013b4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
 8001660:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 800166a:	639a      	str	r2, [r3, #56]	; 0x38
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 8001676:	635a      	str	r2, [r3, #52]	; 0x34
 8001678:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_TIM_Base_MspInit+0x204>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800167e:	bf00      	nop
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40000400 	.word	0x40000400
 8001690:	40000800 	.word	0x40000800
 8001694:	40001400 	.word	0x40001400
 8001698:	40010400 	.word	0x40010400
 800169c:	20001540 	.word	0x20001540
 80016a0:	40026440 	.word	0x40026440
 80016a4:	200015a0 	.word	0x200015a0
 80016a8:	400264b8 	.word	0x400264b8

080016ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08e      	sub	sp, #56	; 0x38
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016cc:	d14e      	bne.n	800176c <HAL_TIM_MspPostInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
 80016d2:	4b6e      	ldr	r3, [pc, #440]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a6d      	ldr	r2, [pc, #436]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b6b      	ldr	r3, [pc, #428]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	623b      	str	r3, [r7, #32]
 80016e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	4b67      	ldr	r3, [pc, #412]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a66      	ldr	r2, [pc, #408]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b64      	ldr	r3, [pc, #400]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001706:	2306      	movs	r3, #6
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001716:	2301      	movs	r3, #1
 8001718:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171e:	4619      	mov	r1, r3
 8001720:	485b      	ldr	r0, [pc, #364]	; (8001890 <HAL_TIM_MspPostInit+0x1e4>)
 8001722:	f001 fc6b 	bl	8002ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001726:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001738:	2301      	movs	r3, #1
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001740:	4619      	mov	r1, r3
 8001742:	4854      	ldr	r0, [pc, #336]	; (8001894 <HAL_TIM_MspPostInit+0x1e8>)
 8001744:	f001 fc5a 	bl	8002ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800175a:	2301      	movs	r3, #1
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	484a      	ldr	r0, [pc, #296]	; (8001890 <HAL_TIM_MspPostInit+0x1e4>)
 8001766:	f001 fc49 	bl	8002ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800176a:	e08a      	b.n	8001882 <HAL_TIM_MspPostInit+0x1d6>
  else if(htim->Instance==TIM3)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a49      	ldr	r2, [pc, #292]	; (8001898 <HAL_TIM_MspPostInit+0x1ec>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d13c      	bne.n	80017f0 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	4b44      	ldr	r3, [pc, #272]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a43      	ldr	r2, [pc, #268]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b41      	ldr	r3, [pc, #260]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	4b3d      	ldr	r3, [pc, #244]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a3c      	ldr	r2, [pc, #240]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b3a      	ldr	r3, [pc, #232]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 80017ae:	2323      	movs	r3, #35	; 0x23
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017be:	2302      	movs	r3, #2
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	4619      	mov	r1, r3
 80017c8:	4832      	ldr	r0, [pc, #200]	; (8001894 <HAL_TIM_MspPostInit+0x1e8>)
 80017ca:	f001 fc17 	bl	8002ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017ce:	2340      	movs	r3, #64	; 0x40
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017de:	2302      	movs	r3, #2
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	4619      	mov	r1, r3
 80017e8:	482c      	ldr	r0, [pc, #176]	; (800189c <HAL_TIM_MspPostInit+0x1f0>)
 80017ea:	f001 fc07 	bl	8002ffc <HAL_GPIO_Init>
}
 80017ee:	e048      	b.n	8001882 <HAL_TIM_MspPostInit+0x1d6>
  else if(htim->Instance==TIM4)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a2a      	ldr	r2, [pc, #168]	; (80018a0 <HAL_TIM_MspPostInit+0x1f4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d11f      	bne.n	800183a <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a22      	ldr	r2, [pc, #136]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001816:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001828:	2302      	movs	r3, #2
 800182a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001830:	4619      	mov	r1, r3
 8001832:	4818      	ldr	r0, [pc, #96]	; (8001894 <HAL_TIM_MspPostInit+0x1e8>)
 8001834:	f001 fbe2 	bl	8002ffc <HAL_GPIO_Init>
}
 8001838:	e023      	b.n	8001882 <HAL_TIM_MspPostInit+0x1d6>
  else if(htim->Instance==TIM8)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <HAL_TIM_MspPostInit+0x1f8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d11e      	bne.n	8001882 <HAL_TIM_MspPostInit+0x1d6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	4a0f      	ldr	r2, [pc, #60]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	6313      	str	r3, [r2, #48]	; 0x30
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_TIM_MspPostInit+0x1e0>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001860:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001872:	2303      	movs	r3, #3
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187a:	4619      	mov	r1, r3
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <HAL_TIM_MspPostInit+0x1f0>)
 800187e:	f001 fbbd 	bl	8002ffc <HAL_GPIO_Init>
}
 8001882:	bf00      	nop
 8001884:	3738      	adds	r7, #56	; 0x38
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000
 8001894:	40020400 	.word	0x40020400
 8001898:	40000400 	.word	0x40000400
 800189c:	40020800 	.word	0x40020800
 80018a0:	40000800 	.word	0x40000800
 80018a4:	40010400 	.word	0x40010400

080018a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_UART_MspInit+0x94>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d134      	bne.n	8001934 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_UART_MspInit+0x98>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a1b      	ldr	r2, [pc, #108]	; (8001940 <HAL_UART_MspInit+0x98>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_UART_MspInit+0x98>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_UART_MspInit+0x98>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a14      	ldr	r2, [pc, #80]	; (8001940 <HAL_UART_MspInit+0x98>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_UART_MspInit+0x98>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001902:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001914:	2307      	movs	r3, #7
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4809      	ldr	r0, [pc, #36]	; (8001944 <HAL_UART_MspInit+0x9c>)
 8001920:	f001 fb6c 	bl	8002ffc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	2027      	movs	r0, #39	; 0x27
 800192a:	f000 ff2e 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800192e:	2027      	movs	r0, #39	; 0x27
 8001930:	f000 ff47 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40004800 	.word	0x40004800
 8001940:	40023800 	.word	0x40023800
 8001944:	40020c00 	.word	0x40020c00

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800194c:	e7fe      	b.n	800194c <NMI_Handler+0x4>

0800194e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <MemManage_Handler+0x4>

0800195a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <UsageFault_Handler+0x4>

08001966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001994:	f000 fdda 	bl	800254c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <TIM2_IRQHandler+0x10>)
 80019a2:	f004 fc2d 	bl	8006200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200013d8 	.word	0x200013d8

080019b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <USART3_IRQHandler+0x10>)
 80019b6:	f005 fcd7 	bl	8007368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20001600 	.word	0x20001600

080019c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	// HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <TIM7_IRQHandler+0x10>)
 80019ca:	f004 fc19 	bl	8006200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200014b0 	.word	0x200014b0

080019d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_3);
 80019dc:	2108      	movs	r1, #8
 80019de:	4804      	ldr	r0, [pc, #16]	; (80019f0 <DMA2_Stream2_IRQHandler+0x18>)
 80019e0:	f004 fb3c 	bl	800605c <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1_ch2_ch3);
 80019e4:	4803      	ldr	r0, [pc, #12]	; (80019f4 <DMA2_Stream2_IRQHandler+0x1c>)
 80019e6:	f001 f89f 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200014f8 	.word	0x200014f8
 80019f4:	20001540 	.word	0x20001540

080019f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <OTG_FS_IRQHandler+0x10>)
 80019fe:	f001 ff1d 	bl	800383c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20003f20 	.word	0x20003f20

08001a0c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */
	//HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_4);
  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <DMA2_Stream7_IRQHandler+0x10>)
 8001a12:	f001 f889 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200015a0 	.word	0x200015a0

08001a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <_sbrk+0x5c>)
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <_sbrk+0x60>)
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <_sbrk+0x64>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <_sbrk+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d207      	bcs.n	8001a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a50:	f00d fe3c 	bl	800f6cc <__errno>
 8001a54:	4603      	mov	r3, r0
 8001a56:	220c      	movs	r2, #12
 8001a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a5e:	e009      	b.n	8001a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <_sbrk+0x64>)
 8001a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20020000 	.word	0x20020000
 8001a80:	00000400 	.word	0x00000400
 8001a84:	20001648 	.word	0x20001648
 8001a88:	20004238 	.word	0x20004238

08001a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <SystemInit+0x20>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <SystemInit+0x20>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <ReadLongFile>:

	int gg =99;
}
// ------------------------------------------------------------------------------
FRESULT ReadLongFile(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
	uint16_t i=0, i1=0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	81fb      	strh	r3, [r7, #14]
 8001aba:	2300      	movs	r3, #0
 8001abc:	81bb      	strh	r3, [r7, #12]
	uint32_t ind=0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
//  uint32_t f_size = MyFile.fsize;
	uint32_t f_size = MyFile.obj.fs->fsize;
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <ReadLongFile+0x98>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	607b      	str	r3, [r7, #4]

	sprintf(str1,"fsize: %lurn",(unsigned long)f_size);
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	491f      	ldr	r1, [pc, #124]	; (8001b4c <ReadLongFile+0x9c>)
 8001ace:	4820      	ldr	r0, [pc, #128]	; (8001b50 <ReadLongFile+0xa0>)
 8001ad0:	f00d ff2e 	bl	800f930 <siprintf>
	//HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
	ind = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
	do
	{
		if(f_size < 512)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ade:	d202      	bcs.n	8001ae6 <ReadLongFile+0x36>
		{
			i1 = f_size;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	81bb      	strh	r3, [r7, #12]
 8001ae4:	e002      	b.n	8001aec <ReadLongFile+0x3c>
		}
		else
		{
			i1 = 512;
 8001ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aea:	81bb      	strh	r3, [r7, #12]
		}
		f_size -= i1;
 8001aec:	89bb      	ldrh	r3, [r7, #12]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	607b      	str	r3, [r7, #4]
		f_lseek(&MyFile,ind);
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	4814      	ldr	r0, [pc, #80]	; (8001b48 <ReadLongFile+0x98>)
 8001af8:	f00c fdc9 	bl	800e68e <f_lseek>
		f_read(&MyFile,sect,i1,(UINT *)&bytesread);
 8001afc:	89ba      	ldrh	r2, [r7, #12]
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <ReadLongFile+0xa4>)
 8001b00:	4915      	ldr	r1, [pc, #84]	; (8001b58 <ReadLongFile+0xa8>)
 8001b02:	4811      	ldr	r0, [pc, #68]	; (8001b48 <ReadLongFile+0x98>)
 8001b04:	f00c fa28 	bl	800df58 <f_read>

		for(i=0; i<bytesread; i++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	81fb      	strh	r3, [r7, #14]
 8001b0c:	e00b      	b.n	8001b26 <ReadLongFile+0x76>
		{
			HAL_UART_Transmit(&huart3,sect+i,1,0x1000);
 8001b0e:	89fb      	ldrh	r3, [r7, #14]
 8001b10:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <ReadLongFile+0xa8>)
 8001b12:	1899      	adds	r1, r3, r2
 8001b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4810      	ldr	r0, [pc, #64]	; (8001b5c <ReadLongFile+0xac>)
 8001b1c:	f005 fb4d 	bl	80071ba <HAL_UART_Transmit>
		for(i=0; i<bytesread; i++)
 8001b20:	89fb      	ldrh	r3, [r7, #14]
 8001b22:	3301      	adds	r3, #1
 8001b24:	81fb      	strh	r3, [r7, #14]
 8001b26:	89fa      	ldrh	r2, [r7, #14]
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <ReadLongFile+0xa4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d3ee      	bcc.n	8001b0e <ReadLongFile+0x5e>
			//char test_str[] = "USER_read\n\r\0";
//			CDC_Transmit_FS(sect+i, 1);								// <<<<<<<<<<<<,, READ DATA
			//memset(test_str, 0, sizeof(test_str));
		}
		ind += i1;
 8001b30:	89bb      	ldrh	r3, [r7, #12]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	4413      	add	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
	} while(f_size>0);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1cc      	bne.n	8001ad8 <ReadLongFile+0x28>
		// HAL_UART_Transmit(&huart1,(uint8_t*)"rn",2,0x1000);
	return FR_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20002894 	.word	0x20002894
 8001b4c:	0801008c 	.word	0x0801008c
 8001b50:	200038c8 	.word	0x200038c8
 8001b54:	20001850 	.word	0x20001850
 8001b58:	2000164c 	.word	0x2000164c
 8001b5c:	20001600 	.word	0x20001600

08001b60 <read_file>:
// ------------------------------------------------------------------------------
/* Function read file from root dir. If file didn't find, function goes to  Error_Handler
 */
void read_file(char* name)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	uint8_t status_d = disk_initialize(SDFatFs.drv);				// return 0
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <read_file+0x60>)
 8001b6a:	785b      	ldrb	r3, [r3, #1]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f009 fc39 	bl	800b3e4 <disk_initialize>
 8001b72:	4603      	mov	r3, r0
 8001b74:	73fb      	strb	r3, [r7, #15]

	status_d = f_mount(&SDFatFs,(TCHAR const*)USERPath,0);			// Return 1
 8001b76:	2200      	movs	r2, #0
 8001b78:	4912      	ldr	r1, [pc, #72]	; (8001bc4 <read_file+0x64>)
 8001b7a:	4811      	ldr	r0, [pc, #68]	; (8001bc0 <read_file+0x60>)
 8001b7c:	f00b ffda 	bl	800db34 <f_mount>
 8001b80:	4603      	mov	r3, r0
 8001b82:	73fb      	strb	r3, [r7, #15]
	if(status_d != FR_OK)
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <read_file+0x30>
	{
		//Error_Handler();											// Turn OFF green LED if error
		error_sd_card();
 8001b8a:	f000 f9b1 	bl	8001ef0 <error_sd_card>

			ReadLongFile();											// Read data from file
			f_close(&MyFile);										// Close file after reading data
		}
	 }
}
 8001b8e:	e013      	b.n	8001bb8 <read_file+0x58>
		status_d = f_open(&MyFile, name, FA_READ);					// If OK. Return 1
 8001b90:	2201      	movs	r2, #1
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	480c      	ldr	r0, [pc, #48]	; (8001bc8 <read_file+0x68>)
 8001b96:	f00c f813 	bl	800dbc0 <f_open>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	73fb      	strb	r3, [r7, #15]
		if(status_d != FR_OK)
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <read_file+0x4a>
			error_sd_card();
 8001ba4:	f000 f9a4 	bl	8001ef0 <error_sd_card>
}
 8001ba8:	e006      	b.n	8001bb8 <read_file+0x58>
			no_error_with_sd_card();					// Turn ON GREEN LED if all OKAY
 8001baa:	f000 f9ad 	bl	8001f08 <no_error_with_sd_card>
			ReadLongFile();											// Read data from file
 8001bae:	f7ff ff7f 	bl	8001ab0 <ReadLongFile>
			f_close(&MyFile);										// Close file after reading data
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <read_file+0x68>)
 8001bb4:	f00c fd41 	bl	800e63a <f_close>
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20001858 	.word	0x20001858
 8001bc4:	2000390c 	.word	0x2000390c
 8001bc8:	20002894 	.word	0x20002894

08001bcc <create_file>:
// ------------------------------------------------------------------------------
// Create file and write data in file
void create_file(char* file_name, char* data, uint16_t size_of_data)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	80fb      	strh	r3, [r7, #6]
	uint8_t status_d = disk_initialize(SDFatFs.drv);
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <create_file+0x7c>)
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f009 fc00 	bl	800b3e4 <disk_initialize>
 8001be4:	4603      	mov	r3, r0
 8001be6:	75fb      	strb	r3, [r7, #23]

	FRESULT res; 											// Result enum
	//uint8_t wtext[] = "Hello from STM32!!!";

	if(f_mount(&SDFatFs,(TCHAR const*)USERPath,0) != FR_OK)
 8001be8:	2200      	movs	r2, #0
 8001bea:	4918      	ldr	r1, [pc, #96]	; (8001c4c <create_file+0x80>)
 8001bec:	4816      	ldr	r0, [pc, #88]	; (8001c48 <create_file+0x7c>)
 8001bee:	f00b ffa1 	bl	800db34 <f_mount>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <create_file+0x32>
	{
		//Error_Handler();
		error_sd_card();
 8001bf8:	f000 f97a 	bl	8001ef0 <error_sd_card>
			no_error_with_sd_card();

			f_close(&MyFile);
	    }
	 }
}
 8001bfc:	e020      	b.n	8001c40 <create_file+0x74>
		if(f_open(&MyFile, file_name ,FA_CREATE_ALWAYS|FA_WRITE) != FR_OK)
 8001bfe:	220a      	movs	r2, #10
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	4813      	ldr	r0, [pc, #76]	; (8001c50 <create_file+0x84>)
 8001c04:	f00b ffdc 	bl	800dbc0 <f_open>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <create_file+0x48>
			error_sd_card();
 8001c0e:	f000 f96f 	bl	8001ef0 <error_sd_card>
}
 8001c12:	e015      	b.n	8001c40 <create_file+0x74>
			res = f_write(&MyFile, data , size_of_data, (void*)&byteswritten);
 8001c14:	88fa      	ldrh	r2, [r7, #6]
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <create_file+0x88>)
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	480d      	ldr	r0, [pc, #52]	; (8001c50 <create_file+0x84>)
 8001c1c:	f00c fafb 	bl	800e216 <f_write>
 8001c20:	4603      	mov	r3, r0
 8001c22:	75bb      	strb	r3, [r7, #22]
			if((byteswritten==0)||(res!=FR_OK))
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <create_file+0x88>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <create_file+0x66>
 8001c2c:	7dbb      	ldrb	r3, [r7, #22]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <create_file+0x6a>
				error_sd_card();
 8001c32:	f000 f95d 	bl	8001ef0 <error_sd_card>
			no_error_with_sd_card();
 8001c36:	f000 f967 	bl	8001f08 <no_error_with_sd_card>
			f_close(&MyFile);
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <create_file+0x84>)
 8001c3c:	f00c fcfd 	bl	800e63a <f_close>
}
 8001c40:	bf00      	nop
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20001858 	.word	0x20001858
 8001c4c:	2000390c 	.word	0x2000390c
 8001c50:	20002894 	.word	0x20002894
 8001c54:	2000184c 	.word	0x2000184c

08001c58 <read_files_and_folders_in_dir>:
// ------------------------------------------------------------------------------
void read_files_and_folders_in_dir(char *dir_path)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b0de      	sub	sp, #376	; 0x178
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001c62:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c66:	6018      	str	r0, [r3, #0]
	////	#else
	////		TCHAR	fname[13];		/* File name */
	////	#endif
	////	} FILINFO;

	uint8_t status_d = disk_initialize(SDFatFs.drv);
 8001c68:	4b92      	ldr	r3, [pc, #584]	; (8001eb4 <read_files_and_folders_in_dir+0x25c>)
 8001c6a:	785b      	ldrb	r3, [r3, #1]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f009 fbb9 	bl	800b3e4 <disk_initialize>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	//read dir
	if(f_mount(&SDFatFs,(TCHAR const*)USERPath,0)!=FR_OK)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	498f      	ldr	r1, [pc, #572]	; (8001eb8 <read_files_and_folders_in_dir+0x260>)
 8001c7c:	488d      	ldr	r0, [pc, #564]	; (8001eb4 <read_files_and_folders_in_dir+0x25c>)
 8001c7e:	f00b ff59 	bl	800db34 <f_mount>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <read_files_and_folders_in_dir+0x36>
	{
		//Error_Handler();
		error_sd_card();
 8001c88:	f000 f932 	bl	8001ef0 <error_sd_card>
 8001c8c:	e109      	b.n	8001ea2 <read_files_and_folders_in_dir+0x24a>
//		fileInfo.fsize = sizeof(sect);
//
//		strcpy(fileInfo.altname, (char*)sect);     // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//		fileInfo.fsize = sizeof(sect);

	    result = f_opendir(&dir, dir_path);				// Path to directory. "/" - mean root dir
 8001c8e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001c92:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c96:	f107 0210 	add.w	r2, r7, #16
 8001c9a:	6819      	ldr	r1, [r3, #0]
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	f00c ff1a 	bl	800ead6 <f_opendir>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b85      	ldr	r3, [pc, #532]	; (8001ebc <read_files_and_folders_in_dir+0x264>)
 8001ca8:	701a      	strb	r2, [r3, #0]
	    if (result == FR_OK)
 8001caa:	4b84      	ldr	r3, [pc, #528]	; (8001ebc <read_files_and_folders_in_dir+0x264>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 80f7 	bne.w	8001ea2 <read_files_and_folders_in_dir+0x24a>
	    {
	    	while(1)
	    	{
	    	    result = f_readdir(&dir, &fileInfo);		// Read dit
 8001cb4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f00c ffa2 	bl	800ec08 <f_readdir>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b7c      	ldr	r3, [pc, #496]	; (8001ebc <read_files_and_folders_in_dir+0x264>)
 8001cca:	701a      	strb	r2, [r3, #0]
	    	    if (result==FR_OK && fileInfo.fname[0])		// If there are files
 8001ccc:	4b7b      	ldr	r3, [pc, #492]	; (8001ebc <read_files_and_folders_in_dir+0x264>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d150      	bne.n	8001d76 <read_files_and_folders_in_dir+0x11e>
 8001cd4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001cd8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001cdc:	7d9b      	ldrb	r3, [r3, #22]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d049      	beq.n	8001d76 <read_files_and_folders_in_dir+0x11e>
	    	    {
	    	    	 fn = fileInfo.altname;
 8001ce2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ce6:	3309      	adds	r3, #9
 8001ce8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	    	    	 if(strlen(fn))
 8001cec:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d017      	beq.n	8001d26 <read_files_and_folders_in_dir+0xce>
	    	    	 {
	    	    		 // Print name of file
	    	    		 HAL_UART_Transmit(&huart3,(uint8_t*)fn,strlen(fn),0x1000);
 8001cf6:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8001cfa:	f7fe fa69 	bl	80001d0 <strlen>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d06:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d0a:	486d      	ldr	r0, [pc, #436]	; (8001ec0 <read_files_and_folders_in_dir+0x268>)
 8001d0c:	f005 fa55 	bl	80071ba <HAL_UART_Transmit>
	    	    		 HAL_UART_Transmit(&huart3,"\n\r",4,0x1000);
 8001d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d14:	2204      	movs	r2, #4
 8001d16:	496b      	ldr	r1, [pc, #428]	; (8001ec4 <read_files_and_folders_in_dir+0x26c>)
 8001d18:	4869      	ldr	r0, [pc, #420]	; (8001ec0 <read_files_and_folders_in_dir+0x268>)
 8001d1a:	f005 fa4e 	bl	80071ba <HAL_UART_Transmit>
	    	    		 int w = 99;
 8001d1e:	2363      	movs	r3, #99	; 0x63
 8001d20:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001d24:	e013      	b.n	8001d4e <read_files_and_folders_in_dir+0xf6>
	    	    	 }
	    	    	 else
	    	    	 {
	    	    		 HAL_UART_Transmit(&huart3,(uint8_t*)fileInfo.fname,strlen((char*)fileInfo.fname),0x1000);
 8001d26:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d2a:	3316      	adds	r3, #22
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fa4f 	bl	80001d0 <strlen>
 8001d32:	4603      	mov	r3, r0
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d3a:	f103 0116 	add.w	r1, r3, #22
 8001d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d42:	485f      	ldr	r0, [pc, #380]	; (8001ec0 <read_files_and_folders_in_dir+0x268>)
 8001d44:	f005 fa39 	bl	80071ba <HAL_UART_Transmit>
	    	    		 int e = 99;
 8001d48:	2363      	movs	r3, #99	; 0x63
 8001d4a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	    	    	 }

	    	    	 if(fileInfo.fattrib&AM_DIR)
 8001d4e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001d52:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d56:	7a1b      	ldrb	r3, [r3, #8]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0a9      	beq.n	8001cb4 <read_files_and_folders_in_dir+0x5c>
	    	    	 {
	    	    	    HAL_UART_Transmit(&huart3,(uint8_t*)" [DIR]",7,0x1000);
 8001d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d64:	2207      	movs	r2, #7
 8001d66:	4958      	ldr	r1, [pc, #352]	; (8001ec8 <read_files_and_folders_in_dir+0x270>)
 8001d68:	4855      	ldr	r0, [pc, #340]	; (8001ec0 <read_files_and_folders_in_dir+0x268>)
 8001d6a:	f005 fa26 	bl	80071ba <HAL_UART_Transmit>
	    	    		 int r = 99;
 8001d6e:	2363      	movs	r3, #99	; 0x63
 8001d70:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	    	    result = f_readdir(&dir, &fileInfo);		// Read dit
 8001d74:	e79e      	b.n	8001cb4 <read_files_and_folders_in_dir+0x5c>
	    	    }
	    	    else break;
	    	}

	    	// print free and used memory
	    	f_getfree("/", &fre_clust, &fs);
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4a54      	ldr	r2, [pc, #336]	; (8001ecc <read_files_and_folders_in_dir+0x274>)
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4854      	ldr	r0, [pc, #336]	; (8001ed0 <read_files_and_folders_in_dir+0x278>)
 8001d80:	f00c ff7f 	bl	800ec82 <f_getfree>
	    	sprintf(str1,"fre_clust: %lurn",fre_clust);
 8001d84:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001d88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4950      	ldr	r1, [pc, #320]	; (8001ed4 <read_files_and_folders_in_dir+0x27c>)
 8001d92:	4851      	ldr	r0, [pc, #324]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001d94:	f00d fdcc 	bl	800f930 <siprintf>
	    	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 8001d98:	484f      	ldr	r0, [pc, #316]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001d9a:	f7fe fa19 	bl	80001d0 <strlen>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da6:	494c      	ldr	r1, [pc, #304]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001da8:	4845      	ldr	r0, [pc, #276]	; (8001ec0 <read_files_and_folders_in_dir+0x268>)
 8001daa:	f005 fa06 	bl	80071ba <HAL_UART_Transmit>

	    	sprintf(str1,"n_fatent: %lurn",fs->n_fatent);
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <read_files_and_folders_in_dir+0x274>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4949      	ldr	r1, [pc, #292]	; (8001edc <read_files_and_folders_in_dir+0x284>)
 8001db8:	4847      	ldr	r0, [pc, #284]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001dba:	f00d fdb9 	bl	800f930 <siprintf>
	    	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 8001dbe:	4846      	ldr	r0, [pc, #280]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001dc0:	f7fe fa06 	bl	80001d0 <strlen>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dcc:	4942      	ldr	r1, [pc, #264]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001dce:	483c      	ldr	r0, [pc, #240]	; (8001ec0 <read_files_and_folders_in_dir+0x268>)
 8001dd0:	f005 f9f3 	bl	80071ba <HAL_UART_Transmit>

	    	sprintf(str1,"fs_csize: %drn",fs->csize);
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <read_files_and_folders_in_dir+0x274>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	895b      	ldrh	r3, [r3, #10]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4940      	ldr	r1, [pc, #256]	; (8001ee0 <read_files_and_folders_in_dir+0x288>)
 8001dde:	483e      	ldr	r0, [pc, #248]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001de0:	f00d fda6 	bl	800f930 <siprintf>
	    	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 8001de4:	483c      	ldr	r0, [pc, #240]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001de6:	f7fe f9f3 	bl	80001d0 <strlen>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df2:	4939      	ldr	r1, [pc, #228]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001df4:	4832      	ldr	r0, [pc, #200]	; (8001ec0 <read_files_and_folders_in_dir+0x268>)
 8001df6:	f005 f9e0 	bl	80071ba <HAL_UART_Transmit>

	    	tot_sect = (fs->n_fatent - 2) * fs->csize;
 8001dfa:	4b34      	ldr	r3, [pc, #208]	; (8001ecc <read_files_and_folders_in_dir+0x274>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	3b02      	subs	r3, #2
 8001e02:	4a32      	ldr	r2, [pc, #200]	; (8001ecc <read_files_and_folders_in_dir+0x274>)
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	8952      	ldrh	r2, [r2, #10]
 8001e08:	fb02 f303 	mul.w	r3, r2, r3
 8001e0c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	    	sprintf(str1,"tot_sect: %lurn",tot_sect);
 8001e10:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8001e14:	4933      	ldr	r1, [pc, #204]	; (8001ee4 <read_files_and_folders_in_dir+0x28c>)
 8001e16:	4830      	ldr	r0, [pc, #192]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001e18:	f00d fd8a 	bl	800f930 <siprintf>
	    	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 8001e1c:	482e      	ldr	r0, [pc, #184]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001e1e:	f7fe f9d7 	bl	80001d0 <strlen>
 8001e22:	4603      	mov	r3, r0
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2a:	492b      	ldr	r1, [pc, #172]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001e2c:	4824      	ldr	r0, [pc, #144]	; (8001ec0 <read_files_and_folders_in_dir+0x268>)
 8001e2e:	f005 f9c4 	bl	80071ba <HAL_UART_Transmit>

	    	fre_sect = fre_clust * fs->csize;
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <read_files_and_folders_in_dir+0x274>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	895b      	ldrh	r3, [r3, #10]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001e3e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fb02 f303 	mul.w	r3, r2, r3
 8001e48:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	    	sprintf(str1,"fre_sect: %lurn",fre_sect);
 8001e4c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001e50:	4925      	ldr	r1, [pc, #148]	; (8001ee8 <read_files_and_folders_in_dir+0x290>)
 8001e52:	4821      	ldr	r0, [pc, #132]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001e54:	f00d fd6c 	bl	800f930 <siprintf>
	    	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 8001e58:	481f      	ldr	r0, [pc, #124]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001e5a:	f7fe f9b9 	bl	80001d0 <strlen>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e66:	491c      	ldr	r1, [pc, #112]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001e68:	4815      	ldr	r0, [pc, #84]	; (8001ec0 <read_files_and_folders_in_dir+0x268>)
 8001e6a:	f005 f9a6 	bl	80071ba <HAL_UART_Transmit>

	    	sprintf(str1, "%lu KB total drive space.rn%lu KB available.rn",
 8001e6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001e72:	085a      	lsrs	r2, r3, #1
 8001e74:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e78:	085b      	lsrs	r3, r3, #1
 8001e7a:	491c      	ldr	r1, [pc, #112]	; (8001eec <read_files_and_folders_in_dir+0x294>)
 8001e7c:	4816      	ldr	r0, [pc, #88]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001e7e:	f00d fd57 	bl	800f930 <siprintf>
	    	fre_sect/2, tot_sect/2);
	    	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 8001e82:	4815      	ldr	r0, [pc, #84]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001e84:	f7fe f9a4 	bl	80001d0 <strlen>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e90:	4911      	ldr	r1, [pc, #68]	; (8001ed8 <read_files_and_folders_in_dir+0x280>)
 8001e92:	480b      	ldr	r0, [pc, #44]	; (8001ec0 <read_files_and_folders_in_dir+0x268>)
 8001e94:	f005 f991 	bl	80071ba <HAL_UART_Transmit>

	    	f_closedir(&dir);
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f00c fe8d 	bl	800ebbc <f_closedir>
	    }
	}
	FATFS_UnLinkDriver(USERPath);
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <read_files_and_folders_in_dir+0x260>)
 8001ea4:	f00d f836 	bl	800ef14 <FATFS_UnLinkDriver>
}
 8001ea8:	bf00      	nop
 8001eaa:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20001858 	.word	0x20001858
 8001eb8:	2000390c 	.word	0x2000390c
 8001ebc:	20001854 	.word	0x20001854
 8001ec0:	20001600 	.word	0x20001600
 8001ec4:	0801009c 	.word	0x0801009c
 8001ec8:	080100a0 	.word	0x080100a0
 8001ecc:	20002890 	.word	0x20002890
 8001ed0:	080100a8 	.word	0x080100a8
 8001ed4:	080100ac 	.word	0x080100ac
 8001ed8:	200038c8 	.word	0x200038c8
 8001edc:	080100c0 	.word	0x080100c0
 8001ee0:	080100d0 	.word	0x080100d0
 8001ee4:	080100e0 	.word	0x080100e0
 8001ee8:	080100f0 	.word	0x080100f0
 8001eec:	08010100 	.word	0x08010100

08001ef0 <error_sd_card>:
// ------------------------------------------------------------------------------
void error_sd_card(void)			// Turn on RED LED
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET );
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001efa:	4802      	ldr	r0, [pc, #8]	; (8001f04 <error_sd_card+0x14>)
 8001efc:	f001 fa1a 	bl	8003334 <HAL_GPIO_WritePin>
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40020c00 	.word	0x40020c00

08001f08 <no_error_with_sd_card>:
// ------------------------------------------------------------------------------
void no_error_with_sd_card(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET );
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f12:	4802      	ldr	r0, [pc, #8]	; (8001f1c <no_error_with_sd_card+0x14>)
 8001f14:	f001 fa0e 	bl	8003334 <HAL_GPIO_WritePin>
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40020c00 	.word	0x40020c00

08001f20 <test_micto_cd_card>:
// ------------------------------------------------------------------------------
void test_micto_cd_card(void)
{
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
	 HAL_TIM_Base_Start_IT(&htim7);
 8001f26:	4813      	ldr	r0, [pc, #76]	; (8001f74 <test_micto_cd_card+0x54>)
 8001f28:	f003 fe06 	bl	8005b38 <HAL_TIM_Base_Start_IT>
	 HAL_Delay(100);
 8001f2c:	2064      	movs	r0, #100	; 0x64
 8001f2e:	f000 fb2d 	bl	800258c <HAL_Delay>

	 // Read blocks
	 // read_block();

	 // 2. Read file with "123.txt" name in root directory
	 read_file("123.txt");
 8001f32:	4811      	ldr	r0, [pc, #68]	; (8001f78 <test_micto_cd_card+0x58>)
 8001f34:	f7ff fe14 	bl	8001b60 <read_file>
	 //HAL_Delay(1000);

	 // 3. Write or rewrite file qwerty.txt and sawe where "Test write in file !!!"
	 char write_data[] = "Test write in file !!!";
 8001f38:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <test_micto_cd_card+0x5c>)
 8001f3a:	463c      	mov	r4, r7
 8001f3c:	461d      	mov	r5, r3
 8001f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f46:	6020      	str	r0, [r4, #0]
 8001f48:	3404      	adds	r4, #4
 8001f4a:	8021      	strh	r1, [r4, #0]
 8001f4c:	3402      	adds	r4, #2
 8001f4e:	0c0b      	lsrs	r3, r1, #16
 8001f50:	7023      	strb	r3, [r4, #0]
	 create_file("qwerty.txt", write_data , sizeof(write_data));
 8001f52:	463b      	mov	r3, r7
 8001f54:	2217      	movs	r2, #23
 8001f56:	4619      	mov	r1, r3
 8001f58:	4809      	ldr	r0, [pc, #36]	; (8001f80 <test_micto_cd_card+0x60>)
 8001f5a:	f7ff fe37 	bl	8001bcc <create_file>
	 HAL_Delay(1000);
 8001f5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f62:	f000 fb13 	bl	800258c <HAL_Delay>

	 // 4. Read files and folders in dir. "/" - root dir
	 read_files_and_folders_in_dir("/");
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <test_micto_cd_card+0x64>)
 8001f68:	f7ff fe76 	bl	8001c58 <read_files_and_folders_in_dir>
//	 HAL_Delay(1000);

}
 8001f6c:	bf00      	nop
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bdb0      	pop	{r4, r5, r7, pc}
 8001f74:	200014b0 	.word	0x200014b0
 8001f78:	08010130 	.word	0x08010130
 8001f7c:	08010144 	.word	0x08010144
 8001f80:	08010138 	.word	0x08010138
 8001f84:	080100a8 	.word	0x080100a8

08001f88 <SD_Write_Block>:
void SPI_SendByte(uint8_t bt);
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg);

// ----------------------------------------------------------------------------
uint8_t SD_Write_Block (uint8_t *buff, uint32_t lba)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
	uint8_t result;
	uint16_t cnt;

	result=SD_cmd(CMD24,lba); 			//CMD24 даташит стр 51 и 97-98
 8001f92:	6839      	ldr	r1, [r7, #0]
 8001f94:	2058      	movs	r0, #88	; 0x58
 8001f96:	f000 f8a1 	bl	80020dc <SD_cmd>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	737b      	strb	r3, [r7, #13]
	if (result!=0x00) return 6; 		//Выйти, если результат не 0x00
 8001f9e:	7b7b      	ldrb	r3, [r7, #13]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <SD_Write_Block+0x20>
 8001fa4:	2306      	movs	r3, #6
 8001fa6:	e03d      	b.n	8002024 <SD_Write_Block+0x9c>
	SPI_Release();
 8001fa8:	f000 fa2c 	bl	8002404 <SPI_Release>
	SPI_SendByte (0xFE); 				//Начало буфера
 8001fac:	20fe      	movs	r0, #254	; 0xfe
 8001fae:	f000 fa0f 	bl	80023d0 <SPI_SendByte>

	for (cnt=0;cnt<512;cnt++) SPI_SendByte(buff[cnt]); 		//Данные
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	81fb      	strh	r3, [r7, #14]
 8001fb6:	e009      	b.n	8001fcc <SD_Write_Block+0x44>
 8001fb8:	89fb      	ldrh	r3, [r7, #14]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fa05 	bl	80023d0 <SPI_SendByte>
 8001fc6:	89fb      	ldrh	r3, [r7, #14]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	81fb      	strh	r3, [r7, #14]
 8001fcc:	89fb      	ldrh	r3, [r7, #14]
 8001fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd2:	d3f1      	bcc.n	8001fb8 <SD_Write_Block+0x30>
	SPI_Release();											//Пропустим котрольную сумму
 8001fd4:	f000 fa16 	bl	8002404 <SPI_Release>
	SPI_Release();
 8001fd8:	f000 fa14 	bl	8002404 <SPI_Release>

	result=SPI_ReceiveByte();
 8001fdc:	f000 fa05 	bl	80023ea <SPI_ReceiveByte>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	737b      	strb	r3, [r7, #13]
	if ((result&0x05)!=0x05) return 6; 		//Выйти, если результат не 0x05 (Даташит стр 111)
 8001fe4:	7b7b      	ldrb	r3, [r7, #13]
 8001fe6:	f003 0305 	and.w	r3, r3, #5
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d001      	beq.n	8001ff2 <SD_Write_Block+0x6a>
 8001fee:	2306      	movs	r3, #6
 8001ff0:	e018      	b.n	8002024 <SD_Write_Block+0x9c>
	cnt=0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	81fb      	strh	r3, [r7, #14]
	do { 									//Ждем окончания состояния BUSY
		result=SPI_ReceiveByte();
 8001ff6:	f000 f9f8 	bl	80023ea <SPI_ReceiveByte>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	737b      	strb	r3, [r7, #13]
		cnt++;
 8001ffe:	89fb      	ldrh	r3, [r7, #14]
 8002000:	3301      	adds	r3, #1
 8002002:	81fb      	strh	r3, [r7, #14]
	} while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8002004:	7b7b      	ldrb	r3, [r7, #13]
 8002006:	2bff      	cmp	r3, #255	; 0xff
 8002008:	d004      	beq.n	8002014 <SD_Write_Block+0x8c>
 800200a:	89fb      	ldrh	r3, [r7, #14]
 800200c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002010:	4293      	cmp	r3, r2
 8002012:	d1f0      	bne.n	8001ff6 <SD_Write_Block+0x6e>

	if (cnt>=0xFFFF) return 6;
 8002014:	89fb      	ldrh	r3, [r7, #14]
 8002016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201a:	4293      	cmp	r3, r2
 800201c:	d101      	bne.n	8002022 <SD_Write_Block+0x9a>
 800201e:	2306      	movs	r3, #6
 8002020:	e000      	b.n	8002024 <SD_Write_Block+0x9c>

	return 0;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <SD_Read_Block>:
// ----------------------------------------------------------------------------
uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
	uint8_t result;
	uint16_t cnt;

	result=SD_cmd (CMD17, lba);
 8002036:	6839      	ldr	r1, [r7, #0]
 8002038:	2051      	movs	r0, #81	; 0x51
 800203a:	f000 f84f 	bl	80020dc <SD_cmd>
 800203e:	4603      	mov	r3, r0
 8002040:	737b      	strb	r3, [r7, #13]
	if (result!=0x00) return 5;
 8002042:	7b7b      	ldrb	r3, [r7, #13]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <SD_Read_Block+0x20>
 8002048:	2305      	movs	r3, #5
 800204a:	e02f      	b.n	80020ac <SD_Read_Block+0x80>
	SPI_Release();
 800204c:	f000 f9da 	bl	8002404 <SPI_Release>

	cnt=0;
 8002050:	2300      	movs	r3, #0
 8002052:	81fb      	strh	r3, [r7, #14]

	do{ 		// Waiting start of bock
		result=SPI_ReceiveByte();
 8002054:	f000 f9c9 	bl	80023ea <SPI_ReceiveByte>
 8002058:	4603      	mov	r3, r0
 800205a:	737b      	strb	r3, [r7, #13]
	    cnt++;
 800205c:	89fb      	ldrh	r3, [r7, #14]
 800205e:	3301      	adds	r3, #1
 8002060:	81fb      	strh	r3, [r7, #14]
	} while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8002062:	7b7b      	ldrb	r3, [r7, #13]
 8002064:	2bfe      	cmp	r3, #254	; 0xfe
 8002066:	d004      	beq.n	8002072 <SD_Read_Block+0x46>
 8002068:	89fb      	ldrh	r3, [r7, #14]
 800206a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800206e:	4293      	cmp	r3, r2
 8002070:	d1f0      	bne.n	8002054 <SD_Read_Block+0x28>

	if (cnt>=0xFFFF) return 5;
 8002072:	89fb      	ldrh	r3, [r7, #14]
 8002074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002078:	4293      	cmp	r3, r2
 800207a:	d101      	bne.n	8002080 <SD_Read_Block+0x54>
 800207c:	2305      	movs	r3, #5
 800207e:	e015      	b.n	80020ac <SD_Read_Block+0x80>
	for (cnt=0;cnt<512;cnt++)
 8002080:	2300      	movs	r3, #0
 8002082:	81fb      	strh	r3, [r7, #14]
 8002084:	e009      	b.n	800209a <SD_Read_Block+0x6e>
	{
		buff[cnt] = SPI_ReceiveByte(); 		// получаем байты блока из шины в буфер
 8002086:	89fb      	ldrh	r3, [r7, #14]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	18d4      	adds	r4, r2, r3
 800208c:	f000 f9ad 	bl	80023ea <SPI_ReceiveByte>
 8002090:	4603      	mov	r3, r0
 8002092:	7023      	strb	r3, [r4, #0]
	for (cnt=0;cnt<512;cnt++)
 8002094:	89fb      	ldrh	r3, [r7, #14]
 8002096:	3301      	adds	r3, #1
 8002098:	81fb      	strh	r3, [r7, #14]
 800209a:	89fb      	ldrh	r3, [r7, #14]
 800209c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a0:	d3f1      	bcc.n	8002086 <SD_Read_Block+0x5a>
	}
	SPI_Release(); 							// Пропускаем контрольную сумму
 80020a2:	f000 f9af 	bl	8002404 <SPI_Release>
	SPI_Release();
 80020a6:	f000 f9ad 	bl	8002404 <SPI_Release>

	return 0;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd90      	pop	{r4, r7, pc}

080020b4 <SD_PowerOn>:
// ----------------------------------------------------------------------------
void SD_PowerOn(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
	Timer7 = 0;
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <SD_PowerOn+0x24>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	801a      	strh	r2, [r3, #0]
	while(Timer7<10) 		// wait 20 msec     while(Timer3<2)
 80020be:	bf00      	nop
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SD_PowerOn+0x24>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b09      	cmp	r3, #9
 80020c8:	d9fa      	bls.n	80020c0 <SD_PowerOn+0xc>
	;
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20001644 	.word	0x20001644

080020dc <SD_cmd>:
// ----------------------------------------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;
	// ACMD<n> is the command sequense of CMD55-CMD<n>

	if (cmd & 0x80)
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da0e      	bge.n	800210e <SD_cmd+0x32>
	{
		cmd &= 0x7F;
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020f6:	71fb      	strb	r3, [r7, #7]
		res = SD_cmd(CMD55, 0);
 80020f8:	2100      	movs	r1, #0
 80020fa:	2077      	movs	r0, #119	; 0x77
 80020fc:	f7ff ffee 	bl	80020dc <SD_cmd>
 8002100:	4603      	mov	r3, r0
 8002102:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002104:	7bbb      	ldrb	r3, [r7, #14]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d901      	bls.n	800210e <SD_cmd+0x32>
 800210a:	7bbb      	ldrb	r3, [r7, #14]
 800210c:	e049      	b.n	80021a2 <SD_cmd+0xc6>
	}
	// Select the card
	SS_SD_DESELECT();
 800210e:	2201      	movs	r2, #1
 8002110:	2108      	movs	r1, #8
 8002112:	4826      	ldr	r0, [pc, #152]	; (80021ac <SD_cmd+0xd0>)
 8002114:	f001 f90e 	bl	8003334 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8002118:	f000 f967 	bl	80023ea <SPI_ReceiveByte>
	SS_SD_SELECT();
 800211c:	2200      	movs	r2, #0
 800211e:	2108      	movs	r1, #8
 8002120:	4822      	ldr	r0, [pc, #136]	; (80021ac <SD_cmd+0xd0>)
 8002122:	f001 f907 	bl	8003334 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8002126:	f000 f960 	bl	80023ea <SPI_ReceiveByte>

	// Send a command packet
	SPI_SendByte(cmd); // Start + Command index
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f94f 	bl	80023d0 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	0e1b      	lsrs	r3, r3, #24
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4618      	mov	r0, r3
 800213a:	f000 f949 	bl	80023d0 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	b2db      	uxtb	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	f000 f943 	bl	80023d0 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	b2db      	uxtb	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f93d 	bl	80023d0 <SPI_SendByte>
	SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f938 	bl	80023d0 <SPI_SendByte>

	n = 0x01; // Dummy CRC + Stop
 8002160:	2301      	movs	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	2b40      	cmp	r3, #64	; 0x40
 8002168:	d101      	bne.n	800216e <SD_cmd+0x92>
 800216a:	2395      	movs	r3, #149	; 0x95
 800216c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	2b48      	cmp	r3, #72	; 0x48
 8002172:	d101      	bne.n	8002178 <SD_cmd+0x9c>
 8002174:	2387      	movs	r3, #135	; 0x87
 8002176:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(n);
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f928 	bl	80023d0 <SPI_SendByte>

	// Receive a command response
	 n = 10; // Wait for a valid response in timeout of 10 attempts
 8002180:	230a      	movs	r3, #10
 8002182:	73fb      	strb	r3, [r7, #15]

	 do {
		 res = SPI_ReceiveByte();
 8002184:	f000 f931 	bl	80023ea <SPI_ReceiveByte>
 8002188:	4603      	mov	r3, r0
 800218a:	73bb      	strb	r3, [r7, #14]
	 } while ((res & 0x80) && --n);
 800218c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002190:	2b00      	cmp	r3, #0
 8002192:	da05      	bge.n	80021a0 <SD_cmd+0xc4>
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	3b01      	subs	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f1      	bne.n	8002184 <SD_cmd+0xa8>

	return res;
 80021a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40020000 	.word	0x40020000

080021b0 <sd_ini>:
// ----------------------------------------------------------------------------
uint8_t sd_ini(void)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af02      	add	r7, sp, #8
	uint8_t ocr[4];
	uint16_t tmr;
	uint32_t temp;


	LD_OFF;
 80021b6:	2201      	movs	r2, #1
 80021b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021bc:	486a      	ldr	r0, [pc, #424]	; (8002368 <sd_ini+0x1b8>)
 80021be:	f001 f8b9 	bl	8003334 <HAL_GPIO_WritePin>
	sdinfo.type = 0;
 80021c2:	4b6a      	ldr	r3, [pc, #424]	; (800236c <sd_ini+0x1bc>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
	// reinit SPI for test
//	temp = hspi1.Init.BaudRatePrescaler;
//	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; //156.25 kbbs
//	HAL_SPI_Init(&hspi1);

	SS_SD_DESELECT();
 80021c8:	2201      	movs	r2, #1
 80021ca:	2108      	movs	r1, #8
 80021cc:	4868      	ldr	r0, [pc, #416]	; (8002370 <sd_ini+0x1c0>)
 80021ce:	f001 f8b1 	bl	8003334 <HAL_GPIO_WritePin>

	for(i = 0; i < 10; i++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	71fb      	strb	r3, [r7, #7]
 80021d6:	e004      	b.n	80021e2 <sd_ini+0x32>
	{
		SPI_Release();
 80021d8:	f000 f914 	bl	8002404 <SPI_Release>
	for(i = 0; i < 10; i++)
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	3301      	adds	r3, #1
 80021e0:	71fb      	strb	r3, [r7, #7]
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	2b09      	cmp	r3, #9
 80021e6:	d9f7      	bls.n	80021d8 <sd_ini+0x28>
	}

//	hspi1.Init.BaudRatePrescaler = temp;
//	HAL_SPI_Init(&hspi1);
	SS_SD_SELECT();
 80021e8:	2200      	movs	r2, #0
 80021ea:	2108      	movs	r1, #8
 80021ec:	4860      	ldr	r0, [pc, #384]	; (8002370 <sd_ini+0x1c0>)
 80021ee:	f001 f8a1 	bl	8003334 <HAL_GPIO_WritePin>
	// For test
//	SPI_SendByte(0x1);
//	SPI_SendByte(0x2);
//	SPI_SendByte(0x3);

	 if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 80021f2:	2100      	movs	r1, #0
 80021f4:	2040      	movs	r0, #64	; 0x40
 80021f6:	f7ff ff71 	bl	80020dc <SD_cmd>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	f040 80ac 	bne.w	800235a <sd_ini+0x1aa>
	 {
		 SPI_Release();
 8002202:	f000 f8ff 	bl	8002404 <SPI_Release>
		 if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8002206:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800220a:	2048      	movs	r0, #72	; 0x48
 800220c:	f7ff ff66 	bl	80020dc <SD_cmd>
 8002210:	4603      	mov	r3, r0
 8002212:	2b01      	cmp	r3, #1
 8002214:	d16e      	bne.n	80022f4 <sd_ini+0x144>
		 {
			 for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8002216:	2300      	movs	r3, #0
 8002218:	71fb      	strb	r3, [r7, #7]
 800221a:	e00c      	b.n	8002236 <sd_ini+0x86>
 800221c:	79fc      	ldrb	r4, [r7, #7]
 800221e:	f000 f8e4 	bl	80023ea <SPI_ReceiveByte>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	f104 0308 	add.w	r3, r4, #8
 800222a:	443b      	add	r3, r7
 800222c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	3301      	adds	r3, #1
 8002234:	71fb      	strb	r3, [r7, #7]
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d9ef      	bls.n	800221c <sd_ini+0x6c>
			 sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02Xrn",ocr[0],ocr[1],ocr[2],ocr[3]);
 800223c:	783b      	ldrb	r3, [r7, #0]
 800223e:	4619      	mov	r1, r3
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	4618      	mov	r0, r3
 8002244:	78bb      	ldrb	r3, [r7, #2]
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	9201      	str	r2, [sp, #4]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	4603      	mov	r3, r0
 800224e:	460a      	mov	r2, r1
 8002250:	4948      	ldr	r1, [pc, #288]	; (8002374 <sd_ini+0x1c4>)
 8002252:	4849      	ldr	r0, [pc, #292]	; (8002378 <sd_ini+0x1c8>)
 8002254:	f00d fb6c 	bl	800f930 <siprintf>

			 // Get trailing return value of R7 resp
			 if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8002258:	78bb      	ldrb	r3, [r7, #2]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d17f      	bne.n	800235e <sd_ini+0x1ae>
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	2baa      	cmp	r3, #170	; 0xaa
 8002262:	d17c      	bne.n	800235e <sd_ini+0x1ae>
			 {
				 for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 8002264:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8002268:	80bb      	strh	r3, [r7, #4]
 800226a:	e002      	b.n	8002272 <sd_ini+0xc2>
 800226c:	88bb      	ldrh	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	80bb      	strh	r3, [r7, #4]
 8002272:	88bb      	ldrh	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <sd_ini+0xd8>
 8002278:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800227c:	20e9      	movs	r0, #233	; 0xe9
 800227e:	f7ff ff2d 	bl	80020dc <SD_cmd>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f1      	bne.n	800226c <sd_ini+0xbc>
				    ; // Wait for leaving idle state (ACMD41 with HCS bit)
				 if (tmr && SD_cmd(CMD58, 0) == 0)
 8002288:	88bb      	ldrh	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d067      	beq.n	800235e <sd_ini+0x1ae>
 800228e:	2100      	movs	r1, #0
 8002290:	207a      	movs	r0, #122	; 0x7a
 8002292:	f7ff ff23 	bl	80020dc <SD_cmd>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d160      	bne.n	800235e <sd_ini+0x1ae>
				 { // Check CCS bit in the OCR
				   for (i = 0; i < 4; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	71fb      	strb	r3, [r7, #7]
 80022a0:	e00c      	b.n	80022bc <sd_ini+0x10c>
				   {
					   ocr[i] = SPI_ReceiveByte();
 80022a2:	79fc      	ldrb	r4, [r7, #7]
 80022a4:	f000 f8a1 	bl	80023ea <SPI_ReceiveByte>
 80022a8:	4603      	mov	r3, r0
 80022aa:	461a      	mov	r2, r3
 80022ac:	f104 0308 	add.w	r3, r4, #8
 80022b0:	443b      	add	r3, r7
 80022b2:	f803 2c08 	strb.w	r2, [r3, #-8]
				   for (i = 0; i < 4; i++)
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	3301      	adds	r3, #1
 80022ba:	71fb      	strb	r3, [r7, #7]
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d9ef      	bls.n	80022a2 <sd_ini+0xf2>
				   }
				   sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02Xrn",ocr[0],ocr[1],ocr[2],ocr[3]);
 80022c2:	783b      	ldrb	r3, [r7, #0]
 80022c4:	4619      	mov	r1, r3
 80022c6:	787b      	ldrb	r3, [r7, #1]
 80022c8:	4618      	mov	r0, r3
 80022ca:	78bb      	ldrb	r3, [r7, #2]
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	9201      	str	r2, [sp, #4]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	4603      	mov	r3, r0
 80022d4:	460a      	mov	r2, r1
 80022d6:	4927      	ldr	r1, [pc, #156]	; (8002374 <sd_ini+0x1c4>)
 80022d8:	4827      	ldr	r0, [pc, #156]	; (8002378 <sd_ini+0x1c8>)
 80022da:	f00d fb29 	bl	800f930 <siprintf>
				   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 80022de:	783b      	ldrb	r3, [r7, #0]
 80022e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <sd_ini+0x13c>
 80022e8:	220c      	movs	r2, #12
 80022ea:	e000      	b.n	80022ee <sd_ini+0x13e>
 80022ec:	2204      	movs	r2, #4
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <sd_ini+0x1bc>)
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	e034      	b.n	800235e <sd_ini+0x1ae>
			 }

		 }
		 else //SDv1 or MMCv3
		 {
			 if (SD_cmd(ACMD41, 0) <= 1)
 80022f4:	2100      	movs	r1, #0
 80022f6:	20e9      	movs	r0, #233	; 0xe9
 80022f8:	f7ff fef0 	bl	80020dc <SD_cmd>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d805      	bhi.n	800230e <sd_ini+0x15e>
			 {
			    sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <sd_ini+0x1bc>)
 8002304:	2202      	movs	r2, #2
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	23e9      	movs	r3, #233	; 0xe9
 800230a:	71bb      	strb	r3, [r7, #6]
 800230c:	e004      	b.n	8002318 <sd_ini+0x168>
			 }
			 else
			 {
			    sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <sd_ini+0x1bc>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	2341      	movs	r3, #65	; 0x41
 8002316:	71bb      	strb	r3, [r7, #6]
			 }

			 for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8002318:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800231c:	80bb      	strh	r3, [r7, #4]
 800231e:	e002      	b.n	8002326 <sd_ini+0x176>
 8002320:	88bb      	ldrh	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	80bb      	strh	r3, [r7, #4]
 8002326:	88bb      	ldrh	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <sd_ini+0x18c>
 800232c:	79bb      	ldrb	r3, [r7, #6]
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fed3 	bl	80020dc <SD_cmd>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f1      	bne.n	8002320 <sd_ini+0x170>
			 if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 800233c:	88bb      	ldrh	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <sd_ini+0x1a2>
 8002342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002346:	2050      	movs	r0, #80	; 0x50
 8002348:	f7ff fec8 	bl	80020dc <SD_cmd>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <sd_ini+0x1ae>
				sdinfo.type = 0;
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <sd_ini+0x1bc>)
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	e001      	b.n	800235e <sd_ini+0x1ae>
		 }
	 }
	 else
	 {
	    return 1;
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <sd_ini+0x1b0>
	 }
	return 0;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bd90      	pop	{r4, r7, pc}
 8002368:	40020800 	.word	0x40020800
 800236c:	200038c4 	.word	0x200038c4
 8002370:	40020000 	.word	0x40020000
 8002374:	0801015c 	.word	0x0801015c
 8002378:	200038c8 	.word	0x200038c8

0800237c <Error>:
// ----------------------------------------------------------------------------
static void Error (void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	LD_ON;
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002386:	4802      	ldr	r0, [pc, #8]	; (8002390 <Error+0x14>)
 8002388:	f000 ffd4 	bl	8003334 <HAL_GPIO_WritePin>
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40020800 	.word	0x40020800

08002394 <SPIx_WriteRead>:
// ----------------------------------------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af02      	add	r7, sp, #8
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]

	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80023a2:	f107 020f 	add.w	r2, r7, #15
 80023a6:	1df9      	adds	r1, r7, #7
 80023a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2301      	movs	r3, #1
 80023b0:	4806      	ldr	r0, [pc, #24]	; (80023cc <SPIx_WriteRead+0x38>)
 80023b2:	f003 f904 	bl	80055be <HAL_SPI_TransmitReceive>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <SPIx_WriteRead+0x2c>
	{
		Error();
 80023bc:	f7ff ffde 	bl	800237c <Error>
	}
	return receivedbyte;
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20001380 	.word	0x20001380

080023d0 <SPI_SendByte>:
// ----------------------------------------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
	SPIx_WriteRead(bt);
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ffd9 	bl	8002394 <SPIx_WriteRead>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <SPI_ReceiveByte>:
// ----------------------------------------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
	uint8_t bt = SPIx_WriteRead(0xFF);
 80023f0:	20ff      	movs	r0, #255	; 0xff
 80023f2:	f7ff ffcf 	bl	8002394 <SPIx_WriteRead>
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
	return bt;
 80023fa:	79fb      	ldrb	r3, [r7, #7]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <SPI_Release>:
// ----------------------------------------------------------------------------
void SPI_Release(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	SPIx_WriteRead(0xFF);
 8002408:	20ff      	movs	r0, #255	; 0xff
 800240a:	f7ff ffc3 	bl	8002394 <SPIx_WriteRead>
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}

08002412 <SPI_wait_ready>:
// ----------------------------------------------------------------------------
uint8_t SPI_wait_ready(void)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
	uint8_t res;
	uint16_t cnt;
	cnt=0;
 8002418:	2300      	movs	r3, #0
 800241a:	80fb      	strh	r3, [r7, #6]

	do { //Ждем окончания состояния BUSY
		res=SPI_ReceiveByte();
 800241c:	f7ff ffe5 	bl	80023ea <SPI_ReceiveByte>
 8002420:	4603      	mov	r3, r0
 8002422:	717b      	strb	r3, [r7, #5]
		cnt++;
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	3301      	adds	r3, #1
 8002428:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 800242a:	797b      	ldrb	r3, [r7, #5]
 800242c:	2bff      	cmp	r3, #255	; 0xff
 800242e:	d004      	beq.n	800243a <SPI_wait_ready+0x28>
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002436:	4293      	cmp	r3, r2
 8002438:	d1f0      	bne.n	800241c <SPI_wait_ready+0xa>

  if (cnt>=0xFFFF) return 1;
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002440:	4293      	cmp	r3, r2
 8002442:	d101      	bne.n	8002448 <SPI_wait_ready+0x36>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <SPI_wait_ready+0x38>

  return res;
 8002448:	797b      	ldrb	r3, [r7, #5]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800248c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002458:	480d      	ldr	r0, [pc, #52]	; (8002490 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800245a:	490e      	ldr	r1, [pc, #56]	; (8002494 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800245c:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002460:	e002      	b.n	8002468 <LoopCopyDataInit>

08002462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002466:	3304      	adds	r3, #4

08002468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800246c:	d3f9      	bcc.n	8002462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246e:	4a0b      	ldr	r2, [pc, #44]	; (800249c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002470:	4c0b      	ldr	r4, [pc, #44]	; (80024a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002474:	e001      	b.n	800247a <LoopFillZerobss>

08002476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002478:	3204      	adds	r2, #4

0800247a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800247c:	d3fb      	bcc.n	8002476 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800247e:	f7ff fb05 	bl	8001a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002482:	f00d f929 	bl	800f6d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002486:	f7fe fa3b 	bl	8000900 <main>
  bx  lr    
 800248a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800248c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002494:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002498:	08010684 	.word	0x08010684
  ldr r2, =_sbss
 800249c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80024a0:	20004234 	.word	0x20004234

080024a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a4:	e7fe      	b.n	80024a4 <ADC_IRQHandler>
	...

080024a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024ac:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <HAL_Init+0x40>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <HAL_Init+0x40>)
 80024b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_Init+0x40>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <HAL_Init+0x40>)
 80024be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_Init+0x40>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <HAL_Init+0x40>)
 80024ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d0:	2003      	movs	r0, #3
 80024d2:	f000 f94f 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f000 f808 	bl	80024ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024dc:	f7fe ff70 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023c00 	.word	0x40023c00

080024ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_InitTick+0x54>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_InitTick+0x58>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002502:	fbb3 f3f1 	udiv	r3, r3, r1
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f967 	bl	80027de <HAL_SYSTICK_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e00e      	b.n	8002538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b0f      	cmp	r3, #15
 800251e:	d80a      	bhi.n	8002536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002520:	2200      	movs	r2, #0
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002528:	f000 f92f 	bl	800278a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <HAL_InitTick+0x5c>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e000      	b.n	8002538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000000 	.word	0x20000000
 8002544:	20000008 	.word	0x20000008
 8002548:	20000004 	.word	0x20000004

0800254c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_IncTick+0x20>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_IncTick+0x24>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4413      	add	r3, r2
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_IncTick+0x24>)
 800255e:	6013      	str	r3, [r2, #0]
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000008 	.word	0x20000008
 8002570:	20003904 	.word	0x20003904

08002574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return uwTick;
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <HAL_GetTick+0x14>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20003904 	.word	0x20003904

0800258c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff ffee 	bl	8002574 <HAL_GetTick>
 8002598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a4:	d005      	beq.n	80025b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_Delay+0x44>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025b2:	bf00      	nop
 80025b4:	f7ff ffde 	bl	8002574 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d8f7      	bhi.n	80025b4 <HAL_Delay+0x28>
  {
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000008 	.word	0x20000008

080025d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f0:	4013      	ands	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002606:	4a04      	ldr	r2, [pc, #16]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	60d3      	str	r3, [r2, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <__NVIC_GetPriorityGrouping+0x18>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 0307 	and.w	r3, r3, #7
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	db0b      	blt.n	8002662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	4907      	ldr	r1, [pc, #28]	; (8002670 <__NVIC_EnableIRQ+0x38>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2001      	movs	r0, #1
 800265a:	fa00 f202 	lsl.w	r2, r0, r2
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000e100 	.word	0xe000e100

08002674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	6039      	str	r1, [r7, #0]
 800267e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	2b00      	cmp	r3, #0
 8002686:	db0a      	blt.n	800269e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	490c      	ldr	r1, [pc, #48]	; (80026c0 <__NVIC_SetPriority+0x4c>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	0112      	lsls	r2, r2, #4
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	440b      	add	r3, r1
 8002698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800269c:	e00a      	b.n	80026b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4908      	ldr	r1, [pc, #32]	; (80026c4 <__NVIC_SetPriority+0x50>)
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	3b04      	subs	r3, #4
 80026ac:	0112      	lsls	r2, r2, #4
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	440b      	add	r3, r1
 80026b2:	761a      	strb	r2, [r3, #24]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000e100 	.word	0xe000e100
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f1c3 0307 	rsb	r3, r3, #7
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	bf28      	it	cs
 80026e6:	2304      	movcs	r3, #4
 80026e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3304      	adds	r3, #4
 80026ee:	2b06      	cmp	r3, #6
 80026f0:	d902      	bls.n	80026f8 <NVIC_EncodePriority+0x30>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3b03      	subs	r3, #3
 80026f6:	e000      	b.n	80026fa <NVIC_EncodePriority+0x32>
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	401a      	ands	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	43d9      	mvns	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	4313      	orrs	r3, r2
         );
}
 8002722:	4618      	mov	r0, r3
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002740:	d301      	bcc.n	8002746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002742:	2301      	movs	r3, #1
 8002744:	e00f      	b.n	8002766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <SysTick_Config+0x40>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274e:	210f      	movs	r1, #15
 8002750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002754:	f7ff ff8e 	bl	8002674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <SysTick_Config+0x40>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275e:	4b04      	ldr	r3, [pc, #16]	; (8002770 <SysTick_Config+0x40>)
 8002760:	2207      	movs	r2, #7
 8002762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e000e010 	.word	0xe000e010

08002774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff29 	bl	80025d4 <__NVIC_SetPriorityGrouping>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279c:	f7ff ff3e 	bl	800261c <__NVIC_GetPriorityGrouping>
 80027a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ff8e 	bl	80026c8 <NVIC_EncodePriority>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff5d 	bl	8002674 <__NVIC_SetPriority>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff31 	bl	8002638 <__NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffa2 	bl	8002730 <SysTick_Config>
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff feb6 	bl	8002574 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e099      	b.n	8002948 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002834:	e00f      	b.n	8002856 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002836:	f7ff fe9d 	bl	8002574 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b05      	cmp	r3, #5
 8002842:	d908      	bls.n	8002856 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2203      	movs	r2, #3
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e078      	b.n	8002948 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e8      	bne.n	8002836 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	4b38      	ldr	r3, [pc, #224]	; (8002950 <HAL_DMA_Init+0x158>)
 8002870:	4013      	ands	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d107      	bne.n	80028c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	4313      	orrs	r3, r2
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 0307 	bic.w	r3, r3, #7
 80028d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d117      	bne.n	800291a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00e      	beq.n	800291a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 fb01 	bl	8002f04 <DMA_CheckFifoParam>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2240      	movs	r2, #64	; 0x40
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002916:	2301      	movs	r3, #1
 8002918:	e016      	b.n	8002948 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fab8 	bl	8002e98 <DMA_CalcBaseAndBitshift>
 8002928:	4603      	mov	r3, r0
 800292a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	223f      	movs	r2, #63	; 0x3f
 8002932:	409a      	lsls	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	f010803f 	.word	0xf010803f

08002954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_DMA_Start_IT+0x26>
 8002976:	2302      	movs	r3, #2
 8002978:	e040      	b.n	80029fc <HAL_DMA_Start_IT+0xa8>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d12f      	bne.n	80029ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2202      	movs	r2, #2
 8002992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fa4a 	bl	8002e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	223f      	movs	r2, #63	; 0x3f
 80029ae:	409a      	lsls	r2, r3
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0216 	orr.w	r2, r2, #22
 80029c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0208 	orr.w	r2, r2, #8
 80029da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e005      	b.n	80029fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029f6:	2302      	movs	r3, #2
 80029f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a12:	f7ff fdaf 	bl	8002574 <HAL_GetTick>
 8002a16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d008      	beq.n	8002a36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e052      	b.n	8002adc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0216 	bic.w	r2, r2, #22
 8002a44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d103      	bne.n	8002a66 <HAL_DMA_Abort+0x62>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d007      	beq.n	8002a76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0208 	bic.w	r2, r2, #8
 8002a74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a86:	e013      	b.n	8002ab0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a88:	f7ff fd74 	bl	8002574 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d90c      	bls.n	8002ab0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e015      	b.n	8002adc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e4      	bne.n	8002a88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	223f      	movs	r2, #63	; 0x3f
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d004      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2280      	movs	r2, #128	; 0x80
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e00c      	b.n	8002b1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2205      	movs	r2, #5
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0201 	bic.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b34:	4b8e      	ldr	r3, [pc, #568]	; (8002d70 <HAL_DMA_IRQHandler+0x248>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a8e      	ldr	r2, [pc, #568]	; (8002d74 <HAL_DMA_IRQHandler+0x24c>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0a9b      	lsrs	r3, r3, #10
 8002b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	2208      	movs	r2, #8
 8002b54:	409a      	lsls	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01a      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d013      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	2208      	movs	r2, #8
 8002b82:	409a      	lsls	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b98:	2201      	movs	r2, #1
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	f043 0202 	orr.w	r2, r3, #2
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	2204      	movs	r2, #4
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d012      	beq.n	8002c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00b      	beq.n	8002c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	2204      	movs	r2, #4
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f043 0204 	orr.w	r2, r3, #4
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	2210      	movs	r2, #16
 8002c06:	409a      	lsls	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d043      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d03c      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	2210      	movs	r2, #16
 8002c24:	409a      	lsls	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d018      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d108      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d024      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
 8002c56:	e01f      	b.n	8002c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
 8002c68:	e016      	b.n	8002c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d107      	bne.n	8002c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0208 	bic.w	r2, r2, #8
 8002c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 808f 	beq.w	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8087 	beq.w	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d136      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0216 	bic.w	r2, r2, #22
 8002ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d103      	bne.n	8002d02 <HAL_DMA_IRQHandler+0x1da>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0208 	bic.w	r2, r2, #8
 8002d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	223f      	movs	r2, #63	; 0x3f
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d07e      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
        }
        return;
 8002d3e:	e079      	b.n	8002e34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01d      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10d      	bne.n	8002d78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d031      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
 8002d6c:	e02c      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
 8002d6e:	bf00      	nop
 8002d70:	20000000 	.word	0x20000000
 8002d74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d023      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
 8002d88:	e01e      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10f      	bne.n	8002db8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0210 	bic.w	r2, r2, #16
 8002da6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d032      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d022      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2205      	movs	r2, #5
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	3301      	adds	r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d307      	bcc.n	8002e10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f2      	bne.n	8002df4 <HAL_DMA_IRQHandler+0x2cc>
 8002e0e:	e000      	b.n	8002e12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4798      	blx	r3
 8002e32:	e000      	b.n	8002e36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e34:	bf00      	nop
    }
  }
}
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b40      	cmp	r3, #64	; 0x40
 8002e68:	d108      	bne.n	8002e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e7a:	e007      	b.n	8002e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	60da      	str	r2, [r3, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3b10      	subs	r3, #16
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <DMA_CalcBaseAndBitshift+0x64>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <DMA_CalcBaseAndBitshift+0x68>)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d909      	bls.n	8002eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ece:	f023 0303 	bic.w	r3, r3, #3
 8002ed2:	1d1a      	adds	r2, r3, #4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ed8:	e007      	b.n	8002eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ee2:	f023 0303 	bic.w	r3, r3, #3
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	aaaaaaab 	.word	0xaaaaaaab
 8002f00:	080101f8 	.word	0x080101f8

08002f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d11f      	bne.n	8002f5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d856      	bhi.n	8002fd2 <DMA_CheckFifoParam+0xce>
 8002f24:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <DMA_CheckFifoParam+0x28>)
 8002f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2a:	bf00      	nop
 8002f2c:	08002f3d 	.word	0x08002f3d
 8002f30:	08002f4f 	.word	0x08002f4f
 8002f34:	08002f3d 	.word	0x08002f3d
 8002f38:	08002fd3 	.word	0x08002fd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d046      	beq.n	8002fd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f4c:	e043      	b.n	8002fd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f56:	d140      	bne.n	8002fda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f5c:	e03d      	b.n	8002fda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f66:	d121      	bne.n	8002fac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d837      	bhi.n	8002fde <DMA_CheckFifoParam+0xda>
 8002f6e:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <DMA_CheckFifoParam+0x70>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002f85 	.word	0x08002f85
 8002f78:	08002f8b 	.word	0x08002f8b
 8002f7c:	08002f85 	.word	0x08002f85
 8002f80:	08002f9d 	.word	0x08002f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      break;
 8002f88:	e030      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d025      	beq.n	8002fe2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f9a:	e022      	b.n	8002fe2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fa4:	d11f      	bne.n	8002fe6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002faa:	e01c      	b.n	8002fe6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d903      	bls.n	8002fba <DMA_CheckFifoParam+0xb6>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d003      	beq.n	8002fc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fb8:	e018      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8002fbe:	e015      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00e      	beq.n	8002fea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd0:	e00b      	b.n	8002fea <DMA_CheckFifoParam+0xe6>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e00a      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e008      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e006      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e004      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e002      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;   
 8002fe6:	bf00      	nop
 8002fe8:	e000      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fea:	bf00      	nop
    }
  } 
  
  return status; 
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop

08002ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	e16b      	b.n	80032f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003018:	2201      	movs	r2, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	429a      	cmp	r2, r3
 8003032:	f040 815a 	bne.w	80032ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d005      	beq.n	800304e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304a:	2b02      	cmp	r3, #2
 800304c:	d130      	bne.n	80030b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003084:	2201      	movs	r2, #1
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 0201 	and.w	r2, r3, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d017      	beq.n	80030ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d123      	bne.n	8003140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	08da      	lsrs	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3208      	adds	r2, #8
 8003100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	220f      	movs	r2, #15
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	08da      	lsrs	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3208      	adds	r2, #8
 800313a:	69b9      	ldr	r1, [r7, #24]
 800313c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	2203      	movs	r2, #3
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0203 	and.w	r2, r3, #3
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80b4 	beq.w	80032ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	4b60      	ldr	r3, [pc, #384]	; (8003308 <HAL_GPIO_Init+0x30c>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	4a5f      	ldr	r2, [pc, #380]	; (8003308 <HAL_GPIO_Init+0x30c>)
 800318c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003190:	6453      	str	r3, [r2, #68]	; 0x44
 8003192:	4b5d      	ldr	r3, [pc, #372]	; (8003308 <HAL_GPIO_Init+0x30c>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800319e:	4a5b      	ldr	r2, [pc, #364]	; (800330c <HAL_GPIO_Init+0x310>)
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3302      	adds	r3, #2
 80031a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	220f      	movs	r2, #15
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a52      	ldr	r2, [pc, #328]	; (8003310 <HAL_GPIO_Init+0x314>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02b      	beq.n	8003222 <HAL_GPIO_Init+0x226>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a51      	ldr	r2, [pc, #324]	; (8003314 <HAL_GPIO_Init+0x318>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d025      	beq.n	800321e <HAL_GPIO_Init+0x222>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a50      	ldr	r2, [pc, #320]	; (8003318 <HAL_GPIO_Init+0x31c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01f      	beq.n	800321a <HAL_GPIO_Init+0x21e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4f      	ldr	r2, [pc, #316]	; (800331c <HAL_GPIO_Init+0x320>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d019      	beq.n	8003216 <HAL_GPIO_Init+0x21a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4e      	ldr	r2, [pc, #312]	; (8003320 <HAL_GPIO_Init+0x324>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_GPIO_Init+0x216>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4d      	ldr	r2, [pc, #308]	; (8003324 <HAL_GPIO_Init+0x328>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00d      	beq.n	800320e <HAL_GPIO_Init+0x212>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4c      	ldr	r2, [pc, #304]	; (8003328 <HAL_GPIO_Init+0x32c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <HAL_GPIO_Init+0x20e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4b      	ldr	r2, [pc, #300]	; (800332c <HAL_GPIO_Init+0x330>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d101      	bne.n	8003206 <HAL_GPIO_Init+0x20a>
 8003202:	2307      	movs	r3, #7
 8003204:	e00e      	b.n	8003224 <HAL_GPIO_Init+0x228>
 8003206:	2308      	movs	r3, #8
 8003208:	e00c      	b.n	8003224 <HAL_GPIO_Init+0x228>
 800320a:	2306      	movs	r3, #6
 800320c:	e00a      	b.n	8003224 <HAL_GPIO_Init+0x228>
 800320e:	2305      	movs	r3, #5
 8003210:	e008      	b.n	8003224 <HAL_GPIO_Init+0x228>
 8003212:	2304      	movs	r3, #4
 8003214:	e006      	b.n	8003224 <HAL_GPIO_Init+0x228>
 8003216:	2303      	movs	r3, #3
 8003218:	e004      	b.n	8003224 <HAL_GPIO_Init+0x228>
 800321a:	2302      	movs	r3, #2
 800321c:	e002      	b.n	8003224 <HAL_GPIO_Init+0x228>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_GPIO_Init+0x228>
 8003222:	2300      	movs	r3, #0
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	f002 0203 	and.w	r2, r2, #3
 800322a:	0092      	lsls	r2, r2, #2
 800322c:	4093      	lsls	r3, r2
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003234:	4935      	ldr	r1, [pc, #212]	; (800330c <HAL_GPIO_Init+0x310>)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	3302      	adds	r3, #2
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003242:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <HAL_GPIO_Init+0x334>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003266:	4a32      	ldr	r2, [pc, #200]	; (8003330 <HAL_GPIO_Init+0x334>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800326c:	4b30      	ldr	r3, [pc, #192]	; (8003330 <HAL_GPIO_Init+0x334>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003290:	4a27      	ldr	r2, [pc, #156]	; (8003330 <HAL_GPIO_Init+0x334>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003296:	4b26      	ldr	r3, [pc, #152]	; (8003330 <HAL_GPIO_Init+0x334>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ba:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <HAL_GPIO_Init+0x334>)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c0:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_GPIO_Init+0x334>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032e4:	4a12      	ldr	r2, [pc, #72]	; (8003330 <HAL_GPIO_Init+0x334>)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3301      	adds	r3, #1
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	f67f ae90 	bls.w	8003018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	3724      	adds	r7, #36	; 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800
 800330c:	40013800 	.word	0x40013800
 8003310:	40020000 	.word	0x40020000
 8003314:	40020400 	.word	0x40020400
 8003318:	40020800 	.word	0x40020800
 800331c:	40020c00 	.word	0x40020c00
 8003320:	40021000 	.word	0x40021000
 8003324:	40021400 	.word	0x40021400
 8003328:	40021800 	.word	0x40021800
 800332c:	40021c00 	.word	0x40021c00
 8003330:	40013c00 	.word	0x40013c00

08003334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	807b      	strh	r3, [r7, #2]
 8003340:	4613      	mov	r3, r2
 8003342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003344:	787b      	ldrb	r3, [r7, #1]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003350:	e003      	b.n	800335a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003352:	887b      	ldrh	r3, [r7, #2]
 8003354:	041a      	lsls	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	619a      	str	r2, [r3, #24]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003368:	b08f      	sub	sp, #60	; 0x3c
 800336a:	af0a      	add	r7, sp, #40	; 0x28
 800336c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e054      	b.n	8003422 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f00b fef0 	bl	800f178 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2203      	movs	r2, #3
 800339c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f004 ff7c 	bl	80082b4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	603b      	str	r3, [r7, #0]
 80033c2:	687e      	ldr	r6, [r7, #4]
 80033c4:	466d      	mov	r5, sp
 80033c6:	f106 0410 	add.w	r4, r6, #16
 80033ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80033da:	1d33      	adds	r3, r6, #4
 80033dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033de:	6838      	ldr	r0, [r7, #0]
 80033e0:	f004 fef6 	bl	80081d0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	4618      	mov	r0, r3
 80033ec:	f004 ff73 	bl	80082d6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	687e      	ldr	r6, [r7, #4]
 80033f8:	466d      	mov	r5, sp
 80033fa:	f106 0410 	add.w	r4, r6, #16
 80033fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800340a:	e885 0003 	stmia.w	r5, {r0, r1}
 800340e:	1d33      	adds	r3, r6, #4
 8003410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003412:	6838      	ldr	r0, [r7, #0]
 8003414:	f005 f8fc 	bl	8008610 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800342a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800342a:	b590      	push	{r4, r7, lr}
 800342c:	b089      	sub	sp, #36	; 0x24
 800342e:	af04      	add	r7, sp, #16
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	4608      	mov	r0, r1
 8003434:	4611      	mov	r1, r2
 8003436:	461a      	mov	r2, r3
 8003438:	4603      	mov	r3, r0
 800343a:	70fb      	strb	r3, [r7, #3]
 800343c:	460b      	mov	r3, r1
 800343e:	70bb      	strb	r3, [r7, #2]
 8003440:	4613      	mov	r3, r2
 8003442:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_HCD_HC_Init+0x28>
 800344e:	2302      	movs	r3, #2
 8003450:	e076      	b.n	8003540 <HAL_HCD_HC_Init+0x116>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	333d      	adds	r3, #61	; 0x3d
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	3338      	adds	r3, #56	; 0x38
 800347a:	787a      	ldrb	r2, [r7, #1]
 800347c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	3340      	adds	r3, #64	; 0x40
 800348c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800348e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	212c      	movs	r1, #44	; 0x2c
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	4413      	add	r3, r2
 800349c:	3339      	adds	r3, #57	; 0x39
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	212c      	movs	r1, #44	; 0x2c
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	333f      	adds	r3, #63	; 0x3f
 80034b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80034b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	78ba      	ldrb	r2, [r7, #2]
 80034ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034be:	b2d0      	uxtb	r0, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	333a      	adds	r3, #58	; 0x3a
 80034cc:	4602      	mov	r2, r0
 80034ce:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80034d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	da09      	bge.n	80034ec <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	212c      	movs	r1, #44	; 0x2c
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	333b      	adds	r3, #59	; 0x3b
 80034e6:	2201      	movs	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	e008      	b.n	80034fe <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	212c      	movs	r1, #44	; 0x2c
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	333b      	adds	r3, #59	; 0x3b
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	212c      	movs	r1, #44	; 0x2c
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	4413      	add	r3, r2
 800350a:	333c      	adds	r3, #60	; 0x3c
 800350c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003510:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	787c      	ldrb	r4, [r7, #1]
 8003518:	78ba      	ldrb	r2, [r7, #2]
 800351a:	78f9      	ldrb	r1, [r7, #3]
 800351c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800351e:	9302      	str	r3, [sp, #8]
 8003520:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	f897 3020 	ldrb.w	r3, [r7, #32]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	4623      	mov	r3, r4
 800352e:	f005 f9f5 	bl	800891c <USB_HC_Init>
 8003532:	4603      	mov	r3, r0
 8003534:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	bd90      	pop	{r4, r7, pc}

08003548 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_HCD_HC_Halt+0x1e>
 8003562:	2302      	movs	r3, #2
 8003564:	e00f      	b.n	8003586 <HAL_HCD_HC_Halt+0x3e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f005 fc45 	bl	8008e06 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	4608      	mov	r0, r1
 800359a:	4611      	mov	r1, r2
 800359c:	461a      	mov	r2, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	70fb      	strb	r3, [r7, #3]
 80035a2:	460b      	mov	r3, r1
 80035a4:	70bb      	strb	r3, [r7, #2]
 80035a6:	4613      	mov	r3, r2
 80035a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	212c      	movs	r1, #44	; 0x2c
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	333b      	adds	r3, #59	; 0x3b
 80035b8:	78ba      	ldrb	r2, [r7, #2]
 80035ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	212c      	movs	r1, #44	; 0x2c
 80035c2:	fb01 f303 	mul.w	r3, r1, r3
 80035c6:	4413      	add	r3, r2
 80035c8:	333f      	adds	r3, #63	; 0x3f
 80035ca:	787a      	ldrb	r2, [r7, #1]
 80035cc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80035ce:	7c3b      	ldrb	r3, [r7, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d112      	bne.n	80035fa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	3342      	adds	r3, #66	; 0x42
 80035e2:	2203      	movs	r2, #3
 80035e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	212c      	movs	r1, #44	; 0x2c
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	4413      	add	r3, r2
 80035f2:	333d      	adds	r3, #61	; 0x3d
 80035f4:	7f3a      	ldrb	r2, [r7, #28]
 80035f6:	701a      	strb	r2, [r3, #0]
 80035f8:	e008      	b.n	800360c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	212c      	movs	r1, #44	; 0x2c
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	4413      	add	r3, r2
 8003606:	3342      	adds	r3, #66	; 0x42
 8003608:	2202      	movs	r2, #2
 800360a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800360c:	787b      	ldrb	r3, [r7, #1]
 800360e:	2b03      	cmp	r3, #3
 8003610:	f200 80c6 	bhi.w	80037a0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003614:	a201      	add	r2, pc, #4	; (adr r2, 800361c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361a:	bf00      	nop
 800361c:	0800362d 	.word	0x0800362d
 8003620:	0800378d 	.word	0x0800378d
 8003624:	08003691 	.word	0x08003691
 8003628:	0800370f 	.word	0x0800370f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800362c:	7c3b      	ldrb	r3, [r7, #16]
 800362e:	2b01      	cmp	r3, #1
 8003630:	f040 80b8 	bne.w	80037a4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003634:	78bb      	ldrb	r3, [r7, #2]
 8003636:	2b00      	cmp	r3, #0
 8003638:	f040 80b4 	bne.w	80037a4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800363c:	8b3b      	ldrh	r3, [r7, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d108      	bne.n	8003654 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	212c      	movs	r1, #44	; 0x2c
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	4413      	add	r3, r2
 800364e:	3355      	adds	r3, #85	; 0x55
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4413      	add	r3, r2
 8003660:	3355      	adds	r3, #85	; 0x55
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	212c      	movs	r1, #44	; 0x2c
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	3342      	adds	r3, #66	; 0x42
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800367a:	e093      	b.n	80037a4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	3342      	adds	r3, #66	; 0x42
 800368a:	2202      	movs	r2, #2
 800368c:	701a      	strb	r2, [r3, #0]
      break;
 800368e:	e089      	b.n	80037a4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003690:	78bb      	ldrb	r3, [r7, #2]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d11d      	bne.n	80036d2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	212c      	movs	r1, #44	; 0x2c
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	3355      	adds	r3, #85	; 0x55
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	212c      	movs	r1, #44	; 0x2c
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	4413      	add	r3, r2
 80036b6:	3342      	adds	r3, #66	; 0x42
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80036bc:	e073      	b.n	80037a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	3342      	adds	r3, #66	; 0x42
 80036cc:	2202      	movs	r2, #2
 80036ce:	701a      	strb	r2, [r3, #0]
      break;
 80036d0:	e069      	b.n	80037a6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	212c      	movs	r1, #44	; 0x2c
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	4413      	add	r3, r2
 80036de:	3354      	adds	r3, #84	; 0x54
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	3342      	adds	r3, #66	; 0x42
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
      break;
 80036f8:	e055      	b.n	80037a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	3342      	adds	r3, #66	; 0x42
 8003708:	2202      	movs	r2, #2
 800370a:	701a      	strb	r2, [r3, #0]
      break;
 800370c:	e04b      	b.n	80037a6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800370e:	78bb      	ldrb	r3, [r7, #2]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d11d      	bne.n	8003750 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	212c      	movs	r1, #44	; 0x2c
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3355      	adds	r3, #85	; 0x55
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	212c      	movs	r1, #44	; 0x2c
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3342      	adds	r3, #66	; 0x42
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800373a:	e034      	b.n	80037a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	212c      	movs	r1, #44	; 0x2c
 8003742:	fb01 f303 	mul.w	r3, r1, r3
 8003746:	4413      	add	r3, r2
 8003748:	3342      	adds	r3, #66	; 0x42
 800374a:	2202      	movs	r2, #2
 800374c:	701a      	strb	r2, [r3, #0]
      break;
 800374e:	e02a      	b.n	80037a6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	212c      	movs	r1, #44	; 0x2c
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	3354      	adds	r3, #84	; 0x54
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	3342      	adds	r3, #66	; 0x42
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
      break;
 8003776:	e016      	b.n	80037a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	3342      	adds	r3, #66	; 0x42
 8003786:	2202      	movs	r2, #2
 8003788:	701a      	strb	r2, [r3, #0]
      break;
 800378a:	e00c      	b.n	80037a6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	3342      	adds	r3, #66	; 0x42
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
      break;
 800379e:	e002      	b.n	80037a6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80037a0:	bf00      	nop
 80037a2:	e000      	b.n	80037a6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80037a4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	212c      	movs	r1, #44	; 0x2c
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	3344      	adds	r3, #68	; 0x44
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	8b3a      	ldrh	r2, [r7, #24]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	202c      	movs	r0, #44	; 0x2c
 80037c0:	fb00 f303 	mul.w	r3, r0, r3
 80037c4:	440b      	add	r3, r1
 80037c6:	334c      	adds	r3, #76	; 0x4c
 80037c8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	3360      	adds	r3, #96	; 0x60
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3350      	adds	r3, #80	; 0x50
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	212c      	movs	r1, #44	; 0x2c
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	3339      	adds	r3, #57	; 0x39
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	212c      	movs	r1, #44	; 0x2c
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	4413      	add	r3, r2
 800380c:	3361      	adds	r3, #97	; 0x61
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	222c      	movs	r2, #44	; 0x2c
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	3338      	adds	r3, #56	; 0x38
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	18d1      	adds	r1, r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	f005 f998 	bl	8008b60 <USB_HC_StartXfer>
 8003830:	4603      	mov	r3, r0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop

0800383c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f004 fe99 	bl	800858a <USB_GetMode>
 8003858:	4603      	mov	r3, r0
 800385a:	2b01      	cmp	r3, #1
 800385c:	f040 80f6 	bne.w	8003a4c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f004 fe7d 	bl	8008564 <USB_ReadInterrupts>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80ec 	beq.w	8003a4a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f004 fe74 	bl	8008564 <USB_ReadInterrupts>
 800387c:	4603      	mov	r3, r0
 800387e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003882:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003886:	d104      	bne.n	8003892 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003890:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f004 fe64 	bl	8008564 <USB_ReadInterrupts>
 800389c:	4603      	mov	r3, r0
 800389e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a6:	d104      	bne.n	80038b2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f004 fe54 	bl	8008564 <USB_ReadInterrupts>
 80038bc:	4603      	mov	r3, r0
 80038be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c6:	d104      	bne.n	80038d2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80038d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f004 fe44 	bl	8008564 <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d103      	bne.n	80038ee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2202      	movs	r2, #2
 80038ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f004 fe36 	bl	8008564 <USB_ReadInterrupts>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003902:	d11c      	bne.n	800393e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800390c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10f      	bne.n	800393e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800391e:	2110      	movs	r1, #16
 8003920:	6938      	ldr	r0, [r7, #16]
 8003922:	f004 fd25 	bl	8008370 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003926:	6938      	ldr	r0, [r7, #16]
 8003928:	f004 fd56 	bl	80083d8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f004 ff2c 	bl	8008790 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f00b fc9b 	bl	800f274 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f004 fe0e 	bl	8008564 <USB_ReadInterrupts>
 8003948:	4603      	mov	r3, r0
 800394a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800394e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003952:	d102      	bne.n	800395a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f001 f89e 	bl	8004a96 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f004 fe00 	bl	8008564 <USB_ReadInterrupts>
 8003964:	4603      	mov	r3, r0
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b08      	cmp	r3, #8
 800396c:	d106      	bne.n	800397c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f00b fc64 	bl	800f23c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2208      	movs	r2, #8
 800397a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f004 fdef 	bl	8008564 <USB_ReadInterrupts>
 8003986:	4603      	mov	r3, r0
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b10      	cmp	r3, #16
 800398e:	d101      	bne.n	8003994 <HAL_HCD_IRQHandler+0x158>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <HAL_HCD_IRQHandler+0x15a>
 8003994:	2300      	movs	r3, #0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d012      	beq.n	80039c0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0210 	bic.w	r2, r2, #16
 80039a8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 ffa1 	bl	80048f2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0210 	orr.w	r2, r2, #16
 80039be:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f004 fdcd 	bl	8008564 <USB_ReadInterrupts>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d4:	d13a      	bne.n	8003a4c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f005 fa02 	bl	8008de4 <USB_HC_ReadInterrupt>
 80039e0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	e025      	b.n	8003a34 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d018      	beq.n	8003a2e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a12:	d106      	bne.n	8003a22 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	4619      	mov	r1, r3
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f8ab 	bl	8003b76 <HCD_HC_IN_IRQHandler>
 8003a20:	e005      	b.n	8003a2e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	4619      	mov	r1, r3
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fbf9 	bl	8004220 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3301      	adds	r3, #1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d3d4      	bcc.n	80039e8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a46:	615a      	str	r2, [r3, #20]
 8003a48:	e000      	b.n	8003a4c <HAL_HCD_IRQHandler+0x210>
      return;
 8003a4a:	bf00      	nop
    }
  }
}
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_HCD_Start+0x16>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e013      	b.n	8003a90 <HAL_HCD_Start+0x3e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2101      	movs	r1, #1
 8003a76:	4618      	mov	r0, r3
 8003a78:	f004 feee 	bl	8008858 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f004 fc06 	bl	8008292 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_HCD_Stop+0x16>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e00d      	b.n	8003aca <HAL_HCD_Stop+0x32>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f005 fadc 	bl	8009078 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f004 fe90 	bl	8008804 <USB_ResetPort>
 8003ae4:	4603      	mov	r3, r0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	212c      	movs	r1, #44	; 0x2c
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	3360      	adds	r3, #96	; 0x60
 8003b08:	781b      	ldrb	r3, [r3, #0]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3350      	adds	r3, #80	; 0x50
 8003b30:	681b      	ldr	r3, [r3, #0]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f004 fed4 	bl	80088f8 <USB_GetCurrentFrame>
 8003b50:	4603      	mov	r3, r0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 feaf 	bl	80088ca <USB_GetHostSpeed>
 8003b6c:	4603      	mov	r3, r0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b086      	sub	sp, #24
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d11a      	bne.n	8003bdc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	212c      	movs	r1, #44	; 0x2c
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3361      	adds	r3, #97	; 0x61
 8003bc6:	2206      	movs	r2, #6
 8003bc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f005 f916 	bl	8008e06 <USB_HC_Halt>
 8003bda:	e0af      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf2:	d11b      	bne.n	8003c2c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c00:	461a      	mov	r2, r3
 8003c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	212c      	movs	r1, #44	; 0x2c
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	3361      	adds	r3, #97	; 0x61
 8003c16:	2207      	movs	r2, #7
 8003c18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	4611      	mov	r1, r2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f005 f8ee 	bl	8008e06 <USB_HC_Halt>
 8003c2a:	e087      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	d109      	bne.n	8003c56 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2320      	movs	r3, #32
 8003c52:	6093      	str	r3, [r2, #8]
 8003c54:	e072      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d11a      	bne.n	8003ca2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	212c      	movs	r1, #44	; 0x2c
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	3361      	adds	r3, #97	; 0x61
 8003c8c:	2205      	movs	r2, #5
 8003c8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	4611      	mov	r1, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f005 f8b3 	bl	8008e06 <USB_HC_Halt>
 8003ca0:	e04c      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb8:	d11b      	bne.n	8003cf2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ccc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	212c      	movs	r1, #44	; 0x2c
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	3361      	adds	r3, #97	; 0x61
 8003cdc:	2208      	movs	r2, #8
 8003cde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f005 f88b 	bl	8008e06 <USB_HC_Halt>
 8003cf0:	e024      	b.n	8003d3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d04:	2b80      	cmp	r3, #128	; 0x80
 8003d06:	d119      	bne.n	8003d3c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d14:	461a      	mov	r2, r3
 8003d16:	2380      	movs	r3, #128	; 0x80
 8003d18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	212c      	movs	r1, #44	; 0x2c
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	3361      	adds	r3, #97	; 0x61
 8003d28:	2206      	movs	r2, #6
 8003d2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	4611      	mov	r1, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f005 f865 	bl	8008e06 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d52:	d112      	bne.n	8003d7a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f005 f851 	bl	8008e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d70:	461a      	mov	r2, r3
 8003d72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d76:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003d78:	e24e      	b.n	8004218 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	f040 80df 	bne.w	8003f50 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d019      	beq.n	8003dce <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	212c      	movs	r1, #44	; 0x2c
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	4413      	add	r3, r2
 8003da6:	3348      	adds	r3, #72	; 0x48
 8003da8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	0159      	lsls	r1, r3, #5
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	440b      	add	r3, r1
 8003db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003dbc:	1ad2      	subs	r2, r2, r3
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	202c      	movs	r0, #44	; 0x2c
 8003dc4:	fb00 f303 	mul.w	r3, r0, r3
 8003dc8:	440b      	add	r3, r1
 8003dca:	3350      	adds	r3, #80	; 0x50
 8003dcc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	212c      	movs	r1, #44	; 0x2c
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	3361      	adds	r3, #97	; 0x61
 8003ddc:	2201      	movs	r2, #1
 8003dde:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	212c      	movs	r1, #44	; 0x2c
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	335c      	adds	r3, #92	; 0x5c
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2301      	movs	r3, #1
 8003e02:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	333f      	adds	r3, #63	; 0x3f
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	333f      	adds	r3, #63	; 0x3f
 8003e26:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d111      	bne.n	8003e50 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	4611      	mov	r1, r2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f004 ffe5 	bl	8008e06 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2310      	movs	r3, #16
 8003e4c:	6093      	str	r3, [r2, #8]
 8003e4e:	e03a      	b.n	8003ec6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	212c      	movs	r1, #44	; 0x2c
 8003e56:	fb01 f303 	mul.w	r3, r1, r3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	333f      	adds	r3, #63	; 0x3f
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d009      	beq.n	8003e78 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	212c      	movs	r1, #44	; 0x2c
 8003e6a:	fb01 f303 	mul.w	r3, r1, r3
 8003e6e:	4413      	add	r3, r2
 8003e70:	333f      	adds	r3, #63	; 0x3f
 8003e72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d126      	bne.n	8003ec6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	0151      	lsls	r1, r2, #5
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	440a      	add	r2, r1
 8003e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e96:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	212c      	movs	r1, #44	; 0x2c
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3360      	adds	r3, #96	; 0x60
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	b2d9      	uxtb	r1, r3
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	202c      	movs	r0, #44	; 0x2c
 8003eb4:	fb00 f303 	mul.w	r3, r0, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	3360      	adds	r3, #96	; 0x60
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f00b f9e5 	bl	800f290 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d12b      	bne.n	8003f26 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	212c      	movs	r1, #44	; 0x2c
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	4413      	add	r3, r2
 8003eda:	3348      	adds	r3, #72	; 0x48
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	202c      	movs	r0, #44	; 0x2c
 8003ee4:	fb00 f202 	mul.w	r2, r0, r2
 8003ee8:	440a      	add	r2, r1
 8003eea:	3240      	adds	r2, #64	; 0x40
 8003eec:	8812      	ldrh	r2, [r2, #0]
 8003eee:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 818e 	beq.w	8004218 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	212c      	movs	r1, #44	; 0x2c
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	4413      	add	r3, r2
 8003f08:	3354      	adds	r3, #84	; 0x54
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	f083 0301 	eor.w	r3, r3, #1
 8003f10:	b2d8      	uxtb	r0, r3
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	212c      	movs	r1, #44	; 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3354      	adds	r3, #84	; 0x54
 8003f20:	4602      	mov	r2, r0
 8003f22:	701a      	strb	r2, [r3, #0]
}
 8003f24:	e178      	b.n	8004218 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	212c      	movs	r1, #44	; 0x2c
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	4413      	add	r3, r2
 8003f32:	3354      	adds	r3, #84	; 0x54
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	f083 0301 	eor.w	r3, r3, #1
 8003f3a:	b2d8      	uxtb	r0, r3
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3354      	adds	r3, #84	; 0x54
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	701a      	strb	r2, [r3, #0]
}
 8003f4e:	e163      	b.n	8004218 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	f040 80f6 	bne.w	8004154 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	212c      	movs	r1, #44	; 0x2c
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	3361      	adds	r3, #97	; 0x61
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d109      	bne.n	8003f90 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	212c      	movs	r1, #44	; 0x2c
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	4413      	add	r3, r2
 8003f88:	3360      	adds	r3, #96	; 0x60
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	e0c9      	b.n	8004124 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	212c      	movs	r1, #44	; 0x2c
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3361      	adds	r3, #97	; 0x61
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b05      	cmp	r3, #5
 8003fa2:	d109      	bne.n	8003fb8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	212c      	movs	r1, #44	; 0x2c
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	3360      	adds	r3, #96	; 0x60
 8003fb2:	2205      	movs	r2, #5
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	e0b5      	b.n	8004124 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	212c      	movs	r1, #44	; 0x2c
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3361      	adds	r3, #97	; 0x61
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b06      	cmp	r3, #6
 8003fca:	d009      	beq.n	8003fe0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	212c      	movs	r1, #44	; 0x2c
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3361      	adds	r3, #97	; 0x61
 8003fda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d150      	bne.n	8004082 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	212c      	movs	r1, #44	; 0x2c
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	335c      	adds	r3, #92	; 0x5c
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	202c      	movs	r0, #44	; 0x2c
 8003ff8:	fb00 f303 	mul.w	r3, r0, r3
 8003ffc:	440b      	add	r3, r1
 8003ffe:	335c      	adds	r3, #92	; 0x5c
 8004000:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	212c      	movs	r1, #44	; 0x2c
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	4413      	add	r3, r2
 800400e:	335c      	adds	r3, #92	; 0x5c
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d912      	bls.n	800403c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	212c      	movs	r1, #44	; 0x2c
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	4413      	add	r3, r2
 8004022:	335c      	adds	r3, #92	; 0x5c
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	212c      	movs	r1, #44	; 0x2c
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	4413      	add	r3, r2
 8004034:	3360      	adds	r3, #96	; 0x60
 8004036:	2204      	movs	r2, #4
 8004038:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800403a:	e073      	b.n	8004124 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	212c      	movs	r1, #44	; 0x2c
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	4413      	add	r3, r2
 8004048:	3360      	adds	r3, #96	; 0x60
 800404a:	2202      	movs	r2, #2
 800404c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4413      	add	r3, r2
 8004056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004064:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800406c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4413      	add	r3, r2
 8004076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407a:	461a      	mov	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004080:	e050      	b.n	8004124 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	3361      	adds	r3, #97	; 0x61
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b03      	cmp	r3, #3
 8004094:	d122      	bne.n	80040dc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	212c      	movs	r1, #44	; 0x2c
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	3360      	adds	r3, #96	; 0x60
 80040a4:	2202      	movs	r2, #2
 80040a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d4:	461a      	mov	r2, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e023      	b.n	8004124 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	212c      	movs	r1, #44	; 0x2c
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	3361      	adds	r3, #97	; 0x61
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b07      	cmp	r3, #7
 80040ee:	d119      	bne.n	8004124 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	212c      	movs	r1, #44	; 0x2c
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	4413      	add	r3, r2
 80040fc:	335c      	adds	r3, #92	; 0x5c
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	202c      	movs	r0, #44	; 0x2c
 8004108:	fb00 f303 	mul.w	r3, r0, r3
 800410c:	440b      	add	r3, r1
 800410e:	335c      	adds	r3, #92	; 0x5c
 8004110:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	212c      	movs	r1, #44	; 0x2c
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	4413      	add	r3, r2
 800411e:	3360      	adds	r3, #96	; 0x60
 8004120:	2204      	movs	r2, #4
 8004122:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4413      	add	r3, r2
 800412c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004130:	461a      	mov	r2, r3
 8004132:	2302      	movs	r3, #2
 8004134:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	b2d9      	uxtb	r1, r3
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	202c      	movs	r0, #44	; 0x2c
 8004140:	fb00 f303 	mul.w	r3, r0, r3
 8004144:	4413      	add	r3, r2
 8004146:	3360      	adds	r3, #96	; 0x60
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f00b f89f 	bl	800f290 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004152:	e061      	b.n	8004218 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4413      	add	r3, r2
 800415c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b10      	cmp	r3, #16
 8004168:	d156      	bne.n	8004218 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	212c      	movs	r1, #44	; 0x2c
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	4413      	add	r3, r2
 8004176:	333f      	adds	r3, #63	; 0x3f
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b03      	cmp	r3, #3
 800417c:	d111      	bne.n	80041a2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	212c      	movs	r1, #44	; 0x2c
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	335c      	adds	r3, #92	; 0x5c
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f004 fe33 	bl	8008e06 <USB_HC_Halt>
 80041a0:	e031      	b.n	8004206 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	212c      	movs	r1, #44	; 0x2c
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	4413      	add	r3, r2
 80041ae:	333f      	adds	r3, #63	; 0x3f
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	212c      	movs	r1, #44	; 0x2c
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	4413      	add	r3, r2
 80041c2:	333f      	adds	r3, #63	; 0x3f
 80041c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d11d      	bne.n	8004206 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	212c      	movs	r1, #44	; 0x2c
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	4413      	add	r3, r2
 80041d6:	335c      	adds	r3, #92	; 0x5c
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d110      	bne.n	8004206 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	212c      	movs	r1, #44	; 0x2c
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	3361      	adds	r3, #97	; 0x61
 80041f2:	2203      	movs	r2, #3
 80041f4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	4611      	mov	r1, r2
 8004200:	4618      	mov	r0, r3
 8004202:	f004 fe00 	bl	8008e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4413      	add	r3, r2
 800420e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004212:	461a      	mov	r2, r3
 8004214:	2310      	movs	r3, #16
 8004216:	6093      	str	r3, [r2, #8]
}
 8004218:	bf00      	nop
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4413      	add	r3, r2
 8004242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d11a      	bne.n	8004286 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	4413      	add	r3, r2
 8004258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425c:	461a      	mov	r2, r3
 800425e:	2304      	movs	r3, #4
 8004260:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	212c      	movs	r1, #44	; 0x2c
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	4413      	add	r3, r2
 800426e:	3361      	adds	r3, #97	; 0x61
 8004270:	2206      	movs	r2, #6
 8004272:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	4611      	mov	r1, r2
 800427e:	4618      	mov	r0, r3
 8004280:	f004 fdc1 	bl	8008e06 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004284:	e331      	b.n	80048ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	4413      	add	r3, r2
 800428e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b20      	cmp	r3, #32
 800429a:	d12e      	bne.n	80042fa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a8:	461a      	mov	r2, r3
 80042aa:	2320      	movs	r3, #32
 80042ac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	212c      	movs	r1, #44	; 0x2c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	333d      	adds	r3, #61	; 0x3d
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	f040 8313 	bne.w	80048ea <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	212c      	movs	r1, #44	; 0x2c
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	333d      	adds	r3, #61	; 0x3d
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	212c      	movs	r1, #44	; 0x2c
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	3360      	adds	r3, #96	; 0x60
 80042e4:	2202      	movs	r2, #2
 80042e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f004 fd87 	bl	8008e06 <USB_HC_Halt>
}
 80042f8:	e2f7      	b.n	80048ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	4413      	add	r3, r2
 8004302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800430c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004310:	d112      	bne.n	8004338 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4413      	add	r3, r2
 800431a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431e:	461a      	mov	r2, r3
 8004320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004324:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f004 fd68 	bl	8008e06 <USB_HC_Halt>
}
 8004336:	e2d8      	b.n	80048ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	4413      	add	r3, r2
 8004340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d140      	bne.n	80043d0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	212c      	movs	r1, #44	; 0x2c
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	4413      	add	r3, r2
 800435a:	335c      	adds	r3, #92	; 0x5c
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	4413      	add	r3, r2
 8004368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d111      	bne.n	800439a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	212c      	movs	r1, #44	; 0x2c
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	4413      	add	r3, r2
 8004382:	333d      	adds	r3, #61	; 0x3d
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	4413      	add	r3, r2
 8004390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004394:	461a      	mov	r2, r3
 8004396:	2340      	movs	r3, #64	; 0x40
 8004398:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a6:	461a      	mov	r2, r3
 80043a8:	2301      	movs	r3, #1
 80043aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	212c      	movs	r1, #44	; 0x2c
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	3361      	adds	r3, #97	; 0x61
 80043ba:	2201      	movs	r2, #1
 80043bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	4611      	mov	r1, r2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f004 fd1c 	bl	8008e06 <USB_HC_Halt>
}
 80043ce:	e28c      	b.n	80048ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e2:	2b40      	cmp	r3, #64	; 0x40
 80043e4:	d12c      	bne.n	8004440 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	212c      	movs	r1, #44	; 0x2c
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	3361      	adds	r3, #97	; 0x61
 80043f4:	2204      	movs	r2, #4
 80043f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	212c      	movs	r1, #44	; 0x2c
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	4413      	add	r3, r2
 8004404:	333d      	adds	r3, #61	; 0x3d
 8004406:	2201      	movs	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	212c      	movs	r1, #44	; 0x2c
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	4413      	add	r3, r2
 8004416:	335c      	adds	r3, #92	; 0x5c
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f004 fced 	bl	8008e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	4413      	add	r3, r2
 8004434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004438:	461a      	mov	r2, r3
 800443a:	2340      	movs	r3, #64	; 0x40
 800443c:	6093      	str	r3, [r2, #8]
}
 800443e:	e254      	b.n	80048ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	4413      	add	r3, r2
 8004448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b08      	cmp	r3, #8
 8004454:	d11a      	bne.n	800448c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	4413      	add	r3, r2
 800445e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004462:	461a      	mov	r2, r3
 8004464:	2308      	movs	r3, #8
 8004466:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	212c      	movs	r1, #44	; 0x2c
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	4413      	add	r3, r2
 8004474:	3361      	adds	r3, #97	; 0x61
 8004476:	2205      	movs	r2, #5
 8004478:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	4611      	mov	r1, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f004 fcbe 	bl	8008e06 <USB_HC_Halt>
}
 800448a:	e22e      	b.n	80048ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	4413      	add	r3, r2
 8004494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b10      	cmp	r3, #16
 80044a0:	d140      	bne.n	8004524 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	212c      	movs	r1, #44	; 0x2c
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	335c      	adds	r3, #92	; 0x5c
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	212c      	movs	r1, #44	; 0x2c
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	4413      	add	r3, r2
 80044c0:	3361      	adds	r3, #97	; 0x61
 80044c2:	2203      	movs	r2, #3
 80044c4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	212c      	movs	r1, #44	; 0x2c
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	333d      	adds	r3, #61	; 0x3d
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d112      	bne.n	8004500 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	212c      	movs	r1, #44	; 0x2c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	333c      	adds	r3, #60	; 0x3c
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d108      	bne.n	8004500 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	212c      	movs	r1, #44	; 0x2c
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	4413      	add	r3, r2
 80044fa:	333d      	adds	r3, #61	; 0x3d
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f004 fc7b 	bl	8008e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451c:	461a      	mov	r2, r3
 800451e:	2310      	movs	r3, #16
 8004520:	6093      	str	r3, [r2, #8]
}
 8004522:	e1e2      	b.n	80048ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	4413      	add	r3, r2
 800452c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004536:	2b80      	cmp	r3, #128	; 0x80
 8004538:	d164      	bne.n	8004604 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d111      	bne.n	8004566 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	212c      	movs	r1, #44	; 0x2c
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	4413      	add	r3, r2
 800454e:	3361      	adds	r3, #97	; 0x61
 8004550:	2206      	movs	r2, #6
 8004552:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	4611      	mov	r1, r2
 800455e:	4618      	mov	r0, r3
 8004560:	f004 fc51 	bl	8008e06 <USB_HC_Halt>
 8004564:	e044      	b.n	80045f0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	212c      	movs	r1, #44	; 0x2c
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	4413      	add	r3, r2
 8004572:	335c      	adds	r3, #92	; 0x5c
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	202c      	movs	r0, #44	; 0x2c
 800457e:	fb00 f303 	mul.w	r3, r0, r3
 8004582:	440b      	add	r3, r1
 8004584:	335c      	adds	r3, #92	; 0x5c
 8004586:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	212c      	movs	r1, #44	; 0x2c
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	4413      	add	r3, r2
 8004594:	335c      	adds	r3, #92	; 0x5c
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d920      	bls.n	80045de <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	335c      	adds	r3, #92	; 0x5c
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	212c      	movs	r1, #44	; 0x2c
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	4413      	add	r3, r2
 80045ba:	3360      	adds	r3, #96	; 0x60
 80045bc:	2204      	movs	r2, #4
 80045be:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	b2d9      	uxtb	r1, r3
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	202c      	movs	r0, #44	; 0x2c
 80045ca:	fb00 f303 	mul.w	r3, r0, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	3360      	adds	r3, #96	; 0x60
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f00a fe5a 	bl	800f290 <HAL_HCD_HC_NotifyURBChange_Callback>
 80045dc:	e008      	b.n	80045f0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	212c      	movs	r1, #44	; 0x2c
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	4413      	add	r3, r2
 80045ea:	3360      	adds	r3, #96	; 0x60
 80045ec:	2202      	movs	r2, #2
 80045ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045fc:	461a      	mov	r2, r3
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	6093      	str	r3, [r2, #8]
}
 8004602:	e172      	b.n	80048ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	4413      	add	r3, r2
 800460c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461a:	d11b      	bne.n	8004654 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	212c      	movs	r1, #44	; 0x2c
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	3361      	adds	r3, #97	; 0x61
 800462a:	2208      	movs	r2, #8
 800462c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f004 fbe4 	bl	8008e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	4413      	add	r3, r2
 8004646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464a:	461a      	mov	r2, r3
 800464c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004650:	6093      	str	r3, [r2, #8]
}
 8004652:	e14a      	b.n	80048ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	4413      	add	r3, r2
 800465c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	f040 813f 	bne.w	80048ea <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	212c      	movs	r1, #44	; 0x2c
 8004672:	fb01 f303 	mul.w	r3, r1, r3
 8004676:	4413      	add	r3, r2
 8004678:	3361      	adds	r3, #97	; 0x61
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d17d      	bne.n	800477c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	212c      	movs	r1, #44	; 0x2c
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	4413      	add	r3, r2
 800468c:	3360      	adds	r3, #96	; 0x60
 800468e:	2201      	movs	r2, #1
 8004690:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	212c      	movs	r1, #44	; 0x2c
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	4413      	add	r3, r2
 800469e:	333f      	adds	r3, #63	; 0x3f
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d00a      	beq.n	80046bc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	212c      	movs	r1, #44	; 0x2c
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	4413      	add	r3, r2
 80046b2:	333f      	adds	r3, #63	; 0x3f
 80046b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	f040 8100 	bne.w	80048bc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d113      	bne.n	80046ec <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	212c      	movs	r1, #44	; 0x2c
 80046ca:	fb01 f303 	mul.w	r3, r1, r3
 80046ce:	4413      	add	r3, r2
 80046d0:	3355      	adds	r3, #85	; 0x55
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	f083 0301 	eor.w	r3, r3, #1
 80046d8:	b2d8      	uxtb	r0, r3
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	212c      	movs	r1, #44	; 0x2c
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	4413      	add	r3, r2
 80046e6:	3355      	adds	r3, #85	; 0x55
 80046e8:	4602      	mov	r2, r0
 80046ea:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	f040 80e3 	bne.w	80048bc <HCD_HC_OUT_IRQHandler+0x69c>
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	212c      	movs	r1, #44	; 0x2c
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	4413      	add	r3, r2
 8004702:	334c      	adds	r3, #76	; 0x4c
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 80d8 	beq.w	80048bc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	212c      	movs	r1, #44	; 0x2c
 8004712:	fb01 f303 	mul.w	r3, r1, r3
 8004716:	4413      	add	r3, r2
 8004718:	334c      	adds	r3, #76	; 0x4c
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	202c      	movs	r0, #44	; 0x2c
 8004722:	fb00 f202 	mul.w	r2, r0, r2
 8004726:	440a      	add	r2, r1
 8004728:	3240      	adds	r2, #64	; 0x40
 800472a:	8812      	ldrh	r2, [r2, #0]
 800472c:	4413      	add	r3, r2
 800472e:	3b01      	subs	r3, #1
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	202c      	movs	r0, #44	; 0x2c
 8004736:	fb00 f202 	mul.w	r2, r0, r2
 800473a:	440a      	add	r2, r1
 800473c:	3240      	adds	r2, #64	; 0x40
 800473e:	8812      	ldrh	r2, [r2, #0]
 8004740:	fbb3 f3f2 	udiv	r3, r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80b5 	beq.w	80048bc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	212c      	movs	r1, #44	; 0x2c
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	4413      	add	r3, r2
 800475e:	3355      	adds	r3, #85	; 0x55
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	f083 0301 	eor.w	r3, r3, #1
 8004766:	b2d8      	uxtb	r0, r3
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	212c      	movs	r1, #44	; 0x2c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	3355      	adds	r3, #85	; 0x55
 8004776:	4602      	mov	r2, r0
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	e09f      	b.n	80048bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	212c      	movs	r1, #44	; 0x2c
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	4413      	add	r3, r2
 8004788:	3361      	adds	r3, #97	; 0x61
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b03      	cmp	r3, #3
 800478e:	d109      	bne.n	80047a4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	212c      	movs	r1, #44	; 0x2c
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	3360      	adds	r3, #96	; 0x60
 800479e:	2202      	movs	r2, #2
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	e08b      	b.n	80048bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	212c      	movs	r1, #44	; 0x2c
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	4413      	add	r3, r2
 80047b0:	3361      	adds	r3, #97	; 0x61
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d109      	bne.n	80047cc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	212c      	movs	r1, #44	; 0x2c
 80047be:	fb01 f303 	mul.w	r3, r1, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	3360      	adds	r3, #96	; 0x60
 80047c6:	2202      	movs	r2, #2
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	e077      	b.n	80048bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	212c      	movs	r1, #44	; 0x2c
 80047d2:	fb01 f303 	mul.w	r3, r1, r3
 80047d6:	4413      	add	r3, r2
 80047d8:	3361      	adds	r3, #97	; 0x61
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b05      	cmp	r3, #5
 80047de:	d109      	bne.n	80047f4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	212c      	movs	r1, #44	; 0x2c
 80047e6:	fb01 f303 	mul.w	r3, r1, r3
 80047ea:	4413      	add	r3, r2
 80047ec:	3360      	adds	r3, #96	; 0x60
 80047ee:	2205      	movs	r2, #5
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	e063      	b.n	80048bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	212c      	movs	r1, #44	; 0x2c
 80047fa:	fb01 f303 	mul.w	r3, r1, r3
 80047fe:	4413      	add	r3, r2
 8004800:	3361      	adds	r3, #97	; 0x61
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b06      	cmp	r3, #6
 8004806:	d009      	beq.n	800481c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	212c      	movs	r1, #44	; 0x2c
 800480e:	fb01 f303 	mul.w	r3, r1, r3
 8004812:	4413      	add	r3, r2
 8004814:	3361      	adds	r3, #97	; 0x61
 8004816:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004818:	2b08      	cmp	r3, #8
 800481a:	d14f      	bne.n	80048bc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	212c      	movs	r1, #44	; 0x2c
 8004822:	fb01 f303 	mul.w	r3, r1, r3
 8004826:	4413      	add	r3, r2
 8004828:	335c      	adds	r3, #92	; 0x5c
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	202c      	movs	r0, #44	; 0x2c
 8004834:	fb00 f303 	mul.w	r3, r0, r3
 8004838:	440b      	add	r3, r1
 800483a:	335c      	adds	r3, #92	; 0x5c
 800483c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	212c      	movs	r1, #44	; 0x2c
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	4413      	add	r3, r2
 800484a:	335c      	adds	r3, #92	; 0x5c
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d912      	bls.n	8004878 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	212c      	movs	r1, #44	; 0x2c
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	4413      	add	r3, r2
 800485e:	335c      	adds	r3, #92	; 0x5c
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	212c      	movs	r1, #44	; 0x2c
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	4413      	add	r3, r2
 8004870:	3360      	adds	r3, #96	; 0x60
 8004872:	2204      	movs	r2, #4
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	e021      	b.n	80048bc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	212c      	movs	r1, #44	; 0x2c
 800487e:	fb01 f303 	mul.w	r3, r1, r3
 8004882:	4413      	add	r3, r2
 8004884:	3360      	adds	r3, #96	; 0x60
 8004886:	2202      	movs	r2, #2
 8004888:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	4413      	add	r3, r2
 8004892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048a0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048a8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b6:	461a      	mov	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c8:	461a      	mov	r2, r3
 80048ca:	2302      	movs	r3, #2
 80048cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	b2d9      	uxtb	r1, r3
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	202c      	movs	r0, #44	; 0x2c
 80048d8:	fb00 f303 	mul.w	r3, r0, r3
 80048dc:	4413      	add	r3, r2
 80048de:	3360      	adds	r3, #96	; 0x60
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f00a fcd3 	bl	800f290 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80048ea:	bf00      	nop
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b08a      	sub	sp, #40	; 0x28
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	0c5b      	lsrs	r3, r3, #17
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004926:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d004      	beq.n	8004938 <HCD_RXQLVL_IRQHandler+0x46>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b05      	cmp	r3, #5
 8004932:	f000 80a9 	beq.w	8004a88 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004936:	e0aa      	b.n	8004a8e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80a6 	beq.w	8004a8c <HCD_RXQLVL_IRQHandler+0x19a>
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	212c      	movs	r1, #44	; 0x2c
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	4413      	add	r3, r2
 800494c:	3344      	adds	r3, #68	; 0x44
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 809b 	beq.w	8004a8c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	212c      	movs	r1, #44	; 0x2c
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	4413      	add	r3, r2
 8004962:	3350      	adds	r3, #80	; 0x50
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	441a      	add	r2, r3
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	202c      	movs	r0, #44	; 0x2c
 8004970:	fb00 f303 	mul.w	r3, r0, r3
 8004974:	440b      	add	r3, r1
 8004976:	334c      	adds	r3, #76	; 0x4c
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d87a      	bhi.n	8004a74 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	212c      	movs	r1, #44	; 0x2c
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	4413      	add	r3, r2
 800498e:	3344      	adds	r3, #68	; 0x44
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	b292      	uxth	r2, r2
 8004996:	4619      	mov	r1, r3
 8004998:	f003 fd8c 	bl	80084b4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	212c      	movs	r1, #44	; 0x2c
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	3344      	adds	r3, #68	; 0x44
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	441a      	add	r2, r3
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	202c      	movs	r0, #44	; 0x2c
 80049b6:	fb00 f303 	mul.w	r3, r0, r3
 80049ba:	440b      	add	r3, r1
 80049bc:	3344      	adds	r3, #68	; 0x44
 80049be:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	212c      	movs	r1, #44	; 0x2c
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
 80049ca:	4413      	add	r3, r2
 80049cc:	3350      	adds	r3, #80	; 0x50
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	441a      	add	r2, r3
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	202c      	movs	r0, #44	; 0x2c
 80049da:	fb00 f303 	mul.w	r3, r0, r3
 80049de:	440b      	add	r3, r1
 80049e0:	3350      	adds	r3, #80	; 0x50
 80049e2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	0cdb      	lsrs	r3, r3, #19
 80049f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049f8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	212c      	movs	r1, #44	; 0x2c
 8004a00:	fb01 f303 	mul.w	r3, r1, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	3340      	adds	r3, #64	; 0x40
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d13c      	bne.n	8004a8c <HCD_RXQLVL_IRQHandler+0x19a>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d039      	beq.n	8004a8c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a2e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a36:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a44:	461a      	mov	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	212c      	movs	r1, #44	; 0x2c
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	4413      	add	r3, r2
 8004a56:	3354      	adds	r3, #84	; 0x54
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	f083 0301 	eor.w	r3, r3, #1
 8004a5e:	b2d8      	uxtb	r0, r3
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	212c      	movs	r1, #44	; 0x2c
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3354      	adds	r3, #84	; 0x54
 8004a6e:	4602      	mov	r2, r0
 8004a70:	701a      	strb	r2, [r3, #0]
      break;
 8004a72:	e00b      	b.n	8004a8c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	212c      	movs	r1, #44	; 0x2c
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	3360      	adds	r3, #96	; 0x60
 8004a82:	2204      	movs	r2, #4
 8004a84:	701a      	strb	r2, [r3, #0]
      break;
 8004a86:	e001      	b.n	8004a8c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004a88:	bf00      	nop
 8004a8a:	e000      	b.n	8004a8e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004a8c:	bf00      	nop
  }
}
 8004a8e:	bf00      	nop
 8004a90:	3728      	adds	r7, #40	; 0x28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b086      	sub	sp, #24
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ac2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d10b      	bne.n	8004ae6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d102      	bne.n	8004ade <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f00a fbbd 	bl	800f258 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f043 0302 	orr.w	r3, r3, #2
 8004ae4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d132      	bne.n	8004b56 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f043 0308 	orr.w	r3, r3, #8
 8004af6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d126      	bne.n	8004b50 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d113      	bne.n	8004b32 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004b10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b14:	d106      	bne.n	8004b24 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2102      	movs	r1, #2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f003 fe37 	bl	8008790 <USB_InitFSLSPClkSel>
 8004b22:	e011      	b.n	8004b48 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2101      	movs	r1, #1
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f003 fe30 	bl	8008790 <USB_InitFSLSPClkSel>
 8004b30:	e00a      	b.n	8004b48 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d106      	bne.n	8004b48 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b40:	461a      	mov	r2, r3
 8004b42:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b46:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f00a fbaf 	bl	800f2ac <HAL_HCD_PortEnabled_Callback>
 8004b4e:	e002      	b.n	8004b56 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f00a fbb9 	bl	800f2c8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d103      	bne.n	8004b68 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f043 0320 	orr.w	r3, r3, #32
 8004b66:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b6e:	461a      	mov	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	6013      	str	r3, [r2, #0]
}
 8004b74:	bf00      	nop
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e267      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d075      	beq.n	8004c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b9a:	4b88      	ldr	r3, [pc, #544]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d00c      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ba6:	4b85      	ldr	r3, [pc, #532]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d112      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bb2:	4b82      	ldr	r3, [pc, #520]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bbe:	d10b      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc0:	4b7e      	ldr	r3, [pc, #504]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d05b      	beq.n	8004c84 <HAL_RCC_OscConfig+0x108>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d157      	bne.n	8004c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e242      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be0:	d106      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x74>
 8004be2:	4b76      	ldr	r3, [pc, #472]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a75      	ldr	r2, [pc, #468]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	e01d      	b.n	8004c2c <HAL_RCC_OscConfig+0xb0>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bf8:	d10c      	bne.n	8004c14 <HAL_RCC_OscConfig+0x98>
 8004bfa:	4b70      	ldr	r3, [pc, #448]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6f      	ldr	r2, [pc, #444]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	4b6d      	ldr	r3, [pc, #436]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a6c      	ldr	r2, [pc, #432]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e00b      	b.n	8004c2c <HAL_RCC_OscConfig+0xb0>
 8004c14:	4b69      	ldr	r3, [pc, #420]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a68      	ldr	r2, [pc, #416]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	4b66      	ldr	r3, [pc, #408]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a65      	ldr	r2, [pc, #404]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d013      	beq.n	8004c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7fd fc9e 	bl	8002574 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c3c:	f7fd fc9a 	bl	8002574 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	; 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e207      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4e:	4b5b      	ldr	r3, [pc, #364]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCC_OscConfig+0xc0>
 8004c5a:	e014      	b.n	8004c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5c:	f7fd fc8a 	bl	8002574 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c64:	f7fd fc86 	bl	8002574 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b64      	cmp	r3, #100	; 0x64
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e1f3      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c76:	4b51      	ldr	r3, [pc, #324]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <HAL_RCC_OscConfig+0xe8>
 8004c82:	e000      	b.n	8004c86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d063      	beq.n	8004d5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c92:	4b4a      	ldr	r3, [pc, #296]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00b      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c9e:	4b47      	ldr	r3, [pc, #284]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d11c      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004caa:	4b44      	ldr	r3, [pc, #272]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d116      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cb6:	4b41      	ldr	r3, [pc, #260]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d005      	beq.n	8004cce <HAL_RCC_OscConfig+0x152>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d001      	beq.n	8004cce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e1c7      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cce:	4b3b      	ldr	r3, [pc, #236]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	4937      	ldr	r1, [pc, #220]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce2:	e03a      	b.n	8004d5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d020      	beq.n	8004d2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cec:	4b34      	ldr	r3, [pc, #208]	; (8004dc0 <HAL_RCC_OscConfig+0x244>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf2:	f7fd fc3f 	bl	8002574 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cfa:	f7fd fc3b 	bl	8002574 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e1a8      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d0c:	4b2b      	ldr	r3, [pc, #172]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d18:	4b28      	ldr	r3, [pc, #160]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	4925      	ldr	r1, [pc, #148]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	600b      	str	r3, [r1, #0]
 8004d2c:	e015      	b.n	8004d5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d2e:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <HAL_RCC_OscConfig+0x244>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fd fc1e 	bl	8002574 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d3c:	f7fd fc1a 	bl	8002574 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e187      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d4e:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d036      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d016      	beq.n	8004d9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <HAL_RCC_OscConfig+0x248>)
 8004d70:	2201      	movs	r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d74:	f7fd fbfe 	bl	8002574 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d7c:	f7fd fbfa 	bl	8002574 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e167      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d8e:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <HAL_RCC_OscConfig+0x240>)
 8004d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f0      	beq.n	8004d7c <HAL_RCC_OscConfig+0x200>
 8004d9a:	e01b      	b.n	8004dd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_RCC_OscConfig+0x248>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da2:	f7fd fbe7 	bl	8002574 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da8:	e00e      	b.n	8004dc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004daa:	f7fd fbe3 	bl	8002574 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d907      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e150      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	42470000 	.word	0x42470000
 8004dc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc8:	4b88      	ldr	r3, [pc, #544]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1ea      	bne.n	8004daa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8097 	beq.w	8004f10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004de2:	2300      	movs	r3, #0
 8004de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004de6:	4b81      	ldr	r3, [pc, #516]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10f      	bne.n	8004e12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df2:	2300      	movs	r3, #0
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	4b7d      	ldr	r3, [pc, #500]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	4a7c      	ldr	r2, [pc, #496]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e00:	6413      	str	r3, [r2, #64]	; 0x40
 8004e02:	4b7a      	ldr	r3, [pc, #488]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0a:	60bb      	str	r3, [r7, #8]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e12:	4b77      	ldr	r3, [pc, #476]	; (8004ff0 <HAL_RCC_OscConfig+0x474>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d118      	bne.n	8004e50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e1e:	4b74      	ldr	r3, [pc, #464]	; (8004ff0 <HAL_RCC_OscConfig+0x474>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a73      	ldr	r2, [pc, #460]	; (8004ff0 <HAL_RCC_OscConfig+0x474>)
 8004e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e2a:	f7fd fba3 	bl	8002574 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e32:	f7fd fb9f 	bl	8002574 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e10c      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e44:	4b6a      	ldr	r3, [pc, #424]	; (8004ff0 <HAL_RCC_OscConfig+0x474>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d106      	bne.n	8004e66 <HAL_RCC_OscConfig+0x2ea>
 8004e58:	4b64      	ldr	r3, [pc, #400]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5c:	4a63      	ldr	r2, [pc, #396]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	6713      	str	r3, [r2, #112]	; 0x70
 8004e64:	e01c      	b.n	8004ea0 <HAL_RCC_OscConfig+0x324>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	2b05      	cmp	r3, #5
 8004e6c:	d10c      	bne.n	8004e88 <HAL_RCC_OscConfig+0x30c>
 8004e6e:	4b5f      	ldr	r3, [pc, #380]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	4a5e      	ldr	r2, [pc, #376]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004e74:	f043 0304 	orr.w	r3, r3, #4
 8004e78:	6713      	str	r3, [r2, #112]	; 0x70
 8004e7a:	4b5c      	ldr	r3, [pc, #368]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	4a5b      	ldr	r2, [pc, #364]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	6713      	str	r3, [r2, #112]	; 0x70
 8004e86:	e00b      	b.n	8004ea0 <HAL_RCC_OscConfig+0x324>
 8004e88:	4b58      	ldr	r3, [pc, #352]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	4a57      	ldr	r2, [pc, #348]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004e8e:	f023 0301 	bic.w	r3, r3, #1
 8004e92:	6713      	str	r3, [r2, #112]	; 0x70
 8004e94:	4b55      	ldr	r3, [pc, #340]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	4a54      	ldr	r2, [pc, #336]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004e9a:	f023 0304 	bic.w	r3, r3, #4
 8004e9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d015      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea8:	f7fd fb64 	bl	8002574 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eae:	e00a      	b.n	8004ec6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb0:	f7fd fb60 	bl	8002574 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e0cb      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec6:	4b49      	ldr	r3, [pc, #292]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0ee      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x334>
 8004ed2:	e014      	b.n	8004efe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed4:	f7fd fb4e 	bl	8002574 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eda:	e00a      	b.n	8004ef2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004edc:	f7fd fb4a 	bl	8002574 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e0b5      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef2:	4b3e      	ldr	r3, [pc, #248]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1ee      	bne.n	8004edc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d105      	bne.n	8004f10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f04:	4b39      	ldr	r3, [pc, #228]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f08:	4a38      	ldr	r2, [pc, #224]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 80a1 	beq.w	800505c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f1a:	4b34      	ldr	r3, [pc, #208]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 030c 	and.w	r3, r3, #12
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d05c      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d141      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2e:	4b31      	ldr	r3, [pc, #196]	; (8004ff4 <HAL_RCC_OscConfig+0x478>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fd fb1e 	bl	8002574 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f3c:	f7fd fb1a 	bl	8002574 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e087      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4e:	4b27      	ldr	r3, [pc, #156]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69da      	ldr	r2, [r3, #28]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	019b      	lsls	r3, r3, #6
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f70:	085b      	lsrs	r3, r3, #1
 8004f72:	3b01      	subs	r3, #1
 8004f74:	041b      	lsls	r3, r3, #16
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	061b      	lsls	r3, r3, #24
 8004f7e:	491b      	ldr	r1, [pc, #108]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f84:	4b1b      	ldr	r3, [pc, #108]	; (8004ff4 <HAL_RCC_OscConfig+0x478>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8a:	f7fd faf3 	bl	8002574 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f92:	f7fd faef 	bl	8002574 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e05c      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa4:	4b11      	ldr	r3, [pc, #68]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x416>
 8004fb0:	e054      	b.n	800505c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb2:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <HAL_RCC_OscConfig+0x478>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb8:	f7fd fadc 	bl	8002574 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc0:	f7fd fad8 	bl	8002574 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e045      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_RCC_OscConfig+0x470>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x444>
 8004fde:	e03d      	b.n	800505c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d107      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e038      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	40007000 	.word	0x40007000
 8004ff4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ff8:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <HAL_RCC_OscConfig+0x4ec>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d028      	beq.n	8005058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005010:	429a      	cmp	r2, r3
 8005012:	d121      	bne.n	8005058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501e:	429a      	cmp	r2, r3
 8005020:	d11a      	bne.n	8005058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005028:	4013      	ands	r3, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800502e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005030:	4293      	cmp	r3, r2
 8005032:	d111      	bne.n	8005058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	3b01      	subs	r3, #1
 8005042:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005044:	429a      	cmp	r2, r3
 8005046:	d107      	bne.n	8005058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d001      	beq.n	800505c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40023800 	.word	0x40023800

0800506c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0cc      	b.n	800521a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005080:	4b68      	ldr	r3, [pc, #416]	; (8005224 <HAL_RCC_ClockConfig+0x1b8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d90c      	bls.n	80050a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508e:	4b65      	ldr	r3, [pc, #404]	; (8005224 <HAL_RCC_ClockConfig+0x1b8>)
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005096:	4b63      	ldr	r3, [pc, #396]	; (8005224 <HAL_RCC_ClockConfig+0x1b8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d001      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e0b8      	b.n	800521a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d020      	beq.n	80050f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050c0:	4b59      	ldr	r3, [pc, #356]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	4a58      	ldr	r2, [pc, #352]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050d8:	4b53      	ldr	r3, [pc, #332]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	4a52      	ldr	r2, [pc, #328]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e4:	4b50      	ldr	r3, [pc, #320]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	494d      	ldr	r1, [pc, #308]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d044      	beq.n	800518c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d107      	bne.n	800511a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510a:	4b47      	ldr	r3, [pc, #284]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d119      	bne.n	800514a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e07f      	b.n	800521a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d003      	beq.n	800512a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005126:	2b03      	cmp	r3, #3
 8005128:	d107      	bne.n	800513a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800512a:	4b3f      	ldr	r3, [pc, #252]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d109      	bne.n	800514a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e06f      	b.n	800521a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513a:	4b3b      	ldr	r3, [pc, #236]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e067      	b.n	800521a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800514a:	4b37      	ldr	r3, [pc, #220]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f023 0203 	bic.w	r2, r3, #3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	4934      	ldr	r1, [pc, #208]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 8005158:	4313      	orrs	r3, r2
 800515a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800515c:	f7fd fa0a 	bl	8002574 <HAL_GetTick>
 8005160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005162:	e00a      	b.n	800517a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005164:	f7fd fa06 	bl	8002574 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005172:	4293      	cmp	r3, r2
 8005174:	d901      	bls.n	800517a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e04f      	b.n	800521a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517a:	4b2b      	ldr	r3, [pc, #172]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 020c 	and.w	r2, r3, #12
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	429a      	cmp	r2, r3
 800518a:	d1eb      	bne.n	8005164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800518c:	4b25      	ldr	r3, [pc, #148]	; (8005224 <HAL_RCC_ClockConfig+0x1b8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d20c      	bcs.n	80051b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519a:	4b22      	ldr	r3, [pc, #136]	; (8005224 <HAL_RCC_ClockConfig+0x1b8>)
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b20      	ldr	r3, [pc, #128]	; (8005224 <HAL_RCC_ClockConfig+0x1b8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e032      	b.n	800521a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d008      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051c0:	4b19      	ldr	r3, [pc, #100]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4916      	ldr	r1, [pc, #88]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051de:	4b12      	ldr	r3, [pc, #72]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	490e      	ldr	r1, [pc, #56]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051f2:	f000 f821 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 80051f6:	4602      	mov	r2, r0
 80051f8:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <HAL_RCC_ClockConfig+0x1bc>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	091b      	lsrs	r3, r3, #4
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	490a      	ldr	r1, [pc, #40]	; (800522c <HAL_RCC_ClockConfig+0x1c0>)
 8005204:	5ccb      	ldrb	r3, [r1, r3]
 8005206:	fa22 f303 	lsr.w	r3, r2, r3
 800520a:	4a09      	ldr	r2, [pc, #36]	; (8005230 <HAL_RCC_ClockConfig+0x1c4>)
 800520c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800520e:	4b09      	ldr	r3, [pc, #36]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f7fd f96a 	bl	80024ec <HAL_InitTick>

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40023c00 	.word	0x40023c00
 8005228:	40023800 	.word	0x40023800
 800522c:	080101e0 	.word	0x080101e0
 8005230:	20000000 	.word	0x20000000
 8005234:	20000004 	.word	0x20000004

08005238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800523c:	b094      	sub	sp, #80	; 0x50
 800523e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	647b      	str	r3, [r7, #68]	; 0x44
 8005244:	2300      	movs	r3, #0
 8005246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005248:	2300      	movs	r3, #0
 800524a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005250:	4b79      	ldr	r3, [pc, #484]	; (8005438 <HAL_RCC_GetSysClockFreq+0x200>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 030c 	and.w	r3, r3, #12
 8005258:	2b08      	cmp	r3, #8
 800525a:	d00d      	beq.n	8005278 <HAL_RCC_GetSysClockFreq+0x40>
 800525c:	2b08      	cmp	r3, #8
 800525e:	f200 80e1 	bhi.w	8005424 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_RCC_GetSysClockFreq+0x34>
 8005266:	2b04      	cmp	r3, #4
 8005268:	d003      	beq.n	8005272 <HAL_RCC_GetSysClockFreq+0x3a>
 800526a:	e0db      	b.n	8005424 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800526c:	4b73      	ldr	r3, [pc, #460]	; (800543c <HAL_RCC_GetSysClockFreq+0x204>)
 800526e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005270:	e0db      	b.n	800542a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005272:	4b73      	ldr	r3, [pc, #460]	; (8005440 <HAL_RCC_GetSysClockFreq+0x208>)
 8005274:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005276:	e0d8      	b.n	800542a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005278:	4b6f      	ldr	r3, [pc, #444]	; (8005438 <HAL_RCC_GetSysClockFreq+0x200>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005280:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005282:	4b6d      	ldr	r3, [pc, #436]	; (8005438 <HAL_RCC_GetSysClockFreq+0x200>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d063      	beq.n	8005356 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800528e:	4b6a      	ldr	r3, [pc, #424]	; (8005438 <HAL_RCC_GetSysClockFreq+0x200>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	099b      	lsrs	r3, r3, #6
 8005294:	2200      	movs	r2, #0
 8005296:	63bb      	str	r3, [r7, #56]	; 0x38
 8005298:	63fa      	str	r2, [r7, #60]	; 0x3c
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a0:	633b      	str	r3, [r7, #48]	; 0x30
 80052a2:	2300      	movs	r3, #0
 80052a4:	637b      	str	r3, [r7, #52]	; 0x34
 80052a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80052aa:	4622      	mov	r2, r4
 80052ac:	462b      	mov	r3, r5
 80052ae:	f04f 0000 	mov.w	r0, #0
 80052b2:	f04f 0100 	mov.w	r1, #0
 80052b6:	0159      	lsls	r1, r3, #5
 80052b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052bc:	0150      	lsls	r0, r2, #5
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4621      	mov	r1, r4
 80052c4:	1a51      	subs	r1, r2, r1
 80052c6:	6139      	str	r1, [r7, #16]
 80052c8:	4629      	mov	r1, r5
 80052ca:	eb63 0301 	sbc.w	r3, r3, r1
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052dc:	4659      	mov	r1, fp
 80052de:	018b      	lsls	r3, r1, #6
 80052e0:	4651      	mov	r1, sl
 80052e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052e6:	4651      	mov	r1, sl
 80052e8:	018a      	lsls	r2, r1, #6
 80052ea:	4651      	mov	r1, sl
 80052ec:	ebb2 0801 	subs.w	r8, r2, r1
 80052f0:	4659      	mov	r1, fp
 80052f2:	eb63 0901 	sbc.w	r9, r3, r1
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800530a:	4690      	mov	r8, r2
 800530c:	4699      	mov	r9, r3
 800530e:	4623      	mov	r3, r4
 8005310:	eb18 0303 	adds.w	r3, r8, r3
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	462b      	mov	r3, r5
 8005318:	eb49 0303 	adc.w	r3, r9, r3
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800532a:	4629      	mov	r1, r5
 800532c:	024b      	lsls	r3, r1, #9
 800532e:	4621      	mov	r1, r4
 8005330:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005334:	4621      	mov	r1, r4
 8005336:	024a      	lsls	r2, r1, #9
 8005338:	4610      	mov	r0, r2
 800533a:	4619      	mov	r1, r3
 800533c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533e:	2200      	movs	r2, #0
 8005340:	62bb      	str	r3, [r7, #40]	; 0x28
 8005342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005344:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005348:	f7fa ff9a 	bl	8000280 <__aeabi_uldivmod>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4613      	mov	r3, r2
 8005352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005354:	e058      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005356:	4b38      	ldr	r3, [pc, #224]	; (8005438 <HAL_RCC_GetSysClockFreq+0x200>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	099b      	lsrs	r3, r3, #6
 800535c:	2200      	movs	r2, #0
 800535e:	4618      	mov	r0, r3
 8005360:	4611      	mov	r1, r2
 8005362:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005366:	623b      	str	r3, [r7, #32]
 8005368:	2300      	movs	r3, #0
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
 800536c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005370:	4642      	mov	r2, r8
 8005372:	464b      	mov	r3, r9
 8005374:	f04f 0000 	mov.w	r0, #0
 8005378:	f04f 0100 	mov.w	r1, #0
 800537c:	0159      	lsls	r1, r3, #5
 800537e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005382:	0150      	lsls	r0, r2, #5
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4641      	mov	r1, r8
 800538a:	ebb2 0a01 	subs.w	sl, r2, r1
 800538e:	4649      	mov	r1, r9
 8005390:	eb63 0b01 	sbc.w	fp, r3, r1
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053a8:	ebb2 040a 	subs.w	r4, r2, sl
 80053ac:	eb63 050b 	sbc.w	r5, r3, fp
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	00eb      	lsls	r3, r5, #3
 80053ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053be:	00e2      	lsls	r2, r4, #3
 80053c0:	4614      	mov	r4, r2
 80053c2:	461d      	mov	r5, r3
 80053c4:	4643      	mov	r3, r8
 80053c6:	18e3      	adds	r3, r4, r3
 80053c8:	603b      	str	r3, [r7, #0]
 80053ca:	464b      	mov	r3, r9
 80053cc:	eb45 0303 	adc.w	r3, r5, r3
 80053d0:	607b      	str	r3, [r7, #4]
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053de:	4629      	mov	r1, r5
 80053e0:	028b      	lsls	r3, r1, #10
 80053e2:	4621      	mov	r1, r4
 80053e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053e8:	4621      	mov	r1, r4
 80053ea:	028a      	lsls	r2, r1, #10
 80053ec:	4610      	mov	r0, r2
 80053ee:	4619      	mov	r1, r3
 80053f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f2:	2200      	movs	r2, #0
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	61fa      	str	r2, [r7, #28]
 80053f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053fc:	f7fa ff40 	bl	8000280 <__aeabi_uldivmod>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4613      	mov	r3, r2
 8005406:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <HAL_RCC_GetSysClockFreq+0x200>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	0c1b      	lsrs	r3, r3, #16
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	3301      	adds	r3, #1
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005418:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800541a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800541c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005420:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005422:	e002      	b.n	800542a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005424:	4b05      	ldr	r3, [pc, #20]	; (800543c <HAL_RCC_GetSysClockFreq+0x204>)
 8005426:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800542a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800542c:	4618      	mov	r0, r3
 800542e:	3750      	adds	r7, #80	; 0x50
 8005430:	46bd      	mov	sp, r7
 8005432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005436:	bf00      	nop
 8005438:	40023800 	.word	0x40023800
 800543c:	00f42400 	.word	0x00f42400
 8005440:	007a1200 	.word	0x007a1200

08005444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005448:	4b03      	ldr	r3, [pc, #12]	; (8005458 <HAL_RCC_GetHCLKFreq+0x14>)
 800544a:	681b      	ldr	r3, [r3, #0]
}
 800544c:	4618      	mov	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20000000 	.word	0x20000000

0800545c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005460:	f7ff fff0 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 8005464:	4602      	mov	r2, r0
 8005466:	4b05      	ldr	r3, [pc, #20]	; (800547c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	0a9b      	lsrs	r3, r3, #10
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	4903      	ldr	r1, [pc, #12]	; (8005480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005472:	5ccb      	ldrb	r3, [r1, r3]
 8005474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005478:	4618      	mov	r0, r3
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40023800 	.word	0x40023800
 8005480:	080101f0 	.word	0x080101f0

08005484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005488:	f7ff ffdc 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 800548c:	4602      	mov	r2, r0
 800548e:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	0b5b      	lsrs	r3, r3, #13
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	4903      	ldr	r1, [pc, #12]	; (80054a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800549a:	5ccb      	ldrb	r3, [r1, r3]
 800549c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40023800 	.word	0x40023800
 80054a8:	080101f0 	.word	0x080101f0

080054ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e07b      	b.n	80055b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d108      	bne.n	80054d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ce:	d009      	beq.n	80054e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	61da      	str	r2, [r3, #28]
 80054d6:	e005      	b.n	80054e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fb ff86 	bl	8001410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800551a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005568:	ea42 0103 	orr.w	r1, r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	0c1b      	lsrs	r3, r3, #16
 8005582:	f003 0104 	and.w	r1, r3, #4
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	f003 0210 	and.w	r2, r3, #16
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b08c      	sub	sp, #48	; 0x30
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	607a      	str	r2, [r7, #4]
 80055ca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055cc:	2301      	movs	r3, #1
 80055ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_SPI_TransmitReceive+0x26>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e18a      	b.n	80058fa <HAL_SPI_TransmitReceive+0x33c>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055ec:	f7fc ffc2 	bl	8002574 <HAL_GetTick>
 80055f0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005602:	887b      	ldrh	r3, [r7, #2]
 8005604:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800560a:	2b01      	cmp	r3, #1
 800560c:	d00f      	beq.n	800562e <HAL_SPI_TransmitReceive+0x70>
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005614:	d107      	bne.n	8005626 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d103      	bne.n	8005626 <HAL_SPI_TransmitReceive+0x68>
 800561e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005622:	2b04      	cmp	r3, #4
 8005624:	d003      	beq.n	800562e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005626:	2302      	movs	r3, #2
 8005628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800562c:	e15b      	b.n	80058e6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x82>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x82>
 800563a:	887b      	ldrh	r3, [r7, #2]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d103      	bne.n	8005648 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005646:	e14e      	b.n	80058e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b04      	cmp	r3, #4
 8005652:	d003      	beq.n	800565c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2205      	movs	r2, #5
 8005658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	887a      	ldrh	r2, [r7, #2]
 800566c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	887a      	ldrh	r2, [r7, #2]
 8005672:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	887a      	ldrh	r2, [r7, #2]
 800567e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	887a      	ldrh	r2, [r7, #2]
 8005684:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569c:	2b40      	cmp	r3, #64	; 0x40
 800569e:	d007      	beq.n	80056b0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b8:	d178      	bne.n	80057ac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <HAL_SPI_TransmitReceive+0x10a>
 80056c2:	8b7b      	ldrh	r3, [r7, #26]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d166      	bne.n	8005796 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	881a      	ldrh	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	1c9a      	adds	r2, r3, #2
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ec:	e053      	b.n	8005796 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d11b      	bne.n	8005734 <HAL_SPI_TransmitReceive+0x176>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d016      	beq.n	8005734 <HAL_SPI_TransmitReceive+0x176>
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d113      	bne.n	8005734 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	881a      	ldrh	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	1c9a      	adds	r2, r3, #2
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b01      	cmp	r3, #1
 8005740:	d119      	bne.n	8005776 <HAL_SPI_TransmitReceive+0x1b8>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d014      	beq.n	8005776 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	b292      	uxth	r2, r2
 8005758:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	1c9a      	adds	r2, r3, #2
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005772:	2301      	movs	r3, #1
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005776:	f7fc fefd 	bl	8002574 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005782:	429a      	cmp	r2, r3
 8005784:	d807      	bhi.n	8005796 <HAL_SPI_TransmitReceive+0x1d8>
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800578c:	d003      	beq.n	8005796 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005794:	e0a7      	b.n	80058e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1a6      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x130>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1a1      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x130>
 80057aa:	e07c      	b.n	80058a6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_SPI_TransmitReceive+0x1fc>
 80057b4:	8b7b      	ldrh	r3, [r7, #26]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d16b      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	7812      	ldrb	r2, [r2, #0]
 80057c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057e0:	e057      	b.n	8005892 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d11c      	bne.n	800582a <HAL_SPI_TransmitReceive+0x26c>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d017      	beq.n	800582a <HAL_SPI_TransmitReceive+0x26c>
 80057fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d114      	bne.n	800582a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	7812      	ldrb	r2, [r2, #0]
 800580c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b01      	cmp	r3, #1
 8005836:	d119      	bne.n	800586c <HAL_SPI_TransmitReceive+0x2ae>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d014      	beq.n	800586c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005868:	2301      	movs	r3, #1
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800586c:	f7fc fe82 	bl	8002574 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005878:	429a      	cmp	r2, r3
 800587a:	d803      	bhi.n	8005884 <HAL_SPI_TransmitReceive+0x2c6>
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005882:	d102      	bne.n	800588a <HAL_SPI_TransmitReceive+0x2cc>
 8005884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005886:	2b00      	cmp	r3, #0
 8005888:	d103      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005890:	e029      	b.n	80058e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1a2      	bne.n	80057e2 <HAL_SPI_TransmitReceive+0x224>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d19d      	bne.n	80057e2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f8b2 	bl	8005a14 <SPI_EndRxTxTransaction>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d006      	beq.n	80058c4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80058c2:	e010      	b.n	80058e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10b      	bne.n	80058e4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	e000      	b.n	80058e6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80058e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3730      	adds	r7, #48	; 0x30
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005914:	f7fc fe2e 	bl	8002574 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	4413      	add	r3, r2
 8005922:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005924:	f7fc fe26 	bl	8002574 <HAL_GetTick>
 8005928:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800592a:	4b39      	ldr	r3, [pc, #228]	; (8005a10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	015b      	lsls	r3, r3, #5
 8005930:	0d1b      	lsrs	r3, r3, #20
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	fb02 f303 	mul.w	r3, r2, r3
 8005938:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800593a:	e054      	b.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005942:	d050      	beq.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005944:	f7fc fe16 	bl	8002574 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	429a      	cmp	r2, r3
 8005952:	d902      	bls.n	800595a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d13d      	bne.n	80059d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005968:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005972:	d111      	bne.n	8005998 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597c:	d004      	beq.n	8005988 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005986:	d107      	bne.n	8005998 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005996:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a0:	d10f      	bne.n	80059c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e017      	b.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4013      	ands	r3, r2
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	bf0c      	ite	eq
 80059f6:	2301      	moveq	r3, #1
 80059f8:	2300      	movne	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d19b      	bne.n	800593c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000000 	.word	0x20000000

08005a14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a20:	4b1b      	ldr	r3, [pc, #108]	; (8005a90 <SPI_EndRxTxTransaction+0x7c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1b      	ldr	r2, [pc, #108]	; (8005a94 <SPI_EndRxTxTransaction+0x80>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	0d5b      	lsrs	r3, r3, #21
 8005a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a30:	fb02 f303 	mul.w	r3, r2, r3
 8005a34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a3e:	d112      	bne.n	8005a66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2200      	movs	r2, #0
 8005a48:	2180      	movs	r1, #128	; 0x80
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7ff ff5a 	bl	8005904 <SPI_WaitFlagStateUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d016      	beq.n	8005a84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5a:	f043 0220 	orr.w	r2, r3, #32
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e00f      	b.n	8005a86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00a      	beq.n	8005a82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7c:	2b80      	cmp	r3, #128	; 0x80
 8005a7e:	d0f2      	beq.n	8005a66 <SPI_EndRxTxTransaction+0x52>
 8005a80:	e000      	b.n	8005a84 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a82:	bf00      	nop
  }

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000000 	.word	0x20000000
 8005a94:	165e9f81 	.word	0x165e9f81

08005a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e041      	b.n	8005b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fb fcee 	bl	80014a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	f000 ff30 	bl	800693c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d001      	beq.n	8005b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e04e      	b.n	8005bee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a23      	ldr	r2, [pc, #140]	; (8005bfc <HAL_TIM_Base_Start_IT+0xc4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d022      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7a:	d01d      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1f      	ldr	r2, [pc, #124]	; (8005c00 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d018      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1e      	ldr	r2, [pc, #120]	; (8005c04 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00e      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d009      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a19      	ldr	r2, [pc, #100]	; (8005c10 <HAL_TIM_Base_Start_IT+0xd8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a18      	ldr	r2, [pc, #96]	; (8005c14 <HAL_TIM_Base_Start_IT+0xdc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d111      	bne.n	8005bdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b06      	cmp	r3, #6
 8005bc8:	d010      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0201 	orr.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bda:	e007      	b.n	8005bec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40000400 	.word	0x40000400
 8005c04:	40000800 	.word	0x40000800
 8005c08:	40000c00 	.word	0x40000c00
 8005c0c:	40010400 	.word	0x40010400
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40001800 	.word	0x40001800

08005c18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e041      	b.n	8005cae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f839 	bl	8005cb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3304      	adds	r3, #4
 8005c54:	4619      	mov	r1, r3
 8005c56:	4610      	mov	r0, r2
 8005c58:	f000 fe70 	bl	800693c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
	...

08005ccc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d109      	bne.n	8005cf8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	bf0c      	ite	eq
 8005cf0:	2301      	moveq	r3, #1
 8005cf2:	2300      	movne	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	e022      	b.n	8005d3e <HAL_TIM_PWM_Start_DMA+0x72>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d109      	bne.n	8005d12 <HAL_TIM_PWM_Start_DMA+0x46>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	bf0c      	ite	eq
 8005d0a:	2301      	moveq	r3, #1
 8005d0c:	2300      	movne	r3, #0
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	e015      	b.n	8005d3e <HAL_TIM_PWM_Start_DMA+0x72>
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d109      	bne.n	8005d2c <HAL_TIM_PWM_Start_DMA+0x60>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	bf0c      	ite	eq
 8005d24:	2301      	moveq	r3, #1
 8005d26:	2300      	movne	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	e008      	b.n	8005d3e <HAL_TIM_PWM_Start_DMA+0x72>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	bf0c      	ite	eq
 8005d38:	2301      	moveq	r3, #1
 8005d3a:	2300      	movne	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005d42:	2302      	movs	r3, #2
 8005d44:	e171      	b.n	800602a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d109      	bne.n	8005d60 <HAL_TIM_PWM_Start_DMA+0x94>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	bf0c      	ite	eq
 8005d58:	2301      	moveq	r3, #1
 8005d5a:	2300      	movne	r3, #0
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	e022      	b.n	8005da6 <HAL_TIM_PWM_Start_DMA+0xda>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d109      	bne.n	8005d7a <HAL_TIM_PWM_Start_DMA+0xae>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	bf0c      	ite	eq
 8005d72:	2301      	moveq	r3, #1
 8005d74:	2300      	movne	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	e015      	b.n	8005da6 <HAL_TIM_PWM_Start_DMA+0xda>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d109      	bne.n	8005d94 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	bf0c      	ite	eq
 8005d8c:	2301      	moveq	r3, #1
 8005d8e:	2300      	movne	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	e008      	b.n	8005da6 <HAL_TIM_PWM_Start_DMA+0xda>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	bf0c      	ite	eq
 8005da0:	2301      	moveq	r3, #1
 8005da2:	2300      	movne	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d024      	beq.n	8005df4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <HAL_TIM_PWM_Start_DMA+0xee>
 8005db0:	887b      	ldrh	r3, [r7, #2]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e137      	b.n	800602a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d104      	bne.n	8005dca <HAL_TIM_PWM_Start_DMA+0xfe>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dc8:	e016      	b.n	8005df8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d104      	bne.n	8005dda <HAL_TIM_PWM_Start_DMA+0x10e>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dd8:	e00e      	b.n	8005df8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d104      	bne.n	8005dea <HAL_TIM_PWM_Start_DMA+0x11e>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005de8:	e006      	b.n	8005df8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2202      	movs	r2, #2
 8005dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005df2:	e001      	b.n	8005df8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e118      	b.n	800602a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b0c      	cmp	r3, #12
 8005dfc:	f200 80ae 	bhi.w	8005f5c <HAL_TIM_PWM_Start_DMA+0x290>
 8005e00:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e06:	bf00      	nop
 8005e08:	08005e3d 	.word	0x08005e3d
 8005e0c:	08005f5d 	.word	0x08005f5d
 8005e10:	08005f5d 	.word	0x08005f5d
 8005e14:	08005f5d 	.word	0x08005f5d
 8005e18:	08005e85 	.word	0x08005e85
 8005e1c:	08005f5d 	.word	0x08005f5d
 8005e20:	08005f5d 	.word	0x08005f5d
 8005e24:	08005f5d 	.word	0x08005f5d
 8005e28:	08005ecd 	.word	0x08005ecd
 8005e2c:	08005f5d 	.word	0x08005f5d
 8005e30:	08005f5d 	.word	0x08005f5d
 8005e34:	08005f5d 	.word	0x08005f5d
 8005e38:	08005f15 	.word	0x08005f15
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	4a7c      	ldr	r2, [pc, #496]	; (8006034 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005e42:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	4a7b      	ldr	r2, [pc, #492]	; (8006038 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	4a7a      	ldr	r2, [pc, #488]	; (800603c <HAL_TIM_PWM_Start_DMA+0x370>)
 8005e52:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3334      	adds	r3, #52	; 0x34
 8005e60:	461a      	mov	r2, r3
 8005e62:	887b      	ldrh	r3, [r7, #2]
 8005e64:	f7fc fd76 	bl	8002954 <HAL_DMA_Start_IT>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e0db      	b.n	800602a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e80:	60da      	str	r2, [r3, #12]
      break;
 8005e82:	e06e      	b.n	8005f62 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e88:	4a6a      	ldr	r2, [pc, #424]	; (8006034 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005e8a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e90:	4a69      	ldr	r2, [pc, #420]	; (8006038 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005e92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	4a68      	ldr	r2, [pc, #416]	; (800603c <HAL_TIM_PWM_Start_DMA+0x370>)
 8005e9a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3338      	adds	r3, #56	; 0x38
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	887b      	ldrh	r3, [r7, #2]
 8005eac:	f7fc fd52 	bl	8002954 <HAL_DMA_Start_IT>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e0b7      	b.n	800602a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ec8:	60da      	str	r2, [r3, #12]
      break;
 8005eca:	e04a      	b.n	8005f62 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	4a58      	ldr	r2, [pc, #352]	; (8006034 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005ed2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	4a57      	ldr	r2, [pc, #348]	; (8006038 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	4a56      	ldr	r2, [pc, #344]	; (800603c <HAL_TIM_PWM_Start_DMA+0x370>)
 8005ee2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	333c      	adds	r3, #60	; 0x3c
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	887b      	ldrh	r3, [r7, #2]
 8005ef4:	f7fc fd2e 	bl	8002954 <HAL_DMA_Start_IT>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e093      	b.n	800602a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f10:	60da      	str	r2, [r3, #12]
      break;
 8005f12:	e026      	b.n	8005f62 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	4a46      	ldr	r2, [pc, #280]	; (8006034 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005f1a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	4a45      	ldr	r2, [pc, #276]	; (8006038 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005f22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f28:	4a44      	ldr	r2, [pc, #272]	; (800603c <HAL_TIM_PWM_Start_DMA+0x370>)
 8005f2a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f30:	6879      	ldr	r1, [r7, #4]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3340      	adds	r3, #64	; 0x40
 8005f38:	461a      	mov	r2, r3
 8005f3a:	887b      	ldrh	r3, [r7, #2]
 8005f3c:	f7fc fd0a 	bl	8002954 <HAL_DMA_Start_IT>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e06f      	b.n	800602a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f58:	60da      	str	r2, [r3, #12]
      break;
 8005f5a:	e002      	b.n	8005f62 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f60:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d15f      	bne.n	8006028 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	68b9      	ldr	r1, [r7, #8]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 ffcd 	bl	8006f10 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a31      	ldr	r2, [pc, #196]	; (8006040 <HAL_TIM_PWM_Start_DMA+0x374>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d004      	beq.n	8005f8a <HAL_TIM_PWM_Start_DMA+0x2be>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a2f      	ldr	r2, [pc, #188]	; (8006044 <HAL_TIM_PWM_Start_DMA+0x378>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d101      	bne.n	8005f8e <HAL_TIM_PWM_Start_DMA+0x2c2>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fa2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a25      	ldr	r2, [pc, #148]	; (8006040 <HAL_TIM_PWM_Start_DMA+0x374>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d022      	beq.n	8005ff4 <HAL_TIM_PWM_Start_DMA+0x328>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb6:	d01d      	beq.n	8005ff4 <HAL_TIM_PWM_Start_DMA+0x328>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a22      	ldr	r2, [pc, #136]	; (8006048 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d018      	beq.n	8005ff4 <HAL_TIM_PWM_Start_DMA+0x328>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a21      	ldr	r2, [pc, #132]	; (800604c <HAL_TIM_PWM_Start_DMA+0x380>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d013      	beq.n	8005ff4 <HAL_TIM_PWM_Start_DMA+0x328>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1f      	ldr	r2, [pc, #124]	; (8006050 <HAL_TIM_PWM_Start_DMA+0x384>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00e      	beq.n	8005ff4 <HAL_TIM_PWM_Start_DMA+0x328>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1a      	ldr	r2, [pc, #104]	; (8006044 <HAL_TIM_PWM_Start_DMA+0x378>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d009      	beq.n	8005ff4 <HAL_TIM_PWM_Start_DMA+0x328>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1b      	ldr	r2, [pc, #108]	; (8006054 <HAL_TIM_PWM_Start_DMA+0x388>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d004      	beq.n	8005ff4 <HAL_TIM_PWM_Start_DMA+0x328>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1a      	ldr	r2, [pc, #104]	; (8006058 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d111      	bne.n	8006018 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2b06      	cmp	r3, #6
 8006004:	d010      	beq.n	8006028 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0201 	orr.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006016:	e007      	b.n	8006028 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006028:	7dfb      	ldrb	r3, [r7, #23]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	0800682d 	.word	0x0800682d
 8006038:	080068d5 	.word	0x080068d5
 800603c:	0800679b 	.word	0x0800679b
 8006040:	40010000 	.word	0x40010000
 8006044:	40010400 	.word	0x40010400
 8006048:	40000400 	.word	0x40000400
 800604c:	40000800 	.word	0x40000800
 8006050:	40000c00 	.word	0x40000c00
 8006054:	40014000 	.word	0x40014000
 8006058:	40001800 	.word	0x40001800

0800605c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b0c      	cmp	r3, #12
 800606e:	d855      	bhi.n	800611c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	080060ad 	.word	0x080060ad
 800607c:	0800611d 	.word	0x0800611d
 8006080:	0800611d 	.word	0x0800611d
 8006084:	0800611d 	.word	0x0800611d
 8006088:	080060c9 	.word	0x080060c9
 800608c:	0800611d 	.word	0x0800611d
 8006090:	0800611d 	.word	0x0800611d
 8006094:	0800611d 	.word	0x0800611d
 8006098:	080060e5 	.word	0x080060e5
 800609c:	0800611d 	.word	0x0800611d
 80060a0:	0800611d 	.word	0x0800611d
 80060a4:	0800611d 	.word	0x0800611d
 80060a8:	08006101 	.word	0x08006101
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80060ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fc fd0f 	bl	8002ae4 <HAL_DMA_Abort_IT>
      break;
 80060c6:	e02c      	b.n	8006122 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fc fd01 	bl	8002ae4 <HAL_DMA_Abort_IT>
      break;
 80060e2:	e01e      	b.n	8006122 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fc fcf3 	bl	8002ae4 <HAL_DMA_Abort_IT>
      break;
 80060fe:	e010      	b.n	8006122 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800610e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006114:	4618      	mov	r0, r3
 8006116:	f7fc fce5 	bl	8002ae4 <HAL_DMA_Abort_IT>
      break;
 800611a:	e002      	b.n	8006122 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	73fb      	strb	r3, [r7, #15]
      break;
 8006120:	bf00      	nop
  }

  if (status == HAL_OK)
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d161      	bne.n	80061ec <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2200      	movs	r2, #0
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f000 feed 	bl	8006f10 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a2f      	ldr	r2, [pc, #188]	; (80061f8 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d004      	beq.n	800614a <HAL_TIM_PWM_Stop_DMA+0xee>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a2d      	ldr	r2, [pc, #180]	; (80061fc <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d101      	bne.n	800614e <HAL_TIM_PWM_Stop_DMA+0xf2>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800614e:	2300      	movs	r3, #0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d017      	beq.n	8006184 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6a1a      	ldr	r2, [r3, #32]
 800615a:	f241 1311 	movw	r3, #4369	; 0x1111
 800615e:	4013      	ands	r3, r2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10f      	bne.n	8006184 <HAL_TIM_PWM_Stop_DMA+0x128>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6a1a      	ldr	r2, [r3, #32]
 800616a:	f240 4344 	movw	r3, #1092	; 0x444
 800616e:	4013      	ands	r3, r2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d107      	bne.n	8006184 <HAL_TIM_PWM_Stop_DMA+0x128>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006182:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6a1a      	ldr	r2, [r3, #32]
 800618a:	f241 1311 	movw	r3, #4369	; 0x1111
 800618e:	4013      	ands	r3, r2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10f      	bne.n	80061b4 <HAL_TIM_PWM_Stop_DMA+0x158>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6a1a      	ldr	r2, [r3, #32]
 800619a:	f240 4344 	movw	r3, #1092	; 0x444
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d107      	bne.n	80061b4 <HAL_TIM_PWM_Stop_DMA+0x158>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0201 	bic.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <HAL_TIM_PWM_Stop_DMA+0x168>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061c2:	e013      	b.n	80061ec <HAL_TIM_PWM_Stop_DMA+0x190>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d104      	bne.n	80061d4 <HAL_TIM_PWM_Stop_DMA+0x178>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061d2:	e00b      	b.n	80061ec <HAL_TIM_PWM_Stop_DMA+0x190>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d104      	bne.n	80061e4 <HAL_TIM_PWM_Stop_DMA+0x188>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061e2:	e003      	b.n	80061ec <HAL_TIM_PWM_Stop_DMA+0x190>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40010000 	.word	0x40010000
 80061fc:	40010400 	.word	0x40010400

08006200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b02      	cmp	r3, #2
 8006214:	d122      	bne.n	800625c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b02      	cmp	r3, #2
 8006222:	d11b      	bne.n	800625c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0202 	mvn.w	r2, #2
 800622c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fa77 	bl	8006736 <HAL_TIM_IC_CaptureCallback>
 8006248:	e005      	b.n	8006256 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fa69 	bl	8006722 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fa7a 	bl	800674a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b04      	cmp	r3, #4
 8006268:	d122      	bne.n	80062b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b04      	cmp	r3, #4
 8006276:	d11b      	bne.n	80062b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0204 	mvn.w	r2, #4
 8006280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2202      	movs	r2, #2
 8006286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fa4d 	bl	8006736 <HAL_TIM_IC_CaptureCallback>
 800629c:	e005      	b.n	80062aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fa3f 	bl	8006722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fa50 	bl	800674a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d122      	bne.n	8006304 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d11b      	bne.n	8006304 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0208 	mvn.w	r2, #8
 80062d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2204      	movs	r2, #4
 80062da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa23 	bl	8006736 <HAL_TIM_IC_CaptureCallback>
 80062f0:	e005      	b.n	80062fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fa15 	bl	8006722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fa26 	bl	800674a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0310 	and.w	r3, r3, #16
 800630e:	2b10      	cmp	r3, #16
 8006310:	d122      	bne.n	8006358 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	2b10      	cmp	r3, #16
 800631e:	d11b      	bne.n	8006358 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0210 	mvn.w	r2, #16
 8006328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2208      	movs	r2, #8
 800632e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f9f9 	bl	8006736 <HAL_TIM_IC_CaptureCallback>
 8006344:	e005      	b.n	8006352 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f9eb 	bl	8006722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f9fc 	bl	800674a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b01      	cmp	r3, #1
 8006364:	d10e      	bne.n	8006384 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b01      	cmp	r3, #1
 8006372:	d107      	bne.n	8006384 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0201 	mvn.w	r2, #1
 800637c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fa fffe 	bl	8001380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638e:	2b80      	cmp	r3, #128	; 0x80
 8006390:	d10e      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639c:	2b80      	cmp	r3, #128	; 0x80
 800639e:	d107      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 feae 	bl	800710c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d10e      	bne.n	80063dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d107      	bne.n	80063dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f9cb 	bl	8006772 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d10e      	bne.n	8006408 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d107      	bne.n	8006408 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0220 	mvn.w	r2, #32
 8006400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fe78 	bl	80070f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006426:	2b01      	cmp	r3, #1
 8006428:	d101      	bne.n	800642e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800642a:	2302      	movs	r3, #2
 800642c:	e0ae      	b.n	800658c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b0c      	cmp	r3, #12
 800643a:	f200 809f 	bhi.w	800657c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	08006479 	.word	0x08006479
 8006448:	0800657d 	.word	0x0800657d
 800644c:	0800657d 	.word	0x0800657d
 8006450:	0800657d 	.word	0x0800657d
 8006454:	080064b9 	.word	0x080064b9
 8006458:	0800657d 	.word	0x0800657d
 800645c:	0800657d 	.word	0x0800657d
 8006460:	0800657d 	.word	0x0800657d
 8006464:	080064fb 	.word	0x080064fb
 8006468:	0800657d 	.word	0x0800657d
 800646c:	0800657d 	.word	0x0800657d
 8006470:	0800657d 	.word	0x0800657d
 8006474:	0800653b 	.word	0x0800653b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fafc 	bl	8006a7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0208 	orr.w	r2, r2, #8
 8006492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0204 	bic.w	r2, r2, #4
 80064a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6999      	ldr	r1, [r3, #24]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	691a      	ldr	r2, [r3, #16]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	619a      	str	r2, [r3, #24]
      break;
 80064b6:	e064      	b.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fb4c 	bl	8006b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6999      	ldr	r1, [r3, #24]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	021a      	lsls	r2, r3, #8
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	619a      	str	r2, [r3, #24]
      break;
 80064f8:	e043      	b.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fba1 	bl	8006c48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0208 	orr.w	r2, r2, #8
 8006514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0204 	bic.w	r2, r2, #4
 8006524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69d9      	ldr	r1, [r3, #28]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	61da      	str	r2, [r3, #28]
      break;
 8006538:	e023      	b.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fbf5 	bl	8006d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69da      	ldr	r2, [r3, #28]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69d9      	ldr	r1, [r3, #28]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	021a      	lsls	r2, r3, #8
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	61da      	str	r2, [r3, #28]
      break;
 800657a:	e002      	b.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	75fb      	strb	r3, [r7, #23]
      break;
 8006580:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800658a:	7dfb      	ldrb	r3, [r7, #23]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d101      	bne.n	80065b0 <HAL_TIM_ConfigClockSource+0x1c>
 80065ac:	2302      	movs	r3, #2
 80065ae:	e0b4      	b.n	800671a <HAL_TIM_ConfigClockSource+0x186>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065e8:	d03e      	beq.n	8006668 <HAL_TIM_ConfigClockSource+0xd4>
 80065ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ee:	f200 8087 	bhi.w	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 80065f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f6:	f000 8086 	beq.w	8006706 <HAL_TIM_ConfigClockSource+0x172>
 80065fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fe:	d87f      	bhi.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 8006600:	2b70      	cmp	r3, #112	; 0x70
 8006602:	d01a      	beq.n	800663a <HAL_TIM_ConfigClockSource+0xa6>
 8006604:	2b70      	cmp	r3, #112	; 0x70
 8006606:	d87b      	bhi.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 8006608:	2b60      	cmp	r3, #96	; 0x60
 800660a:	d050      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0x11a>
 800660c:	2b60      	cmp	r3, #96	; 0x60
 800660e:	d877      	bhi.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 8006610:	2b50      	cmp	r3, #80	; 0x50
 8006612:	d03c      	beq.n	800668e <HAL_TIM_ConfigClockSource+0xfa>
 8006614:	2b50      	cmp	r3, #80	; 0x50
 8006616:	d873      	bhi.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	d058      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x13a>
 800661c:	2b40      	cmp	r3, #64	; 0x40
 800661e:	d86f      	bhi.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 8006620:	2b30      	cmp	r3, #48	; 0x30
 8006622:	d064      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x15a>
 8006624:	2b30      	cmp	r3, #48	; 0x30
 8006626:	d86b      	bhi.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 8006628:	2b20      	cmp	r3, #32
 800662a:	d060      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x15a>
 800662c:	2b20      	cmp	r3, #32
 800662e:	d867      	bhi.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d05c      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x15a>
 8006634:	2b10      	cmp	r3, #16
 8006636:	d05a      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x15a>
 8006638:	e062      	b.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6899      	ldr	r1, [r3, #8]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f000 fc41 	bl	8006ed0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800665c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	609a      	str	r2, [r3, #8]
      break;
 8006666:	e04f      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6818      	ldr	r0, [r3, #0]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	6899      	ldr	r1, [r3, #8]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f000 fc2a 	bl	8006ed0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800668a:	609a      	str	r2, [r3, #8]
      break;
 800668c:	e03c      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	6859      	ldr	r1, [r3, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	461a      	mov	r2, r3
 800669c:	f000 fb9e 	bl	8006ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2150      	movs	r1, #80	; 0x50
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fbf7 	bl	8006e9a <TIM_ITRx_SetConfig>
      break;
 80066ac:	e02c      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6859      	ldr	r1, [r3, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	461a      	mov	r2, r3
 80066bc:	f000 fbbd 	bl	8006e3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2160      	movs	r1, #96	; 0x60
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fbe7 	bl	8006e9a <TIM_ITRx_SetConfig>
      break;
 80066cc:	e01c      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6859      	ldr	r1, [r3, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	461a      	mov	r2, r3
 80066dc:	f000 fb7e 	bl	8006ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2140      	movs	r1, #64	; 0x40
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fbd7 	bl	8006e9a <TIM_ITRx_SetConfig>
      break;
 80066ec:	e00c      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4619      	mov	r1, r3
 80066f8:	4610      	mov	r0, r2
 80066fa:	f000 fbce 	bl	8006e9a <TIM_ITRx_SetConfig>
      break;
 80066fe:	e003      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
      break;
 8006704:	e000      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006706:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006718:	7bfb      	ldrb	r3, [r7, #15]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d107      	bne.n	80067c2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067c0:	e02a      	b.n	8006818 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d107      	bne.n	80067dc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2202      	movs	r2, #2
 80067d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067da:	e01d      	b.n	8006818 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d107      	bne.n	80067f6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2204      	movs	r2, #4
 80067ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067f4:	e010      	b.n	8006818 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d107      	bne.n	8006810 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2208      	movs	r2, #8
 8006804:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800680e:	e003      	b.n	8006818 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f7ff ffb4 	bl	8006786 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	771a      	strb	r2, [r3, #28]
}
 8006824:	bf00      	nop
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	429a      	cmp	r2, r3
 8006842:	d10b      	bne.n	800685c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2201      	movs	r2, #1
 8006848:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d136      	bne.n	80068c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800685a:	e031      	b.n	80068c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	429a      	cmp	r2, r3
 8006864:	d10b      	bne.n	800687e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2202      	movs	r2, #2
 800686a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d125      	bne.n	80068c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800687c:	e020      	b.n	80068c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	429a      	cmp	r2, r3
 8006886:	d10b      	bne.n	80068a0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2204      	movs	r2, #4
 800688c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d114      	bne.n	80068c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800689e:	e00f      	b.n	80068c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d10a      	bne.n	80068c0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2208      	movs	r2, #8
 80068ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d103      	bne.n	80068c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7ff ff42 	bl	800674a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	771a      	strb	r2, [r3, #28]
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d103      	bne.n	80068f4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2201      	movs	r2, #1
 80068f0:	771a      	strb	r2, [r3, #28]
 80068f2:	e019      	b.n	8006928 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d103      	bne.n	8006906 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2202      	movs	r2, #2
 8006902:	771a      	strb	r2, [r3, #28]
 8006904:	e010      	b.n	8006928 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	429a      	cmp	r2, r3
 800690e:	d103      	bne.n	8006918 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2204      	movs	r2, #4
 8006914:	771a      	strb	r2, [r3, #28]
 8006916:	e007      	b.n	8006928 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	429a      	cmp	r2, r3
 8006920:	d102      	bne.n	8006928 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2208      	movs	r2, #8
 8006926:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f7ff ff18 	bl	800675e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	771a      	strb	r2, [r3, #28]
}
 8006934:	bf00      	nop
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a40      	ldr	r2, [pc, #256]	; (8006a50 <TIM_Base_SetConfig+0x114>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d013      	beq.n	800697c <TIM_Base_SetConfig+0x40>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695a:	d00f      	beq.n	800697c <TIM_Base_SetConfig+0x40>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a3d      	ldr	r2, [pc, #244]	; (8006a54 <TIM_Base_SetConfig+0x118>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00b      	beq.n	800697c <TIM_Base_SetConfig+0x40>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a3c      	ldr	r2, [pc, #240]	; (8006a58 <TIM_Base_SetConfig+0x11c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d007      	beq.n	800697c <TIM_Base_SetConfig+0x40>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a3b      	ldr	r2, [pc, #236]	; (8006a5c <TIM_Base_SetConfig+0x120>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d003      	beq.n	800697c <TIM_Base_SetConfig+0x40>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a3a      	ldr	r2, [pc, #232]	; (8006a60 <TIM_Base_SetConfig+0x124>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d108      	bne.n	800698e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a2f      	ldr	r2, [pc, #188]	; (8006a50 <TIM_Base_SetConfig+0x114>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d02b      	beq.n	80069ee <TIM_Base_SetConfig+0xb2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699c:	d027      	beq.n	80069ee <TIM_Base_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a2c      	ldr	r2, [pc, #176]	; (8006a54 <TIM_Base_SetConfig+0x118>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d023      	beq.n	80069ee <TIM_Base_SetConfig+0xb2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a2b      	ldr	r2, [pc, #172]	; (8006a58 <TIM_Base_SetConfig+0x11c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d01f      	beq.n	80069ee <TIM_Base_SetConfig+0xb2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a2a      	ldr	r2, [pc, #168]	; (8006a5c <TIM_Base_SetConfig+0x120>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d01b      	beq.n	80069ee <TIM_Base_SetConfig+0xb2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a29      	ldr	r2, [pc, #164]	; (8006a60 <TIM_Base_SetConfig+0x124>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d017      	beq.n	80069ee <TIM_Base_SetConfig+0xb2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a28      	ldr	r2, [pc, #160]	; (8006a64 <TIM_Base_SetConfig+0x128>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d013      	beq.n	80069ee <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a27      	ldr	r2, [pc, #156]	; (8006a68 <TIM_Base_SetConfig+0x12c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00f      	beq.n	80069ee <TIM_Base_SetConfig+0xb2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a26      	ldr	r2, [pc, #152]	; (8006a6c <TIM_Base_SetConfig+0x130>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00b      	beq.n	80069ee <TIM_Base_SetConfig+0xb2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a25      	ldr	r2, [pc, #148]	; (8006a70 <TIM_Base_SetConfig+0x134>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d007      	beq.n	80069ee <TIM_Base_SetConfig+0xb2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a24      	ldr	r2, [pc, #144]	; (8006a74 <TIM_Base_SetConfig+0x138>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d003      	beq.n	80069ee <TIM_Base_SetConfig+0xb2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a23      	ldr	r2, [pc, #140]	; (8006a78 <TIM_Base_SetConfig+0x13c>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d108      	bne.n	8006a00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a0a      	ldr	r2, [pc, #40]	; (8006a50 <TIM_Base_SetConfig+0x114>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <TIM_Base_SetConfig+0xf8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a0c      	ldr	r2, [pc, #48]	; (8006a60 <TIM_Base_SetConfig+0x124>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d103      	bne.n	8006a3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	615a      	str	r2, [r3, #20]
}
 8006a42:	bf00      	nop
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40010000 	.word	0x40010000
 8006a54:	40000400 	.word	0x40000400
 8006a58:	40000800 	.word	0x40000800
 8006a5c:	40000c00 	.word	0x40000c00
 8006a60:	40010400 	.word	0x40010400
 8006a64:	40014000 	.word	0x40014000
 8006a68:	40014400 	.word	0x40014400
 8006a6c:	40014800 	.word	0x40014800
 8006a70:	40001800 	.word	0x40001800
 8006a74:	40001c00 	.word	0x40001c00
 8006a78:	40002000 	.word	0x40002000

08006a7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	f023 0201 	bic.w	r2, r3, #1
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f023 0302 	bic.w	r3, r3, #2
 8006ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a20      	ldr	r2, [pc, #128]	; (8006b54 <TIM_OC1_SetConfig+0xd8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d003      	beq.n	8006ae0 <TIM_OC1_SetConfig+0x64>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a1f      	ldr	r2, [pc, #124]	; (8006b58 <TIM_OC1_SetConfig+0xdc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d10c      	bne.n	8006afa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f023 0308 	bic.w	r3, r3, #8
 8006ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f023 0304 	bic.w	r3, r3, #4
 8006af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a15      	ldr	r2, [pc, #84]	; (8006b54 <TIM_OC1_SetConfig+0xd8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d003      	beq.n	8006b0a <TIM_OC1_SetConfig+0x8e>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a14      	ldr	r2, [pc, #80]	; (8006b58 <TIM_OC1_SetConfig+0xdc>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d111      	bne.n	8006b2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	621a      	str	r2, [r3, #32]
}
 8006b48:	bf00      	nop
 8006b4a:	371c      	adds	r7, #28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	40010000 	.word	0x40010000
 8006b58:	40010400 	.word	0x40010400

08006b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f023 0210 	bic.w	r2, r3, #16
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f023 0320 	bic.w	r3, r3, #32
 8006ba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a22      	ldr	r2, [pc, #136]	; (8006c40 <TIM_OC2_SetConfig+0xe4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <TIM_OC2_SetConfig+0x68>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a21      	ldr	r2, [pc, #132]	; (8006c44 <TIM_OC2_SetConfig+0xe8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d10d      	bne.n	8006be0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	011b      	lsls	r3, r3, #4
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a17      	ldr	r2, [pc, #92]	; (8006c40 <TIM_OC2_SetConfig+0xe4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d003      	beq.n	8006bf0 <TIM_OC2_SetConfig+0x94>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a16      	ldr	r2, [pc, #88]	; (8006c44 <TIM_OC2_SetConfig+0xe8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d113      	bne.n	8006c18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	40010000 	.word	0x40010000
 8006c44:	40010400 	.word	0x40010400

08006c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0303 	bic.w	r3, r3, #3
 8006c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	021b      	lsls	r3, r3, #8
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a21      	ldr	r2, [pc, #132]	; (8006d28 <TIM_OC3_SetConfig+0xe0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d003      	beq.n	8006cae <TIM_OC3_SetConfig+0x66>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a20      	ldr	r2, [pc, #128]	; (8006d2c <TIM_OC3_SetConfig+0xe4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d10d      	bne.n	8006cca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a16      	ldr	r2, [pc, #88]	; (8006d28 <TIM_OC3_SetConfig+0xe0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d003      	beq.n	8006cda <TIM_OC3_SetConfig+0x92>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a15      	ldr	r2, [pc, #84]	; (8006d2c <TIM_OC3_SetConfig+0xe4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d113      	bne.n	8006d02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	011b      	lsls	r3, r3, #4
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	621a      	str	r2, [r3, #32]
}
 8006d1c:	bf00      	nop
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	40010000 	.word	0x40010000
 8006d2c:	40010400 	.word	0x40010400

08006d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	021b      	lsls	r3, r3, #8
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	031b      	lsls	r3, r3, #12
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a12      	ldr	r2, [pc, #72]	; (8006dd4 <TIM_OC4_SetConfig+0xa4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d003      	beq.n	8006d98 <TIM_OC4_SetConfig+0x68>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a11      	ldr	r2, [pc, #68]	; (8006dd8 <TIM_OC4_SetConfig+0xa8>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d109      	bne.n	8006dac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	019b      	lsls	r3, r3, #6
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	621a      	str	r2, [r3, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	40010000 	.word	0x40010000
 8006dd8:	40010400 	.word	0x40010400

08006ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	f023 0201 	bic.w	r2, r3, #1
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f023 030a 	bic.w	r3, r3, #10
 8006e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	621a      	str	r2, [r3, #32]
}
 8006e2e:	bf00      	nop
 8006e30:	371c      	adds	r7, #28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b087      	sub	sp, #28
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	f023 0210 	bic.w	r2, r3, #16
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	031b      	lsls	r3, r3, #12
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	621a      	str	r2, [r3, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	f043 0307 	orr.w	r3, r3, #7
 8006ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	609a      	str	r2, [r3, #8]
}
 8006ec4:	bf00      	nop
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	021a      	lsls	r2, r3, #8
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	609a      	str	r2, [r3, #8]
}
 8006f04:	bf00      	nop
 8006f06:	371c      	adds	r7, #28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f003 031f 	and.w	r3, r3, #31
 8006f22:	2201      	movs	r2, #1
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a1a      	ldr	r2, [r3, #32]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	43db      	mvns	r3, r3
 8006f32:	401a      	ands	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a1a      	ldr	r2, [r3, #32]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f003 031f 	and.w	r3, r3, #31
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	fa01 f303 	lsl.w	r3, r1, r3
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	621a      	str	r2, [r3, #32]
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e05a      	b.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a21      	ldr	r2, [pc, #132]	; (8007038 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d022      	beq.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc0:	d01d      	beq.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1d      	ldr	r2, [pc, #116]	; (800703c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d018      	beq.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1b      	ldr	r2, [pc, #108]	; (8007040 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d013      	beq.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1a      	ldr	r2, [pc, #104]	; (8007044 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00e      	beq.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a18      	ldr	r2, [pc, #96]	; (8007048 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a17      	ldr	r2, [pc, #92]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d004      	beq.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a15      	ldr	r2, [pc, #84]	; (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d10c      	bne.n	8007018 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	4313      	orrs	r3, r2
 800700e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	40010000 	.word	0x40010000
 800703c:	40000400 	.word	0x40000400
 8007040:	40000800 	.word	0x40000800
 8007044:	40000c00 	.word	0x40000c00
 8007048:	40010400 	.word	0x40010400
 800704c:	40014000 	.word	0x40014000
 8007050:	40001800 	.word	0x40001800

08007054 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007068:	2b01      	cmp	r3, #1
 800706a:	d101      	bne.n	8007070 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800706c:	2302      	movs	r3, #2
 800706e:	e03d      	b.n	80070ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e03f      	b.n	80071b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d106      	bne.n	800714c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fa fbae 	bl	80018a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2224      	movs	r2, #36	; 0x24
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fdbf 	bl	8007ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	695a      	ldr	r2, [r3, #20]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68da      	ldr	r2, [r3, #12]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b08a      	sub	sp, #40	; 0x28
 80071be:	af02      	add	r7, sp, #8
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	603b      	str	r3, [r7, #0]
 80071c6:	4613      	mov	r3, r2
 80071c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d17c      	bne.n	80072d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <HAL_UART_Transmit+0x2c>
 80071e0:	88fb      	ldrh	r3, [r7, #6]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e075      	b.n	80072d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_UART_Transmit+0x3e>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e06e      	b.n	80072d6 <HAL_UART_Transmit+0x11c>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2221      	movs	r2, #33	; 0x21
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800720e:	f7fb f9b1 	bl	8002574 <HAL_GetTick>
 8007212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	88fa      	ldrh	r2, [r7, #6]
 8007218:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	88fa      	ldrh	r2, [r7, #6]
 800721e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007228:	d108      	bne.n	800723c <HAL_UART_Transmit+0x82>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	e003      	b.n	8007244 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007240:	2300      	movs	r3, #0
 8007242:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800724c:	e02a      	b.n	80072a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2200      	movs	r2, #0
 8007256:	2180      	movs	r1, #128	; 0x80
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f000 fb3d 	bl	80078d8 <UART_WaitOnFlagUntilTimeout>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e036      	b.n	80072d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10b      	bne.n	8007286 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800727c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	3302      	adds	r3, #2
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	e007      	b.n	8007296 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	781a      	ldrb	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	3301      	adds	r3, #1
 8007294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800729a:	b29b      	uxth	r3, r3
 800729c:	3b01      	subs	r3, #1
 800729e:	b29a      	uxth	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1cf      	bne.n	800724e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2200      	movs	r2, #0
 80072b6:	2140      	movs	r1, #64	; 0x40
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 fb0d 	bl	80078d8 <UART_WaitOnFlagUntilTimeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e006      	b.n	80072d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	e000      	b.n	80072d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80072d4:	2302      	movs	r3, #2
  }
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3720      	adds	r7, #32
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80072de:	b480      	push	{r7}
 80072e0:	b085      	sub	sp, #20
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	60f8      	str	r0, [r7, #12]
 80072e6:	60b9      	str	r1, [r7, #8]
 80072e8:	4613      	mov	r3, r2
 80072ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b20      	cmp	r3, #32
 80072f6:	d130      	bne.n	800735a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <HAL_UART_Transmit_IT+0x26>
 80072fe:	88fb      	ldrh	r3, [r7, #6]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e029      	b.n	800735c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800730e:	2b01      	cmp	r3, #1
 8007310:	d101      	bne.n	8007316 <HAL_UART_Transmit_IT+0x38>
 8007312:	2302      	movs	r3, #2
 8007314:	e022      	b.n	800735c <HAL_UART_Transmit_IT+0x7e>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	88fa      	ldrh	r2, [r7, #6]
 800732e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2221      	movs	r2, #33	; 0x21
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007354:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	e000      	b.n	800735c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800735a:	2302      	movs	r3, #2
  }
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b0ba      	sub	sp, #232	; 0xe8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800738e:	2300      	movs	r3, #0
 8007390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007394:	2300      	movs	r3, #0
 8007396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800739a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80073a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10f      	bne.n	80073ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <HAL_UART_IRQHandler+0x66>
 80073ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fbd3 	bl	8007b72 <UART_Receive_IT>
      return;
 80073cc:	e256      	b.n	800787c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80073ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 80de 	beq.w	8007594 <HAL_UART_IRQHandler+0x22c>
 80073d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d106      	bne.n	80073f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 80d1 	beq.w	8007594 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <HAL_UART_IRQHandler+0xae>
 80073fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007406:	2b00      	cmp	r3, #0
 8007408:	d005      	beq.n	8007416 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	f043 0201 	orr.w	r2, r3, #1
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00b      	beq.n	800743a <HAL_UART_IRQHandler+0xd2>
 8007422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f043 0202 	orr.w	r2, r3, #2
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800743a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <HAL_UART_IRQHandler+0xf6>
 8007446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	f043 0204 	orr.w	r2, r3, #4
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800745e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d011      	beq.n	800748e <HAL_UART_IRQHandler+0x126>
 800746a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800746e:	f003 0320 	and.w	r3, r3, #32
 8007472:	2b00      	cmp	r3, #0
 8007474:	d105      	bne.n	8007482 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d005      	beq.n	800748e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	f043 0208 	orr.w	r2, r3, #8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 81ed 	beq.w	8007872 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d008      	beq.n	80074b6 <HAL_UART_IRQHandler+0x14e>
 80074a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fb5e 	bl	8007b72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c0:	2b40      	cmp	r3, #64	; 0x40
 80074c2:	bf0c      	ite	eq
 80074c4:	2301      	moveq	r3, #1
 80074c6:	2300      	movne	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	f003 0308 	and.w	r3, r3, #8
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d103      	bne.n	80074e2 <HAL_UART_IRQHandler+0x17a>
 80074da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d04f      	beq.n	8007582 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fa66 	bl	80079b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f2:	2b40      	cmp	r3, #64	; 0x40
 80074f4:	d141      	bne.n	800757a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3314      	adds	r3, #20
 80074fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800750c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3314      	adds	r3, #20
 800751e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007522:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800752e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800753a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1d9      	bne.n	80074f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	2b00      	cmp	r3, #0
 8007548:	d013      	beq.n	8007572 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	4a7d      	ldr	r2, [pc, #500]	; (8007744 <HAL_UART_IRQHandler+0x3dc>)
 8007550:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	4618      	mov	r0, r3
 8007558:	f7fb fac4 	bl	8002ae4 <HAL_DMA_Abort_IT>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d016      	beq.n	8007590 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800756c:	4610      	mov	r0, r2
 800756e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007570:	e00e      	b.n	8007590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f99a 	bl	80078ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007578:	e00a      	b.n	8007590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f996 	bl	80078ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007580:	e006      	b.n	8007590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f992 	bl	80078ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800758e:	e170      	b.n	8007872 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007590:	bf00      	nop
    return;
 8007592:	e16e      	b.n	8007872 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	2b01      	cmp	r3, #1
 800759a:	f040 814a 	bne.w	8007832 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800759e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a2:	f003 0310 	and.w	r3, r3, #16
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 8143 	beq.w	8007832 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b0:	f003 0310 	and.w	r3, r3, #16
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 813c 	beq.w	8007832 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075ba:	2300      	movs	r3, #0
 80075bc:	60bb      	str	r3, [r7, #8]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60bb      	str	r3, [r7, #8]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	60bb      	str	r3, [r7, #8]
 80075ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	f040 80b4 	bne.w	8007748 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 8140 	beq.w	8007876 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075fe:	429a      	cmp	r2, r3
 8007600:	f080 8139 	bcs.w	8007876 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800760a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007616:	f000 8088 	beq.w	800772a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	330c      	adds	r3, #12
 8007620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	330c      	adds	r3, #12
 8007642:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007646:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800764a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007652:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800765e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1d9      	bne.n	800761a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3314      	adds	r3, #20
 800766c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007678:	f023 0301 	bic.w	r3, r3, #1
 800767c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3314      	adds	r3, #20
 8007686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800768a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800768e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007692:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800769c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e1      	bne.n	8007666 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3314      	adds	r3, #20
 80076a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3314      	adds	r3, #20
 80076c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80076c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80076c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e3      	bne.n	80076a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	330c      	adds	r3, #12
 80076ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076fa:	f023 0310 	bic.w	r3, r3, #16
 80076fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	330c      	adds	r3, #12
 8007708:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800770c:	65ba      	str	r2, [r7, #88]	; 0x58
 800770e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007714:	e841 2300 	strex	r3, r2, [r1]
 8007718:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800771a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e3      	bne.n	80076e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	4618      	mov	r0, r3
 8007726:	f7fb f96d 	bl	8002a04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007732:	b29b      	uxth	r3, r3
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	b29b      	uxth	r3, r3
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f8c0 	bl	80078c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007740:	e099      	b.n	8007876 <HAL_UART_IRQHandler+0x50e>
 8007742:	bf00      	nop
 8007744:	08007a7b 	.word	0x08007a7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007750:	b29b      	uxth	r3, r3
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 808b 	beq.w	800787a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 8086 	beq.w	800787a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	330c      	adds	r3, #12
 8007774:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800777e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007784:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	330c      	adds	r3, #12
 800778e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007792:	647a      	str	r2, [r7, #68]	; 0x44
 8007794:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e3      	bne.n	800776e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3314      	adds	r3, #20
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	623b      	str	r3, [r7, #32]
   return(result);
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	f023 0301 	bic.w	r3, r3, #1
 80077bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3314      	adds	r3, #20
 80077c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80077ca:	633a      	str	r2, [r7, #48]	; 0x30
 80077cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e3      	bne.n	80077a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	330c      	adds	r3, #12
 80077f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0310 	bic.w	r3, r3, #16
 8007802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	330c      	adds	r3, #12
 800780c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007810:	61fa      	str	r2, [r7, #28]
 8007812:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	69b9      	ldr	r1, [r7, #24]
 8007816:	69fa      	ldr	r2, [r7, #28]
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	617b      	str	r3, [r7, #20]
   return(result);
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e3      	bne.n	80077ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f848 	bl	80078c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007830:	e023      	b.n	800787a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783a:	2b00      	cmp	r3, #0
 800783c:	d009      	beq.n	8007852 <HAL_UART_IRQHandler+0x4ea>
 800783e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f929 	bl	8007aa2 <UART_Transmit_IT>
    return;
 8007850:	e014      	b.n	800787c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00e      	beq.n	800787c <HAL_UART_IRQHandler+0x514>
 800785e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007866:	2b00      	cmp	r3, #0
 8007868:	d008      	beq.n	800787c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f969 	bl	8007b42 <UART_EndTransmit_IT>
    return;
 8007870:	e004      	b.n	800787c <HAL_UART_IRQHandler+0x514>
    return;
 8007872:	bf00      	nop
 8007874:	e002      	b.n	800787c <HAL_UART_IRQHandler+0x514>
      return;
 8007876:	bf00      	nop
 8007878:	e000      	b.n	800787c <HAL_UART_IRQHandler+0x514>
      return;
 800787a:	bf00      	nop
  }
}
 800787c:	37e8      	adds	r7, #232	; 0xe8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop

08007884 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b090      	sub	sp, #64	; 0x40
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	4613      	mov	r3, r2
 80078e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e8:	e050      	b.n	800798c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078f0:	d04c      	beq.n	800798c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d007      	beq.n	8007908 <UART_WaitOnFlagUntilTimeout+0x30>
 80078f8:	f7fa fe3c 	bl	8002574 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007904:	429a      	cmp	r2, r3
 8007906:	d241      	bcs.n	800798c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	330c      	adds	r3, #12
 800790e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800791e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	330c      	adds	r3, #12
 8007926:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007928:	637a      	str	r2, [r7, #52]	; 0x34
 800792a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800792e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e5      	bne.n	8007908 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3314      	adds	r3, #20
 8007942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	613b      	str	r3, [r7, #16]
   return(result);
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f023 0301 	bic.w	r3, r3, #1
 8007952:	63bb      	str	r3, [r7, #56]	; 0x38
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	3314      	adds	r3, #20
 800795a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800795c:	623a      	str	r2, [r7, #32]
 800795e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	69f9      	ldr	r1, [r7, #28]
 8007962:	6a3a      	ldr	r2, [r7, #32]
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	61bb      	str	r3, [r7, #24]
   return(result);
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e5      	bne.n	800793c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e00f      	b.n	80079ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	4013      	ands	r3, r2
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	429a      	cmp	r2, r3
 800799a:	bf0c      	ite	eq
 800799c:	2301      	moveq	r3, #1
 800799e:	2300      	movne	r3, #0
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	461a      	mov	r2, r3
 80079a4:	79fb      	ldrb	r3, [r7, #7]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d09f      	beq.n	80078ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3740      	adds	r7, #64	; 0x40
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b095      	sub	sp, #84	; 0x54
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	330c      	adds	r3, #12
 80079c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	330c      	adds	r3, #12
 80079da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079dc:	643a      	str	r2, [r7, #64]	; 0x40
 80079de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e5      	bne.n	80079bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3314      	adds	r3, #20
 80079f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f023 0301 	bic.w	r3, r3, #1
 8007a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3314      	adds	r3, #20
 8007a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e5      	bne.n	80079f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d119      	bne.n	8007a60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	330c      	adds	r3, #12
 8007a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f023 0310 	bic.w	r3, r3, #16
 8007a42:	647b      	str	r3, [r7, #68]	; 0x44
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	330c      	adds	r3, #12
 8007a4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a4c:	61ba      	str	r2, [r7, #24]
 8007a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6979      	ldr	r1, [r7, #20]
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e5      	bne.n	8007a2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a6e:	bf00      	nop
 8007a70:	3754      	adds	r7, #84	; 0x54
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f7ff ff09 	bl	80078ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a9a:	bf00      	nop
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b085      	sub	sp, #20
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b21      	cmp	r3, #33	; 0x21
 8007ab4:	d13e      	bne.n	8007b34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007abe:	d114      	bne.n	8007aea <UART_Transmit_IT+0x48>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d110      	bne.n	8007aea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007adc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	1c9a      	adds	r2, r3, #2
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	621a      	str	r2, [r3, #32]
 8007ae8:	e008      	b.n	8007afc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	1c59      	adds	r1, r3, #1
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6211      	str	r1, [r2, #32]
 8007af4:	781a      	ldrb	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	3b01      	subs	r3, #1
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10f      	bne.n	8007b30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	e000      	b.n	8007b36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b34:	2302      	movs	r3, #2
  }
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff fe8e 	bl	8007884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b08c      	sub	sp, #48	; 0x30
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b22      	cmp	r3, #34	; 0x22
 8007b84:	f040 80ab 	bne.w	8007cde <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b90:	d117      	bne.n	8007bc2 <UART_Receive_IT+0x50>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d113      	bne.n	8007bc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bba:	1c9a      	adds	r2, r3, #2
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	629a      	str	r2, [r3, #40]	; 0x28
 8007bc0:	e026      	b.n	8007c10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd4:	d007      	beq.n	8007be6 <UART_Receive_IT+0x74>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10a      	bne.n	8007bf4 <UART_Receive_IT+0x82>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d106      	bne.n	8007bf4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	e008      	b.n	8007c06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	3b01      	subs	r3, #1
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d15a      	bne.n	8007cda <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 0220 	bic.w	r2, r2, #32
 8007c32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695a      	ldr	r2, [r3, #20]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 0201 	bic.w	r2, r2, #1
 8007c52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2220      	movs	r2, #32
 8007c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d135      	bne.n	8007cd0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	330c      	adds	r3, #12
 8007c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	613b      	str	r3, [r7, #16]
   return(result);
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f023 0310 	bic.w	r3, r3, #16
 8007c80:	627b      	str	r3, [r7, #36]	; 0x24
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	330c      	adds	r3, #12
 8007c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8a:	623a      	str	r2, [r7, #32]
 8007c8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8e:	69f9      	ldr	r1, [r7, #28]
 8007c90:	6a3a      	ldr	r2, [r7, #32]
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e5      	bne.n	8007c6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	2b10      	cmp	r3, #16
 8007caa:	d10a      	bne.n	8007cc2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff fdf9 	bl	80078c0 <HAL_UARTEx_RxEventCallback>
 8007cce:	e002      	b.n	8007cd6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7ff fde1 	bl	8007898 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e002      	b.n	8007ce0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e000      	b.n	8007ce0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007cde:	2302      	movs	r3, #2
  }
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3730      	adds	r7, #48	; 0x30
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cec:	b0c0      	sub	sp, #256	; 0x100
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d04:	68d9      	ldr	r1, [r3, #12]
 8007d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	ea40 0301 	orr.w	r3, r0, r1
 8007d10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	431a      	orrs	r2, r3
 8007d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d40:	f021 010c 	bic.w	r1, r1, #12
 8007d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d4e:	430b      	orrs	r3, r1
 8007d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d62:	6999      	ldr	r1, [r3, #24]
 8007d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	ea40 0301 	orr.w	r3, r0, r1
 8007d6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	4b8f      	ldr	r3, [pc, #572]	; (8007fb4 <UART_SetConfig+0x2cc>)
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d005      	beq.n	8007d88 <UART_SetConfig+0xa0>
 8007d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4b8d      	ldr	r3, [pc, #564]	; (8007fb8 <UART_SetConfig+0x2d0>)
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d104      	bne.n	8007d92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d88:	f7fd fb7c 	bl	8005484 <HAL_RCC_GetPCLK2Freq>
 8007d8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d90:	e003      	b.n	8007d9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d92:	f7fd fb63 	bl	800545c <HAL_RCC_GetPCLK1Freq>
 8007d96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da4:	f040 810c 	bne.w	8007fc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dac:	2200      	movs	r2, #0
 8007dae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007db2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007db6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007dba:	4622      	mov	r2, r4
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	1891      	adds	r1, r2, r2
 8007dc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007dc2:	415b      	adcs	r3, r3
 8007dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007dca:	4621      	mov	r1, r4
 8007dcc:	eb12 0801 	adds.w	r8, r2, r1
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	eb43 0901 	adc.w	r9, r3, r1
 8007dd6:	f04f 0200 	mov.w	r2, #0
 8007dda:	f04f 0300 	mov.w	r3, #0
 8007dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dea:	4690      	mov	r8, r2
 8007dec:	4699      	mov	r9, r3
 8007dee:	4623      	mov	r3, r4
 8007df0:	eb18 0303 	adds.w	r3, r8, r3
 8007df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007df8:	462b      	mov	r3, r5
 8007dfa:	eb49 0303 	adc.w	r3, r9, r3
 8007dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e16:	460b      	mov	r3, r1
 8007e18:	18db      	adds	r3, r3, r3
 8007e1a:	653b      	str	r3, [r7, #80]	; 0x50
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	eb42 0303 	adc.w	r3, r2, r3
 8007e22:	657b      	str	r3, [r7, #84]	; 0x54
 8007e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e2c:	f7f8 fa28 	bl	8000280 <__aeabi_uldivmod>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	4b61      	ldr	r3, [pc, #388]	; (8007fbc <UART_SetConfig+0x2d4>)
 8007e36:	fba3 2302 	umull	r2, r3, r3, r2
 8007e3a:	095b      	lsrs	r3, r3, #5
 8007e3c:	011c      	lsls	r4, r3, #4
 8007e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e50:	4642      	mov	r2, r8
 8007e52:	464b      	mov	r3, r9
 8007e54:	1891      	adds	r1, r2, r2
 8007e56:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e58:	415b      	adcs	r3, r3
 8007e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e60:	4641      	mov	r1, r8
 8007e62:	eb12 0a01 	adds.w	sl, r2, r1
 8007e66:	4649      	mov	r1, r9
 8007e68:	eb43 0b01 	adc.w	fp, r3, r1
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e80:	4692      	mov	sl, r2
 8007e82:	469b      	mov	fp, r3
 8007e84:	4643      	mov	r3, r8
 8007e86:	eb1a 0303 	adds.w	r3, sl, r3
 8007e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e8e:	464b      	mov	r3, r9
 8007e90:	eb4b 0303 	adc.w	r3, fp, r3
 8007e94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ea4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ea8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007eac:	460b      	mov	r3, r1
 8007eae:	18db      	adds	r3, r3, r3
 8007eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	eb42 0303 	adc.w	r3, r2, r3
 8007eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8007eba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ebe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007ec2:	f7f8 f9dd 	bl	8000280 <__aeabi_uldivmod>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4611      	mov	r1, r2
 8007ecc:	4b3b      	ldr	r3, [pc, #236]	; (8007fbc <UART_SetConfig+0x2d4>)
 8007ece:	fba3 2301 	umull	r2, r3, r3, r1
 8007ed2:	095b      	lsrs	r3, r3, #5
 8007ed4:	2264      	movs	r2, #100	; 0x64
 8007ed6:	fb02 f303 	mul.w	r3, r2, r3
 8007eda:	1acb      	subs	r3, r1, r3
 8007edc:	00db      	lsls	r3, r3, #3
 8007ede:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ee2:	4b36      	ldr	r3, [pc, #216]	; (8007fbc <UART_SetConfig+0x2d4>)
 8007ee4:	fba3 2302 	umull	r2, r3, r3, r2
 8007ee8:	095b      	lsrs	r3, r3, #5
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ef0:	441c      	add	r4, r3
 8007ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007efc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f04:	4642      	mov	r2, r8
 8007f06:	464b      	mov	r3, r9
 8007f08:	1891      	adds	r1, r2, r2
 8007f0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f0c:	415b      	adcs	r3, r3
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f14:	4641      	mov	r1, r8
 8007f16:	1851      	adds	r1, r2, r1
 8007f18:	6339      	str	r1, [r7, #48]	; 0x30
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	414b      	adcs	r3, r1
 8007f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	f04f 0300 	mov.w	r3, #0
 8007f28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	00cb      	lsls	r3, r1, #3
 8007f30:	4651      	mov	r1, sl
 8007f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f36:	4651      	mov	r1, sl
 8007f38:	00ca      	lsls	r2, r1, #3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4603      	mov	r3, r0
 8007f40:	4642      	mov	r2, r8
 8007f42:	189b      	adds	r3, r3, r2
 8007f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f48:	464b      	mov	r3, r9
 8007f4a:	460a      	mov	r2, r1
 8007f4c:	eb42 0303 	adc.w	r3, r2, r3
 8007f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f68:	460b      	mov	r3, r1
 8007f6a:	18db      	adds	r3, r3, r3
 8007f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f6e:	4613      	mov	r3, r2
 8007f70:	eb42 0303 	adc.w	r3, r2, r3
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f7e:	f7f8 f97f 	bl	8000280 <__aeabi_uldivmod>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4b0d      	ldr	r3, [pc, #52]	; (8007fbc <UART_SetConfig+0x2d4>)
 8007f88:	fba3 1302 	umull	r1, r3, r3, r2
 8007f8c:	095b      	lsrs	r3, r3, #5
 8007f8e:	2164      	movs	r1, #100	; 0x64
 8007f90:	fb01 f303 	mul.w	r3, r1, r3
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	3332      	adds	r3, #50	; 0x32
 8007f9a:	4a08      	ldr	r2, [pc, #32]	; (8007fbc <UART_SetConfig+0x2d4>)
 8007f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	f003 0207 	and.w	r2, r3, #7
 8007fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4422      	add	r2, r4
 8007fae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fb0:	e105      	b.n	80081be <UART_SetConfig+0x4d6>
 8007fb2:	bf00      	nop
 8007fb4:	40011000 	.word	0x40011000
 8007fb8:	40011400 	.word	0x40011400
 8007fbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007fce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007fd2:	4642      	mov	r2, r8
 8007fd4:	464b      	mov	r3, r9
 8007fd6:	1891      	adds	r1, r2, r2
 8007fd8:	6239      	str	r1, [r7, #32]
 8007fda:	415b      	adcs	r3, r3
 8007fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8007fde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fe2:	4641      	mov	r1, r8
 8007fe4:	1854      	adds	r4, r2, r1
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	eb43 0501 	adc.w	r5, r3, r1
 8007fec:	f04f 0200 	mov.w	r2, #0
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	00eb      	lsls	r3, r5, #3
 8007ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ffa:	00e2      	lsls	r2, r4, #3
 8007ffc:	4614      	mov	r4, r2
 8007ffe:	461d      	mov	r5, r3
 8008000:	4643      	mov	r3, r8
 8008002:	18e3      	adds	r3, r4, r3
 8008004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008008:	464b      	mov	r3, r9
 800800a:	eb45 0303 	adc.w	r3, r5, r3
 800800e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800801e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008022:	f04f 0200 	mov.w	r2, #0
 8008026:	f04f 0300 	mov.w	r3, #0
 800802a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800802e:	4629      	mov	r1, r5
 8008030:	008b      	lsls	r3, r1, #2
 8008032:	4621      	mov	r1, r4
 8008034:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008038:	4621      	mov	r1, r4
 800803a:	008a      	lsls	r2, r1, #2
 800803c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008040:	f7f8 f91e 	bl	8000280 <__aeabi_uldivmod>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	4b60      	ldr	r3, [pc, #384]	; (80081cc <UART_SetConfig+0x4e4>)
 800804a:	fba3 2302 	umull	r2, r3, r3, r2
 800804e:	095b      	lsrs	r3, r3, #5
 8008050:	011c      	lsls	r4, r3, #4
 8008052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008056:	2200      	movs	r2, #0
 8008058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800805c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008060:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008064:	4642      	mov	r2, r8
 8008066:	464b      	mov	r3, r9
 8008068:	1891      	adds	r1, r2, r2
 800806a:	61b9      	str	r1, [r7, #24]
 800806c:	415b      	adcs	r3, r3
 800806e:	61fb      	str	r3, [r7, #28]
 8008070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008074:	4641      	mov	r1, r8
 8008076:	1851      	adds	r1, r2, r1
 8008078:	6139      	str	r1, [r7, #16]
 800807a:	4649      	mov	r1, r9
 800807c:	414b      	adcs	r3, r1
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	f04f 0200 	mov.w	r2, #0
 8008084:	f04f 0300 	mov.w	r3, #0
 8008088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800808c:	4659      	mov	r1, fp
 800808e:	00cb      	lsls	r3, r1, #3
 8008090:	4651      	mov	r1, sl
 8008092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008096:	4651      	mov	r1, sl
 8008098:	00ca      	lsls	r2, r1, #3
 800809a:	4610      	mov	r0, r2
 800809c:	4619      	mov	r1, r3
 800809e:	4603      	mov	r3, r0
 80080a0:	4642      	mov	r2, r8
 80080a2:	189b      	adds	r3, r3, r2
 80080a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080a8:	464b      	mov	r3, r9
 80080aa:	460a      	mov	r2, r1
 80080ac:	eb42 0303 	adc.w	r3, r2, r3
 80080b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80080be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80080c0:	f04f 0200 	mov.w	r2, #0
 80080c4:	f04f 0300 	mov.w	r3, #0
 80080c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80080cc:	4649      	mov	r1, r9
 80080ce:	008b      	lsls	r3, r1, #2
 80080d0:	4641      	mov	r1, r8
 80080d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080d6:	4641      	mov	r1, r8
 80080d8:	008a      	lsls	r2, r1, #2
 80080da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80080de:	f7f8 f8cf 	bl	8000280 <__aeabi_uldivmod>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	4b39      	ldr	r3, [pc, #228]	; (80081cc <UART_SetConfig+0x4e4>)
 80080e8:	fba3 1302 	umull	r1, r3, r3, r2
 80080ec:	095b      	lsrs	r3, r3, #5
 80080ee:	2164      	movs	r1, #100	; 0x64
 80080f0:	fb01 f303 	mul.w	r3, r1, r3
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	011b      	lsls	r3, r3, #4
 80080f8:	3332      	adds	r3, #50	; 0x32
 80080fa:	4a34      	ldr	r2, [pc, #208]	; (80081cc <UART_SetConfig+0x4e4>)
 80080fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008100:	095b      	lsrs	r3, r3, #5
 8008102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008106:	441c      	add	r4, r3
 8008108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800810c:	2200      	movs	r2, #0
 800810e:	673b      	str	r3, [r7, #112]	; 0x70
 8008110:	677a      	str	r2, [r7, #116]	; 0x74
 8008112:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008116:	4642      	mov	r2, r8
 8008118:	464b      	mov	r3, r9
 800811a:	1891      	adds	r1, r2, r2
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	415b      	adcs	r3, r3
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008126:	4641      	mov	r1, r8
 8008128:	1851      	adds	r1, r2, r1
 800812a:	6039      	str	r1, [r7, #0]
 800812c:	4649      	mov	r1, r9
 800812e:	414b      	adcs	r3, r1
 8008130:	607b      	str	r3, [r7, #4]
 8008132:	f04f 0200 	mov.w	r2, #0
 8008136:	f04f 0300 	mov.w	r3, #0
 800813a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800813e:	4659      	mov	r1, fp
 8008140:	00cb      	lsls	r3, r1, #3
 8008142:	4651      	mov	r1, sl
 8008144:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008148:	4651      	mov	r1, sl
 800814a:	00ca      	lsls	r2, r1, #3
 800814c:	4610      	mov	r0, r2
 800814e:	4619      	mov	r1, r3
 8008150:	4603      	mov	r3, r0
 8008152:	4642      	mov	r2, r8
 8008154:	189b      	adds	r3, r3, r2
 8008156:	66bb      	str	r3, [r7, #104]	; 0x68
 8008158:	464b      	mov	r3, r9
 800815a:	460a      	mov	r2, r1
 800815c:	eb42 0303 	adc.w	r3, r2, r3
 8008160:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	663b      	str	r3, [r7, #96]	; 0x60
 800816c:	667a      	str	r2, [r7, #100]	; 0x64
 800816e:	f04f 0200 	mov.w	r2, #0
 8008172:	f04f 0300 	mov.w	r3, #0
 8008176:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800817a:	4649      	mov	r1, r9
 800817c:	008b      	lsls	r3, r1, #2
 800817e:	4641      	mov	r1, r8
 8008180:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008184:	4641      	mov	r1, r8
 8008186:	008a      	lsls	r2, r1, #2
 8008188:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800818c:	f7f8 f878 	bl	8000280 <__aeabi_uldivmod>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4b0d      	ldr	r3, [pc, #52]	; (80081cc <UART_SetConfig+0x4e4>)
 8008196:	fba3 1302 	umull	r1, r3, r3, r2
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	2164      	movs	r1, #100	; 0x64
 800819e:	fb01 f303 	mul.w	r3, r1, r3
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	011b      	lsls	r3, r3, #4
 80081a6:	3332      	adds	r3, #50	; 0x32
 80081a8:	4a08      	ldr	r2, [pc, #32]	; (80081cc <UART_SetConfig+0x4e4>)
 80081aa:	fba2 2303 	umull	r2, r3, r2, r3
 80081ae:	095b      	lsrs	r3, r3, #5
 80081b0:	f003 020f 	and.w	r2, r3, #15
 80081b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4422      	add	r2, r4
 80081bc:	609a      	str	r2, [r3, #8]
}
 80081be:	bf00      	nop
 80081c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80081c4:	46bd      	mov	sp, r7
 80081c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081ca:	bf00      	nop
 80081cc:	51eb851f 	.word	0x51eb851f

080081d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081d0:	b084      	sub	sp, #16
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	f107 001c 	add.w	r0, r7, #28
 80081de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d122      	bne.n	800822e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80081fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008212:	2b01      	cmp	r3, #1
 8008214:	d105      	bne.n	8008222 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f9c0 	bl	80085a8 <USB_CoreReset>
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]
 800822c:	e01a      	b.n	8008264 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f9b4 	bl	80085a8 <USB_CoreReset>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008246:	2b00      	cmp	r3, #0
 8008248:	d106      	bne.n	8008258 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	639a      	str	r2, [r3, #56]	; 0x38
 8008256:	e005      	b.n	8008264 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	2b01      	cmp	r3, #1
 8008268:	d10b      	bne.n	8008282 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f043 0206 	orr.w	r2, r3, #6
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f043 0220 	orr.w	r2, r3, #32
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008282:	7bfb      	ldrb	r3, [r7, #15]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800828e:	b004      	add	sp, #16
 8008290:	4770      	bx	lr

08008292 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f043 0201 	orr.w	r2, r3, #1
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f023 0201 	bic.w	r2, r3, #1
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	460b      	mov	r3, r1
 80082e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d115      	bne.n	8008324 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008304:	2001      	movs	r0, #1
 8008306:	f7fa f941 	bl	800258c <HAL_Delay>
      ms++;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3301      	adds	r3, #1
 800830e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f93a 	bl	800858a <USB_GetMode>
 8008316:	4603      	mov	r3, r0
 8008318:	2b01      	cmp	r3, #1
 800831a:	d01e      	beq.n	800835a <USB_SetCurrentMode+0x84>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b31      	cmp	r3, #49	; 0x31
 8008320:	d9f0      	bls.n	8008304 <USB_SetCurrentMode+0x2e>
 8008322:	e01a      	b.n	800835a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d115      	bne.n	8008356 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008336:	2001      	movs	r0, #1
 8008338:	f7fa f928 	bl	800258c <HAL_Delay>
      ms++;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f921 	bl	800858a <USB_GetMode>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d005      	beq.n	800835a <USB_SetCurrentMode+0x84>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b31      	cmp	r3, #49	; 0x31
 8008352:	d9f0      	bls.n	8008336 <USB_SetCurrentMode+0x60>
 8008354:	e001      	b.n	800835a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e005      	b.n	8008366 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2b32      	cmp	r3, #50	; 0x32
 800835e:	d101      	bne.n	8008364 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e000      	b.n	8008366 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3301      	adds	r3, #1
 8008382:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4a13      	ldr	r2, [pc, #76]	; (80083d4 <USB_FlushTxFifo+0x64>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d901      	bls.n	8008390 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e01b      	b.n	80083c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	daf2      	bge.n	800837e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	019b      	lsls	r3, r3, #6
 80083a0:	f043 0220 	orr.w	r2, r3, #32
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3301      	adds	r3, #1
 80083ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	4a08      	ldr	r2, [pc, #32]	; (80083d4 <USB_FlushTxFifo+0x64>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d901      	bls.n	80083ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e006      	b.n	80083c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	2b20      	cmp	r3, #32
 80083c4:	d0f0      	beq.n	80083a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	00030d40 	.word	0x00030d40

080083d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083e0:	2300      	movs	r3, #0
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3301      	adds	r3, #1
 80083e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4a11      	ldr	r2, [pc, #68]	; (8008434 <USB_FlushRxFifo+0x5c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d901      	bls.n	80083f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e018      	b.n	8008428 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	daf2      	bge.n	80083e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2210      	movs	r2, #16
 8008406:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3301      	adds	r3, #1
 800840c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	4a08      	ldr	r2, [pc, #32]	; (8008434 <USB_FlushRxFifo+0x5c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d901      	bls.n	800841a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e006      	b.n	8008428 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	f003 0310 	and.w	r3, r3, #16
 8008422:	2b10      	cmp	r3, #16
 8008424:	d0f0      	beq.n	8008408 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	00030d40 	.word	0x00030d40

08008438 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008438:	b480      	push	{r7}
 800843a:	b089      	sub	sp, #36	; 0x24
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	4611      	mov	r1, r2
 8008444:	461a      	mov	r2, r3
 8008446:	460b      	mov	r3, r1
 8008448:	71fb      	strb	r3, [r7, #7]
 800844a:	4613      	mov	r3, r2
 800844c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008456:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800845a:	2b00      	cmp	r3, #0
 800845c:	d123      	bne.n	80084a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800845e:	88bb      	ldrh	r3, [r7, #4]
 8008460:	3303      	adds	r3, #3
 8008462:	089b      	lsrs	r3, r3, #2
 8008464:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008466:	2300      	movs	r3, #0
 8008468:	61bb      	str	r3, [r7, #24]
 800846a:	e018      	b.n	800849e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800846c:	79fb      	ldrb	r3, [r7, #7]
 800846e:	031a      	lsls	r2, r3, #12
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	4413      	add	r3, r2
 8008474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008478:	461a      	mov	r2, r3
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	3301      	adds	r3, #1
 8008484:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	3301      	adds	r3, #1
 800848a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	3301      	adds	r3, #1
 8008490:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	3301      	adds	r3, #1
 8008496:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	3301      	adds	r3, #1
 800849c:	61bb      	str	r3, [r7, #24]
 800849e:	69ba      	ldr	r2, [r7, #24]
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d3e2      	bcc.n	800846c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3724      	adds	r7, #36	; 0x24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b08b      	sub	sp, #44	; 0x2c
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	4613      	mov	r3, r2
 80084c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80084ca:	88fb      	ldrh	r3, [r7, #6]
 80084cc:	089b      	lsrs	r3, r3, #2
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80084d2:	88fb      	ldrh	r3, [r7, #6]
 80084d4:	f003 0303 	and.w	r3, r3, #3
 80084d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80084da:	2300      	movs	r3, #0
 80084dc:	623b      	str	r3, [r7, #32]
 80084de:	e014      	b.n	800850a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	3301      	adds	r3, #1
 80084f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	3301      	adds	r3, #1
 80084f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	3301      	adds	r3, #1
 80084fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	3301      	adds	r3, #1
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	3301      	adds	r3, #1
 8008508:	623b      	str	r3, [r7, #32]
 800850a:	6a3a      	ldr	r2, [r7, #32]
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	429a      	cmp	r2, r3
 8008510:	d3e6      	bcc.n	80084e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008512:	8bfb      	ldrh	r3, [r7, #30]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d01e      	beq.n	8008556 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008522:	461a      	mov	r2, r3
 8008524:	f107 0310 	add.w	r3, r7, #16
 8008528:	6812      	ldr	r2, [r2, #0]
 800852a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	b2db      	uxtb	r3, r3
 8008532:	00db      	lsls	r3, r3, #3
 8008534:	fa22 f303 	lsr.w	r3, r2, r3
 8008538:	b2da      	uxtb	r2, r3
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	701a      	strb	r2, [r3, #0]
      i++;
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	3301      	adds	r3, #1
 8008542:	623b      	str	r3, [r7, #32]
      pDest++;
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	3301      	adds	r3, #1
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800854a:	8bfb      	ldrh	r3, [r7, #30]
 800854c:	3b01      	subs	r3, #1
 800854e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008550:	8bfb      	ldrh	r3, [r7, #30]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1ea      	bne.n	800852c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008558:	4618      	mov	r0, r3
 800855a:	372c      	adds	r7, #44	; 0x2c
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4013      	ands	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800857c:	68fb      	ldr	r3, [r7, #12]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	f003 0301 	and.w	r3, r3, #1
}
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
	...

080085a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	3301      	adds	r3, #1
 80085b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4a13      	ldr	r2, [pc, #76]	; (800860c <USB_CoreReset+0x64>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d901      	bls.n	80085c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e01b      	b.n	80085fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	daf2      	bge.n	80085b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	f043 0201 	orr.w	r2, r3, #1
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3301      	adds	r3, #1
 80085e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	4a09      	ldr	r2, [pc, #36]	; (800860c <USB_CoreReset+0x64>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d901      	bls.n	80085f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e006      	b.n	80085fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d0f0      	beq.n	80085de <USB_CoreReset+0x36>

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	00030d40 	.word	0x00030d40

08008610 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008610:	b084      	sub	sp, #16
 8008612:	b580      	push	{r7, lr}
 8008614:	b086      	sub	sp, #24
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800861e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008630:	461a      	mov	r2, r3
 8008632:	2300      	movs	r3, #0
 8008634:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008646:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008652:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008662:	2b00      	cmp	r3, #0
 8008664:	d018      	beq.n	8008698 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008668:	2b01      	cmp	r3, #1
 800866a:	d10a      	bne.n	8008682 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800867a:	f043 0304 	orr.w	r3, r3, #4
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	e014      	b.n	80086ac <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008690:	f023 0304 	bic.w	r3, r3, #4
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	e009      	b.n	80086ac <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086a6:	f023 0304 	bic.w	r3, r3, #4
 80086aa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80086ac:	2110      	movs	r1, #16
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7ff fe5e 	bl	8008370 <USB_FlushTxFifo>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff fe8a 	bl	80083d8 <USB_FlushRxFifo>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80086ce:	2300      	movs	r3, #0
 80086d0:	613b      	str	r3, [r7, #16]
 80086d2:	e015      	b.n	8008700 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e0:	461a      	mov	r2, r3
 80086e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f4:	461a      	mov	r2, r3
 80086f6:	2300      	movs	r3, #0
 80086f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	3301      	adds	r3, #1
 80086fe:	613b      	str	r3, [r7, #16]
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	429a      	cmp	r2, r3
 8008706:	d3e5      	bcc.n	80086d4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008714:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00b      	beq.n	800873a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008728:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a13      	ldr	r2, [pc, #76]	; (800877c <USB_HostInit+0x16c>)
 800872e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a13      	ldr	r2, [pc, #76]	; (8008780 <USB_HostInit+0x170>)
 8008734:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008738:	e009      	b.n	800874e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2280      	movs	r2, #128	; 0x80
 800873e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a10      	ldr	r2, [pc, #64]	; (8008784 <USB_HostInit+0x174>)
 8008744:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a0f      	ldr	r2, [pc, #60]	; (8008788 <USB_HostInit+0x178>)
 800874a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800874e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008750:	2b00      	cmp	r3, #0
 8008752:	d105      	bne.n	8008760 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	f043 0210 	orr.w	r2, r3, #16
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	699a      	ldr	r2, [r3, #24]
 8008764:	4b09      	ldr	r3, [pc, #36]	; (800878c <USB_HostInit+0x17c>)
 8008766:	4313      	orrs	r3, r2
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800876c:	7dfb      	ldrb	r3, [r7, #23]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008778:	b004      	add	sp, #16
 800877a:	4770      	bx	lr
 800877c:	01000200 	.word	0x01000200
 8008780:	00e00300 	.word	0x00e00300
 8008784:	00600080 	.word	0x00600080
 8008788:	004000e0 	.word	0x004000e0
 800878c:	a3200008 	.word	0xa3200008

08008790 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087ae:	f023 0303 	bic.w	r3, r3, #3
 80087b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	78fb      	ldrb	r3, [r7, #3]
 80087be:	f003 0303 	and.w	r3, r3, #3
 80087c2:	68f9      	ldr	r1, [r7, #12]
 80087c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80087c8:	4313      	orrs	r3, r2
 80087ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80087cc:	78fb      	ldrb	r3, [r7, #3]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d107      	bne.n	80087e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087d8:	461a      	mov	r2, r3
 80087da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80087de:	6053      	str	r3, [r2, #4]
 80087e0:	e009      	b.n	80087f6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d106      	bne.n	80087f6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087ee:	461a      	mov	r2, r3
 80087f0:	f241 7370 	movw	r3, #6000	; 0x1770
 80087f4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008824:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800882e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008832:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008834:	2064      	movs	r0, #100	; 0x64
 8008836:	f7f9 fea9 	bl	800258c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008846:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008848:	200a      	movs	r0, #10
 800884a:	f7f9 fe9f 	bl	800258c <HAL_Delay>

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800887c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d109      	bne.n	800889c <USB_DriveVbus+0x44>
 8008888:	78fb      	ldrb	r3, [r7, #3]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d106      	bne.n	800889c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008896:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800889a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a6:	d109      	bne.n	80088bc <USB_DriveVbus+0x64>
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d106      	bne.n	80088bc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80088b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b085      	sub	sp, #20
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	0c5b      	lsrs	r3, r3, #17
 80088e8:	f003 0303 	and.w	r3, r3, #3
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	b29b      	uxth	r3, r3
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
	...

0800891c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b088      	sub	sp, #32
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	4608      	mov	r0, r1
 8008926:	4611      	mov	r1, r2
 8008928:	461a      	mov	r2, r3
 800892a:	4603      	mov	r3, r0
 800892c:	70fb      	strb	r3, [r7, #3]
 800892e:	460b      	mov	r3, r1
 8008930:	70bb      	strb	r3, [r7, #2]
 8008932:	4613      	mov	r3, r2
 8008934:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800893e:	78fb      	ldrb	r3, [r7, #3]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	4413      	add	r3, r2
 8008946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800894a:	461a      	mov	r2, r3
 800894c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008950:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008952:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008956:	2b03      	cmp	r3, #3
 8008958:	d87e      	bhi.n	8008a58 <USB_HC_Init+0x13c>
 800895a:	a201      	add	r2, pc, #4	; (adr r2, 8008960 <USB_HC_Init+0x44>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	08008971 	.word	0x08008971
 8008964:	08008a1b 	.word	0x08008a1b
 8008968:	08008971 	.word	0x08008971
 800896c:	080089dd 	.word	0x080089dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	4413      	add	r3, r2
 8008978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800897c:	461a      	mov	r2, r3
 800897e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008982:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008984:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008988:	2b00      	cmp	r3, #0
 800898a:	da10      	bge.n	80089ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800898c:	78fb      	ldrb	r3, [r7, #3]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	4413      	add	r3, r2
 8008994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	78fa      	ldrb	r2, [r7, #3]
 800899c:	0151      	lsls	r1, r2, #5
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	440a      	add	r2, r1
 80089a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089aa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80089ac:	e057      	b.n	8008a5e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d051      	beq.n	8008a5e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	78fa      	ldrb	r2, [r7, #3]
 80089ca:	0151      	lsls	r1, r2, #5
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	440a      	add	r2, r1
 80089d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80089d8:	60d3      	str	r3, [r2, #12]
      break;
 80089da:	e040      	b.n	8008a5e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80089dc:	78fb      	ldrb	r3, [r7, #3]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e8:	461a      	mov	r2, r3
 80089ea:	f240 639d 	movw	r3, #1693	; 0x69d
 80089ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80089f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	da34      	bge.n	8008a62 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80089f8:	78fb      	ldrb	r3, [r7, #3]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	78fa      	ldrb	r2, [r7, #3]
 8008a08:	0151      	lsls	r1, r2, #5
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	440a      	add	r2, r1
 8008a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a16:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008a18:	e023      	b.n	8008a62 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a1a:	78fb      	ldrb	r3, [r7, #3]
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a26:	461a      	mov	r2, r3
 8008a28:	f240 2325 	movw	r3, #549	; 0x225
 8008a2c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008a2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	da17      	bge.n	8008a66 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008a36:	78fb      	ldrb	r3, [r7, #3]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	78fa      	ldrb	r2, [r7, #3]
 8008a46:	0151      	lsls	r1, r2, #5
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	440a      	add	r2, r1
 8008a4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a50:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008a54:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008a56:	e006      	b.n	8008a66 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	77fb      	strb	r3, [r7, #31]
      break;
 8008a5c:	e004      	b.n	8008a68 <USB_HC_Init+0x14c>
      break;
 8008a5e:	bf00      	nop
 8008a60:	e002      	b.n	8008a68 <USB_HC_Init+0x14c>
      break;
 8008a62:	bf00      	nop
 8008a64:	e000      	b.n	8008a68 <USB_HC_Init+0x14c>
      break;
 8008a66:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	78fa      	ldrb	r2, [r7, #3]
 8008a78:	0151      	lsls	r1, r2, #5
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	440a      	add	r2, r1
 8008a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a82:	f043 0302 	orr.w	r3, r3, #2
 8008a86:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a8e:	699a      	ldr	r2, [r3, #24]
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	f003 030f 	and.w	r3, r3, #15
 8008a96:	2101      	movs	r1, #1
 8008a98:	fa01 f303 	lsl.w	r3, r1, r3
 8008a9c:	6939      	ldr	r1, [r7, #16]
 8008a9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008ab2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	da03      	bge.n	8008ac2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008abe:	61bb      	str	r3, [r7, #24]
 8008ac0:	e001      	b.n	8008ac6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f7ff feff 	bl	80088ca <USB_GetHostSpeed>
 8008acc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008ace:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d106      	bne.n	8008ae4 <USB_HC_Init+0x1c8>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d003      	beq.n	8008ae4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ae0:	617b      	str	r3, [r7, #20]
 8008ae2:	e001      	b.n	8008ae8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008ae8:	787b      	ldrb	r3, [r7, #1]
 8008aea:	059b      	lsls	r3, r3, #22
 8008aec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008af0:	78bb      	ldrb	r3, [r7, #2]
 8008af2:	02db      	lsls	r3, r3, #11
 8008af4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008af8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008afa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008afe:	049b      	lsls	r3, r3, #18
 8008b00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008b04:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008b06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008b0c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b12:	78fb      	ldrb	r3, [r7, #3]
 8008b14:	0159      	lsls	r1, r3, #5
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	440b      	add	r3, r1
 8008b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b1e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b24:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008b26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d003      	beq.n	8008b36 <USB_HC_Init+0x21a>
 8008b2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d10f      	bne.n	8008b56 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008b36:	78fb      	ldrb	r3, [r7, #3]
 8008b38:	015a      	lsls	r2, r3, #5
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	78fa      	ldrb	r2, [r7, #3]
 8008b46:	0151      	lsls	r1, r2, #5
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	440a      	add	r2, r1
 8008b4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b54:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008b56:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3720      	adds	r7, #32
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08c      	sub	sp, #48	; 0x30
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	785b      	ldrb	r3, [r3, #1]
 8008b76:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b7c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d02d      	beq.n	8008be6 <USB_HC_StartXfer+0x86>
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	791b      	ldrb	r3, [r3, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d129      	bne.n	8008be6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d117      	bne.n	8008bc8 <USB_HC_StartXfer+0x68>
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	79db      	ldrb	r3, [r3, #7]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d003      	beq.n	8008ba8 <USB_HC_StartXfer+0x48>
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	79db      	ldrb	r3, [r3, #7]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d10f      	bne.n	8008bc8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	69fa      	ldr	r2, [r7, #28]
 8008bb8:	0151      	lsls	r1, r2, #5
 8008bba:	6a3a      	ldr	r2, [r7, #32]
 8008bbc:	440a      	add	r2, r1
 8008bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bc6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10b      	bne.n	8008be6 <USB_HC_StartXfer+0x86>
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	795b      	ldrb	r3, [r3, #5]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d107      	bne.n	8008be6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	785b      	ldrb	r3, [r3, #1]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 fa0f 	bl	8009000 <USB_DoPing>
      return HAL_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	e0f8      	b.n	8008dd8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d018      	beq.n	8008c20 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	8912      	ldrh	r2, [r2, #8]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	8912      	ldrh	r2, [r2, #8]
 8008bfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c02:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008c04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008c06:	8b7b      	ldrh	r3, [r7, #26]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d90b      	bls.n	8008c24 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008c0c:	8b7b      	ldrh	r3, [r7, #26]
 8008c0e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	8912      	ldrh	r2, [r2, #8]
 8008c16:	fb03 f202 	mul.w	r2, r3, r2
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	611a      	str	r2, [r3, #16]
 8008c1e:	e001      	b.n	8008c24 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008c20:	2301      	movs	r3, #1
 8008c22:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	78db      	ldrb	r3, [r3, #3]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d007      	beq.n	8008c3c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	8912      	ldrh	r2, [r2, #8]
 8008c32:	fb03 f202 	mul.w	r2, r3, r2
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	611a      	str	r2, [r3, #16]
 8008c3a:	e003      	b.n	8008c44 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	695a      	ldr	r2, [r3, #20]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c4e:	04d9      	lsls	r1, r3, #19
 8008c50:	4b63      	ldr	r3, [pc, #396]	; (8008de0 <USB_HC_StartXfer+0x280>)
 8008c52:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c54:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	7a9b      	ldrb	r3, [r3, #10]
 8008c5a:	075b      	lsls	r3, r3, #29
 8008c5c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c60:	69f9      	ldr	r1, [r7, #28]
 8008c62:	0148      	lsls	r0, r1, #5
 8008c64:	6a39      	ldr	r1, [r7, #32]
 8008c66:	4401      	add	r1, r0
 8008c68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c6c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c6e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d009      	beq.n	8008c8a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	68d9      	ldr	r1, [r3, #12]
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c86:	460a      	mov	r2, r1
 8008c88:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	bf0c      	ite	eq
 8008c9a:	2301      	moveq	r3, #1
 8008c9c:	2300      	movne	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	015a      	lsls	r2, r3, #5
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	69fa      	ldr	r2, [r7, #28]
 8008cb2:	0151      	lsls	r1, r2, #5
 8008cb4:	6a3a      	ldr	r2, [r7, #32]
 8008cb6:	440a      	add	r2, r1
 8008cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cbc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008cc0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	7e7b      	ldrb	r3, [r7, #25]
 8008cd2:	075b      	lsls	r3, r3, #29
 8008cd4:	69f9      	ldr	r1, [r7, #28]
 8008cd6:	0148      	lsls	r0, r1, #5
 8008cd8:	6a39      	ldr	r1, [r7, #32]
 8008cda:	4401      	add	r1, r0
 8008cdc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008cfa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	78db      	ldrb	r3, [r3, #3]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d004      	beq.n	8008d0e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d0a:	613b      	str	r3, [r7, #16]
 8008d0c:	e003      	b.n	8008d16 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d14:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d1c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	015a      	lsls	r2, r3, #5
 8008d22:	6a3b      	ldr	r3, [r7, #32]
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008d30:	79fb      	ldrb	r3, [r7, #7]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	e04e      	b.n	8008dd8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	78db      	ldrb	r3, [r3, #3]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d149      	bne.n	8008dd6 <USB_HC_StartXfer+0x276>
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d045      	beq.n	8008dd6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	79db      	ldrb	r3, [r3, #7]
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d830      	bhi.n	8008db4 <USB_HC_StartXfer+0x254>
 8008d52:	a201      	add	r2, pc, #4	; (adr r2, 8008d58 <USB_HC_StartXfer+0x1f8>)
 8008d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d58:	08008d69 	.word	0x08008d69
 8008d5c:	08008d8d 	.word	0x08008d8d
 8008d60:	08008d69 	.word	0x08008d69
 8008d64:	08008d8d 	.word	0x08008d8d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	3303      	adds	r3, #3
 8008d6e:	089b      	lsrs	r3, r3, #2
 8008d70:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008d72:	8afa      	ldrh	r2, [r7, #22]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d91c      	bls.n	8008db8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	f043 0220 	orr.w	r2, r3, #32
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	619a      	str	r2, [r3, #24]
        }
        break;
 8008d8a:	e015      	b.n	8008db8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	695b      	ldr	r3, [r3, #20]
 8008d90:	3303      	adds	r3, #3
 8008d92:	089b      	lsrs	r3, r3, #2
 8008d94:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008d96:	8afa      	ldrh	r2, [r7, #22]
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d90a      	bls.n	8008dbc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008db2:	e003      	b.n	8008dbc <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008db4:	bf00      	nop
 8008db6:	e002      	b.n	8008dbe <USB_HC_StartXfer+0x25e>
        break;
 8008db8:	bf00      	nop
 8008dba:	e000      	b.n	8008dbe <USB_HC_StartXfer+0x25e>
        break;
 8008dbc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	68d9      	ldr	r1, [r3, #12]
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	785a      	ldrb	r2, [r3, #1]
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	2000      	movs	r0, #0
 8008dce:	9000      	str	r0, [sp, #0]
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f7ff fb31 	bl	8008438 <USB_WritePacket>
  }

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3728      	adds	r7, #40	; 0x28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	1ff80000 	.word	0x1ff80000

08008de4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	b29b      	uxth	r3, r3
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b089      	sub	sp, #36	; 0x24
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008e16:	78fb      	ldrb	r3, [r7, #3]
 8008e18:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	015a      	lsls	r2, r3, #5
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	4413      	add	r3, r2
 8008e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	0c9b      	lsrs	r3, r3, #18
 8008e2e:	f003 0303 	and.w	r3, r3, #3
 8008e32:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	0fdb      	lsrs	r3, r3, #31
 8008e44:	f003 0301 	and.w	r3, r3, #1
 8008e48:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f003 0320 	and.w	r3, r3, #32
 8008e52:	2b20      	cmp	r3, #32
 8008e54:	d104      	bne.n	8008e60 <USB_HC_Halt+0x5a>
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	e0c8      	b.n	8008ff2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d002      	beq.n	8008e6c <USB_HC_Halt+0x66>
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d163      	bne.n	8008f34 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	0151      	lsls	r1, r2, #5
 8008e7e:	69fa      	ldr	r2, [r7, #28]
 8008e80:	440a      	add	r2, r1
 8008e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e8a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f003 0320 	and.w	r3, r3, #32
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f040 80ab 	bne.w	8008ff0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d133      	bne.n	8008f0e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	015a      	lsls	r2, r3, #5
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	0151      	lsls	r1, r2, #5
 8008eb8:	69fa      	ldr	r2, [r7, #28]
 8008eba:	440a      	add	r2, r1
 8008ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ec4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	0151      	lsls	r1, r2, #5
 8008ed8:	69fa      	ldr	r2, [r7, #28]
 8008eda:	440a      	add	r2, r1
 8008edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ee0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ee4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ef2:	d81d      	bhi.n	8008f30 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f0a:	d0ec      	beq.n	8008ee6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f0c:	e070      	b.n	8008ff0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	69ba      	ldr	r2, [r7, #24]
 8008f1e:	0151      	lsls	r1, r2, #5
 8008f20:	69fa      	ldr	r2, [r7, #28]
 8008f22:	440a      	add	r2, r1
 8008f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f2c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f2e:	e05f      	b.n	8008ff0 <USB_HC_Halt+0x1ea>
            break;
 8008f30:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f32:	e05d      	b.n	8008ff0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69ba      	ldr	r2, [r7, #24]
 8008f44:	0151      	lsls	r1, r2, #5
 8008f46:	69fa      	ldr	r2, [r7, #28]
 8008f48:	440a      	add	r2, r1
 8008f4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f52:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d133      	bne.n	8008fcc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	69ba      	ldr	r2, [r7, #24]
 8008f74:	0151      	lsls	r1, r2, #5
 8008f76:	69fa      	ldr	r2, [r7, #28]
 8008f78:	440a      	add	r2, r1
 8008f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f82:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	69ba      	ldr	r2, [r7, #24]
 8008f94:	0151      	lsls	r1, r2, #5
 8008f96:	69fa      	ldr	r2, [r7, #28]
 8008f98:	440a      	add	r2, r1
 8008f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fa2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fb0:	d81d      	bhi.n	8008fee <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	015a      	lsls	r2, r3, #5
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fc8:	d0ec      	beq.n	8008fa4 <USB_HC_Halt+0x19e>
 8008fca:	e011      	b.n	8008ff0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	015a      	lsls	r2, r3, #5
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	69ba      	ldr	r2, [r7, #24]
 8008fdc:	0151      	lsls	r1, r2, #5
 8008fde:	69fa      	ldr	r2, [r7, #28]
 8008fe0:	440a      	add	r2, r1
 8008fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fea:	6013      	str	r3, [r2, #0]
 8008fec:	e000      	b.n	8008ff0 <USB_HC_Halt+0x1ea>
          break;
 8008fee:	bf00      	nop
    }
  }

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3724      	adds	r7, #36	; 0x24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
	...

08009000 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009000:	b480      	push	{r7}
 8009002:	b087      	sub	sp, #28
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	460b      	mov	r3, r1
 800900a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009010:	78fb      	ldrb	r3, [r7, #3]
 8009012:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009014:	2301      	movs	r3, #1
 8009016:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	04da      	lsls	r2, r3, #19
 800901c:	4b15      	ldr	r3, [pc, #84]	; (8009074 <USB_DoPing+0x74>)
 800901e:	4013      	ands	r3, r2
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	0151      	lsls	r1, r2, #5
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	440a      	add	r2, r1
 8009028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800902c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009030:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	4413      	add	r3, r2
 800903a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009048:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009050:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	015a      	lsls	r2, r3, #5
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	4413      	add	r3, r2
 800905a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800905e:	461a      	mov	r2, r3
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	371c      	adds	r7, #28
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	1ff80000 	.word	0x1ff80000

08009078 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b088      	sub	sp, #32
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009088:	2300      	movs	r3, #0
 800908a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff f911 	bl	80082b4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009092:	2110      	movs	r1, #16
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff f96b 	bl	8008370 <USB_FlushTxFifo>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff f997 	bl	80083d8 <USB_FlushRxFifo>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80090b4:	2300      	movs	r3, #0
 80090b6:	61bb      	str	r3, [r7, #24]
 80090b8:	e01f      	b.n	80090fa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090ee:	461a      	mov	r2, r3
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	3301      	adds	r3, #1
 80090f8:	61bb      	str	r3, [r7, #24]
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	2b0f      	cmp	r3, #15
 80090fe:	d9dc      	bls.n	80090ba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009100:	2300      	movs	r3, #0
 8009102:	61bb      	str	r3, [r7, #24]
 8009104:	e034      	b.n	8009170 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	4413      	add	r3, r2
 800910e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800911c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009124:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800912c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	015a      	lsls	r2, r3, #5
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	4413      	add	r3, r2
 8009136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800913a:	461a      	mov	r2, r3
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	3301      	adds	r3, #1
 8009144:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800914c:	d80c      	bhi.n	8009168 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	4413      	add	r3, r2
 8009156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009164:	d0ec      	beq.n	8009140 <USB_StopHost+0xc8>
 8009166:	e000      	b.n	800916a <USB_StopHost+0xf2>
        break;
 8009168:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	3301      	adds	r3, #1
 800916e:	61bb      	str	r3, [r7, #24]
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	2b0f      	cmp	r3, #15
 8009174:	d9c7      	bls.n	8009106 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800917c:	461a      	mov	r2, r3
 800917e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009182:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800918a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff f880 	bl	8008292 <USB_EnableGlobalInt>

  return ret;
 8009192:	7ffb      	ldrb	r3, [r7, #31]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3720      	adds	r7, #32
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80091a0:	4904      	ldr	r1, [pc, #16]	; (80091b4 <MX_FATFS_Init+0x18>)
 80091a2:	4805      	ldr	r0, [pc, #20]	; (80091b8 <MX_FATFS_Init+0x1c>)
 80091a4:	f005 fe6e 	bl	800ee84 <FATFS_LinkDriver>
 80091a8:	4603      	mov	r3, r0
 80091aa:	461a      	mov	r2, r3
 80091ac:	4b03      	ldr	r3, [pc, #12]	; (80091bc <MX_FATFS_Init+0x20>)
 80091ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80091b0:	bf00      	nop
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	2000390c 	.word	0x2000390c
 80091b8:	2000000c 	.word	0x2000000c
 80091bc:	20003908 	.word	0x20003908

080091c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80091c0:	b480      	push	{r7}
 80091c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80091c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
	 HAL_UART_Transmit(&huart3,(uint8_t*)"USER_initialize\n\r",17,0x1000);
 80091da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091de:	2211      	movs	r2, #17
 80091e0:	490c      	ldr	r1, [pc, #48]	; (8009214 <USER_initialize+0x44>)
 80091e2:	480d      	ldr	r0, [pc, #52]	; (8009218 <USER_initialize+0x48>)
 80091e4:	f7fd ffe9 	bl	80071ba <HAL_UART_Transmit>

	 SD_PowerOn();
 80091e8:	f7f8 ff64 	bl	80020b4 <SD_PowerOn>
	 if(sd_ini()==0) {Stat &= ~STA_NOINIT;} 		//Сбросим статус STA_NOINIT
 80091ec:	f7f8 ffe0 	bl	80021b0 <sd_ini>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d107      	bne.n	8009206 <USER_initialize+0x36>
 80091f6:	4b09      	ldr	r3, [pc, #36]	; (800921c <USER_initialize+0x4c>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	f023 0301 	bic.w	r3, r3, #1
 8009200:	b2da      	uxtb	r2, r3
 8009202:	4b06      	ldr	r3, [pc, #24]	; (800921c <USER_initialize+0x4c>)
 8009204:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009206:	4b05      	ldr	r3, [pc, #20]	; (800921c <USER_initialize+0x4c>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	08010180 	.word	0x08010180
 8009218:	20001600 	.word	0x20001600
 800921c:	20000009 	.word	0x20000009

08009220 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	4603      	mov	r3, r0
 8009228:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
	//HAL_UART_Transmit(&huart3,(uint8_t*)"USER_status\n\r",13,0x1000);
	if (pdrv) return STA_NOINIT;
 800922a:	79fb      	ldrb	r3, [r7, #7]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <USER_status+0x14>
 8009230:	2301      	movs	r3, #1
 8009232:	e002      	b.n	800923a <USER_status+0x1a>
    return Stat;
 8009234:	4b04      	ldr	r3, [pc, #16]	; (8009248 <USER_status+0x28>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800923a:	4618      	mov	r0, r3
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	20000009 	.word	0x20000009

0800924c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	60b9      	str	r1, [r7, #8]
 8009254:	607a      	str	r2, [r7, #4]
 8009256:	603b      	str	r3, [r7, #0]
 8009258:	4603      	mov	r3, r0
 800925a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//	HAL_UART_Transmit(&huart3,(uint8_t*)"USER_read\n\r",11,0x1000);
//	sprintf(str1,"sector: %lu; count: %d\n\r",sector, count);
//	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);

	if (pdrv || !count) return RES_PARERR;
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d102      	bne.n	8009268 <USER_read+0x1c>
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <USER_read+0x20>
 8009268:	2304      	movs	r3, #4
 800926a:	e023      	b.n	80092b4 <USER_read+0x68>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800926c:	4b13      	ldr	r3, [pc, #76]	; (80092bc <USER_read+0x70>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <USER_read+0x32>
 800927a:	2303      	movs	r3, #3
 800927c:	e01a      	b.n	80092b4 <USER_read+0x68>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800927e:	4b10      	ldr	r3, [pc, #64]	; (80092c0 <USER_read+0x74>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	b2db      	uxtb	r3, r3
 8009284:	f003 0304 	and.w	r3, r3, #4
 8009288:	2b00      	cmp	r3, #0
 800928a:	d102      	bne.n	8009292 <USER_read+0x46>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	025b      	lsls	r3, r3, #9
 8009290:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d105      	bne.n	80092a4 <USER_read+0x58>
	{
		SD_Read_Block(buff,sector); //Считаем блок в буфер
 8009298:	6879      	ldr	r1, [r7, #4]
 800929a:	68b8      	ldr	r0, [r7, #8]
 800929c:	f7f8 fec6 	bl	800202c <SD_Read_Block>
		count = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	603b      	str	r3, [r7, #0]
	else /* Multiple block read */
	{

	}

	SPI_Release();
 80092a4:	f7f9 f8ae 	bl	8002404 <SPI_Release>

	return count ? RES_ERROR : RES_OK;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	bf14      	ite	ne
 80092ae:	2301      	movne	r3, #1
 80092b0:	2300      	moveq	r3, #0
 80092b2:	b2db      	uxtb	r3, r3

   // return RES_OK;
  /* USER CODE END READ */
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	20000009 	.word	0x20000009
 80092c0:	200038c4 	.word	0x200038c4

080092c4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	607a      	str	r2, [r7, #4]
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	4603      	mov	r3, r0
 80092d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE HERE */
//	HAL_UART_Transmit(&huart3,(uint8_t*)"USER_write\n\r",12,0x1000);
//	sprintf(str1,"sector: %lu\n\r",sector);
//	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);

		if (pdrv || !count) return RES_PARERR;
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d102      	bne.n	80092e0 <USER_write+0x1c>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <USER_write+0x20>
 80092e0:	2304      	movs	r3, #4
 80092e2:	e02c      	b.n	800933e <USER_write+0x7a>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80092e4:	4b18      	ldr	r3, [pc, #96]	; (8009348 <USER_write+0x84>)
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <USER_write+0x32>
 80092f2:	2303      	movs	r3, #3
 80092f4:	e023      	b.n	800933e <USER_write+0x7a>
		if (Stat & STA_PROTECT) return RES_WRPRT;
 80092f6:	4b14      	ldr	r3, [pc, #80]	; (8009348 <USER_write+0x84>)
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	f003 0304 	and.w	r3, r3, #4
 8009300:	2b00      	cmp	r3, #0
 8009302:	d001      	beq.n	8009308 <USER_write+0x44>
 8009304:	2302      	movs	r3, #2
 8009306:	e01a      	b.n	800933e <USER_write+0x7a>
		if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 8009308:	4b10      	ldr	r3, [pc, #64]	; (800934c <USER_write+0x88>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	b2db      	uxtb	r3, r3
 800930e:	f003 0304 	and.w	r3, r3, #4
 8009312:	2b00      	cmp	r3, #0
 8009314:	d102      	bne.n	800931c <USER_write+0x58>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	025b      	lsls	r3, r3, #9
 800931a:	607b      	str	r3, [r7, #4]

		if (count == 1) /* Single block read */
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d105      	bne.n	800932e <USER_write+0x6a>
		{
			SD_Write_Block((BYTE*)buff,sector); //Считаем блок в буфер
 8009322:	6879      	ldr	r1, [r7, #4]
 8009324:	68b8      	ldr	r0, [r7, #8]
 8009326:	f7f8 fe2f 	bl	8001f88 <SD_Write_Block>
		    count = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	603b      	str	r3, [r7, #0]
		}
		else /* Multiple block read */
		{

		}
		SPI_Release();
 800932e:	f7f9 f869 	bl	8002404 <SPI_Release>

		return count ? RES_ERROR : RES_OK;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	bf14      	ite	ne
 8009338:	2301      	movne	r3, #1
 800933a:	2300      	moveq	r3, #0
 800933c:	b2db      	uxtb	r3, r3

    //return RES_OK;
  /* USER CODE END WRITE */
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20000009 	.word	0x20000009
 800934c:	200038c4 	.word	0x200038c4

08009350 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	4603      	mov	r3, r0
 8009358:	603a      	str	r2, [r7, #0]
 800935a:	71fb      	strb	r3, [r7, #7]
 800935c:	460b      	mov	r3, r1
 800935e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
//    HAL_UART_Transmit(&huart3,(uint8_t*)"USER_ioctl\n\r",12,0x1000);
//    sprintf(str1,"cmd: %d\n\r",cmd);
//    HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);

    if (pdrv) return RES_PARERR;
 8009360:	79fb      	ldrb	r3, [r7, #7]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <USER_ioctl+0x1a>
 8009366:	2304      	movs	r3, #4
 8009368:	e02b      	b.n	80093c2 <USER_ioctl+0x72>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800936a:	4b18      	ldr	r3, [pc, #96]	; (80093cc <USER_ioctl+0x7c>)
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	b2db      	uxtb	r3, r3
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <USER_ioctl+0x2c>
 8009378:	2303      	movs	r3, #3
 800937a:	e022      	b.n	80093c2 <USER_ioctl+0x72>
    res = RES_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	73fb      	strb	r3, [r7, #15]

    switch (cmd)
 8009380:	79bb      	ldrb	r3, [r7, #6]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <USER_ioctl+0x3c>
 8009386:	2b02      	cmp	r3, #2
 8009388:	d00d      	beq.n	80093a6 <USER_ioctl+0x56>
 800938a:	e013      	b.n	80093b4 <USER_ioctl+0x64>
    {
    	case CTRL_SYNC : /* Flush dirty buffer if present */
    		SS_SD_SELECT();
 800938c:	2200      	movs	r2, #0
 800938e:	2108      	movs	r1, #8
 8009390:	480f      	ldr	r0, [pc, #60]	; (80093d0 <USER_ioctl+0x80>)
 8009392:	f7f9 ffcf 	bl	8003334 <HAL_GPIO_WritePin>
    		if (SPI_wait_ready() == 0xFF)
 8009396:	f7f9 f83c 	bl	8002412 <SPI_wait_ready>
 800939a:	4603      	mov	r3, r0
 800939c:	2bff      	cmp	r3, #255	; 0xff
 800939e:	d10c      	bne.n	80093ba <USER_ioctl+0x6a>
    			res = RES_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	73fb      	strb	r3, [r7, #15]
    		break;
 80093a4:	e009      	b.n	80093ba <USER_ioctl+0x6a>

    	case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
    		*(WORD*)buff = 512;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093ac:	801a      	strh	r2, [r3, #0]
    		res = RES_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	73fb      	strb	r3, [r7, #15]
    		break;
 80093b2:	e003      	b.n	80093bc <USER_ioctl+0x6c>

    	default:
    		res = RES_PARERR;
 80093b4:	2304      	movs	r3, #4
 80093b6:	73fb      	strb	r3, [r7, #15]
 80093b8:	e000      	b.n	80093bc <USER_ioctl+0x6c>
    		break;
 80093ba:	bf00      	nop
    }

    SPI_Release();
 80093bc:	f7f9 f822 	bl	8002404 <SPI_Release>

    return res;
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
   // return res;
  /* USER CODE END IOCTL */
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20000009 	.word	0x20000009
 80093d0:	40020000 	.word	0x40020000

080093d4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80093d4:	b590      	push	{r4, r7, lr}
 80093d6:	b089      	sub	sp, #36	; 0x24
 80093d8:	af04      	add	r7, sp, #16
 80093da:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80093dc:	2301      	movs	r3, #1
 80093de:	2202      	movs	r2, #2
 80093e0:	2102      	movs	r1, #2
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fc66 	bl	8009cb4 <USBH_FindInterface>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	2bff      	cmp	r3, #255	; 0xff
 80093f0:	d002      	beq.n	80093f8 <USBH_CDC_InterfaceInit+0x24>
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d901      	bls.n	80093fc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80093f8:	2302      	movs	r3, #2
 80093fa:	e13d      	b.n	8009678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fc3b 	bl	8009c7c <USBH_SelectInterface>
 8009406:	4603      	mov	r3, r0
 8009408:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009410:	2302      	movs	r3, #2
 8009412:	e131      	b.n	8009678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800941a:	2050      	movs	r0, #80	; 0x50
 800941c:	f006 f980 	bl	800f720 <malloc>
 8009420:	4603      	mov	r3, r0
 8009422:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009434:	2302      	movs	r3, #2
 8009436:	e11f      	b.n	8009678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009438:	2250      	movs	r2, #80	; 0x50
 800943a:	2100      	movs	r1, #0
 800943c:	68b8      	ldr	r0, [r7, #8]
 800943e:	f006 f97f 	bl	800f740 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009442:	7bfb      	ldrb	r3, [r7, #15]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	211a      	movs	r1, #26
 8009448:	fb01 f303 	mul.w	r3, r1, r3
 800944c:	4413      	add	r3, r2
 800944e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	b25b      	sxtb	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	da15      	bge.n	8009486 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	211a      	movs	r1, #26
 8009460:	fb01 f303 	mul.w	r3, r1, r3
 8009464:	4413      	add	r3, r2
 8009466:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800946a:	781a      	ldrb	r2, [r3, #0]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	211a      	movs	r1, #26
 8009476:	fb01 f303 	mul.w	r3, r1, r3
 800947a:	4413      	add	r3, r2
 800947c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009480:	881a      	ldrh	r2, [r3, #0]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	785b      	ldrb	r3, [r3, #1]
 800948a:	4619      	mov	r1, r3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f001 ff2c 	bl	800b2ea <USBH_AllocPipe>
 8009492:	4603      	mov	r3, r0
 8009494:	461a      	mov	r2, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	7819      	ldrb	r1, [r3, #0]
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	7858      	ldrb	r0, [r3, #1]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	8952      	ldrh	r2, [r2, #10]
 80094b2:	9202      	str	r2, [sp, #8]
 80094b4:	2203      	movs	r2, #3
 80094b6:	9201      	str	r2, [sp, #4]
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	4623      	mov	r3, r4
 80094bc:	4602      	mov	r2, r0
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f001 fee4 	bl	800b28c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	2200      	movs	r2, #0
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f006 f879 	bl	800f5c4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80094d2:	2300      	movs	r3, #0
 80094d4:	2200      	movs	r2, #0
 80094d6:	210a      	movs	r1, #10
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fbeb 	bl	8009cb4 <USBH_FindInterface>
 80094de:	4603      	mov	r3, r0
 80094e0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	2bff      	cmp	r3, #255	; 0xff
 80094e6:	d002      	beq.n	80094ee <USBH_CDC_InterfaceInit+0x11a>
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d901      	bls.n	80094f2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80094ee:	2302      	movs	r3, #2
 80094f0:	e0c2      	b.n	8009678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	211a      	movs	r1, #26
 80094f8:	fb01 f303 	mul.w	r3, r1, r3
 80094fc:	4413      	add	r3, r2
 80094fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	b25b      	sxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	da16      	bge.n	8009538 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800950a:	7bfb      	ldrb	r3, [r7, #15]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	211a      	movs	r1, #26
 8009510:	fb01 f303 	mul.w	r3, r1, r3
 8009514:	4413      	add	r3, r2
 8009516:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800951a:	781a      	ldrb	r2, [r3, #0]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	211a      	movs	r1, #26
 8009526:	fb01 f303 	mul.w	r3, r1, r3
 800952a:	4413      	add	r3, r2
 800952c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009530:	881a      	ldrh	r2, [r3, #0]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	835a      	strh	r2, [r3, #26]
 8009536:	e015      	b.n	8009564 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	211a      	movs	r1, #26
 800953e:	fb01 f303 	mul.w	r3, r1, r3
 8009542:	4413      	add	r3, r2
 8009544:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009548:	781a      	ldrb	r2, [r3, #0]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	211a      	movs	r1, #26
 8009554:	fb01 f303 	mul.w	r3, r1, r3
 8009558:	4413      	add	r3, r2
 800955a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800955e:	881a      	ldrh	r2, [r3, #0]
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	211a      	movs	r1, #26
 800956a:	fb01 f303 	mul.w	r3, r1, r3
 800956e:	4413      	add	r3, r2
 8009570:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	b25b      	sxtb	r3, r3
 8009578:	2b00      	cmp	r3, #0
 800957a:	da16      	bge.n	80095aa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	211a      	movs	r1, #26
 8009582:	fb01 f303 	mul.w	r3, r1, r3
 8009586:	4413      	add	r3, r2
 8009588:	f203 3356 	addw	r3, r3, #854	; 0x356
 800958c:	781a      	ldrb	r2, [r3, #0]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	211a      	movs	r1, #26
 8009598:	fb01 f303 	mul.w	r3, r1, r3
 800959c:	4413      	add	r3, r2
 800959e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80095a2:	881a      	ldrh	r2, [r3, #0]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	835a      	strh	r2, [r3, #26]
 80095a8:	e015      	b.n	80095d6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	211a      	movs	r1, #26
 80095b0:	fb01 f303 	mul.w	r3, r1, r3
 80095b4:	4413      	add	r3, r2
 80095b6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80095ba:	781a      	ldrb	r2, [r3, #0]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	211a      	movs	r1, #26
 80095c6:	fb01 f303 	mul.w	r3, r1, r3
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80095d0:	881a      	ldrh	r2, [r3, #0]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	7b9b      	ldrb	r3, [r3, #14]
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f001 fe84 	bl	800b2ea <USBH_AllocPipe>
 80095e2:	4603      	mov	r3, r0
 80095e4:	461a      	mov	r2, r3
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	7bdb      	ldrb	r3, [r3, #15]
 80095ee:	4619      	mov	r1, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 fe7a 	bl	800b2ea <USBH_AllocPipe>
 80095f6:	4603      	mov	r3, r0
 80095f8:	461a      	mov	r2, r3
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	7b59      	ldrb	r1, [r3, #13]
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	7b98      	ldrb	r0, [r3, #14]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	8b12      	ldrh	r2, [r2, #24]
 8009616:	9202      	str	r2, [sp, #8]
 8009618:	2202      	movs	r2, #2
 800961a:	9201      	str	r2, [sp, #4]
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	4623      	mov	r3, r4
 8009620:	4602      	mov	r2, r0
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f001 fe32 	bl	800b28c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	7b19      	ldrb	r1, [r3, #12]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	7bd8      	ldrb	r0, [r3, #15]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	8b52      	ldrh	r2, [r2, #26]
 8009640:	9202      	str	r2, [sp, #8]
 8009642:	2202      	movs	r2, #2
 8009644:	9201      	str	r2, [sp, #4]
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	4623      	mov	r3, r4
 800964a:	4602      	mov	r2, r0
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f001 fe1d 	bl	800b28c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	7b5b      	ldrb	r3, [r3, #13]
 800965e:	2200      	movs	r2, #0
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f005 ffae 	bl	800f5c4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	7b1b      	ldrb	r3, [r3, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f005 ffa7 	bl	800f5c4 <USBH_LL_SetToggle>

  return USBH_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	bd90      	pop	{r4, r7, pc}

08009680 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800968e:	69db      	ldr	r3, [r3, #28]
 8009690:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00e      	beq.n	80096b8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	4619      	mov	r1, r3
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f001 fe12 	bl	800b2ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f001 fe3d 	bl	800b32c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	7b1b      	ldrb	r3, [r3, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00e      	beq.n	80096de <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	7b1b      	ldrb	r3, [r3, #12]
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f001 fdff 	bl	800b2ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	7b1b      	ldrb	r3, [r3, #12]
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f001 fe2a 	bl	800b32c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	7b5b      	ldrb	r3, [r3, #13]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00e      	beq.n	8009704 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	7b5b      	ldrb	r3, [r3, #13]
 80096ea:	4619      	mov	r1, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f001 fdec 	bl	800b2ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	7b5b      	ldrb	r3, [r3, #13]
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 fe17 	bl	800b32c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00b      	beq.n	8009728 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	4618      	mov	r0, r3
 800971a:	f006 f809 	bl	800f730 <free>
    phost->pActiveClass->pData = 0U;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009724:	2200      	movs	r2, #0
 8009726:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	3340      	adds	r3, #64	; 0x40
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f8b1 	bl	80098b2 <GetLineCoding>
 8009750:	4603      	mov	r3, r0
 8009752:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009754:	7afb      	ldrb	r3, [r7, #11]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d105      	bne.n	8009766 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009760:	2102      	movs	r1, #2
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009766:	7afb      	ldrb	r3, [r7, #11]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009778:	2301      	movs	r3, #1
 800977a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009790:	2b04      	cmp	r3, #4
 8009792:	d877      	bhi.n	8009884 <USBH_CDC_Process+0x114>
 8009794:	a201      	add	r2, pc, #4	; (adr r2, 800979c <USBH_CDC_Process+0x2c>)
 8009796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979a:	bf00      	nop
 800979c:	080097b1 	.word	0x080097b1
 80097a0:	080097b7 	.word	0x080097b7
 80097a4:	080097e7 	.word	0x080097e7
 80097a8:	0800985b 	.word	0x0800985b
 80097ac:	08009869 	.word	0x08009869
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]
      break;
 80097b4:	e06d      	b.n	8009892 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ba:	4619      	mov	r1, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f897 	bl	80098f0 <SetLineCoding>
 80097c2:	4603      	mov	r3, r0
 80097c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80097c6:	7bbb      	ldrb	r3, [r7, #14]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d104      	bne.n	80097d6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80097d4:	e058      	b.n	8009888 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80097d6:	7bbb      	ldrb	r3, [r7, #14]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d055      	beq.n	8009888 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2204      	movs	r2, #4
 80097e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80097e4:	e050      	b.n	8009888 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	3340      	adds	r3, #64	; 0x40
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f860 	bl	80098b2 <GetLineCoding>
 80097f2:	4603      	mov	r3, r0
 80097f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d126      	bne.n	800984a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800980e:	791b      	ldrb	r3, [r3, #4]
 8009810:	429a      	cmp	r2, r3
 8009812:	d13b      	bne.n	800988c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800981e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009820:	429a      	cmp	r2, r3
 8009822:	d133      	bne.n	800988c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800982e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009830:	429a      	cmp	r2, r3
 8009832:	d12b      	bne.n	800988c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800983c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800983e:	429a      	cmp	r2, r3
 8009840:	d124      	bne.n	800988c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f958 	bl	8009af8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009848:	e020      	b.n	800988c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800984a:	7bbb      	ldrb	r3, [r7, #14]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d01d      	beq.n	800988c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2204      	movs	r2, #4
 8009854:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009858:	e018      	b.n	800988c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f867 	bl	800992e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f8da 	bl	8009a1a <CDC_ProcessReception>
      break;
 8009866:	e014      	b.n	8009892 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009868:	2100      	movs	r1, #0
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 ffef 	bl	800a84e <USBH_ClrFeature>
 8009870:	4603      	mov	r3, r0
 8009872:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009874:	7bbb      	ldrb	r3, [r7, #14]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10a      	bne.n	8009890 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009882:	e005      	b.n	8009890 <USBH_CDC_Process+0x120>

    default:
      break;
 8009884:	bf00      	nop
 8009886:	e004      	b.n	8009892 <USBH_CDC_Process+0x122>
      break;
 8009888:	bf00      	nop
 800988a:	e002      	b.n	8009892 <USBH_CDC_Process+0x122>
      break;
 800988c:	bf00      	nop
 800988e:	e000      	b.n	8009892 <USBH_CDC_Process+0x122>
      break;
 8009890:	bf00      	nop

  }

  return status;
 8009892:	7bfb      	ldrb	r3, [r7, #15]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	22a1      	movs	r2, #161	; 0xa1
 80098c0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2221      	movs	r2, #33	; 0x21
 80098c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2207      	movs	r2, #7
 80098d8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2207      	movs	r2, #7
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f001 fa81 	bl	800ade8 <USBH_CtlReq>
 80098e6:	4603      	mov	r3, r0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2221      	movs	r2, #33	; 0x21
 80098fe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2220      	movs	r2, #32
 8009904:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2207      	movs	r2, #7
 8009916:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2207      	movs	r2, #7
 800991c:	4619      	mov	r1, r3
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f001 fa62 	bl	800ade8 <USBH_CtlReq>
 8009924:	4603      	mov	r3, r0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b086      	sub	sp, #24
 8009932:	af02      	add	r7, sp, #8
 8009934:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009940:	2300      	movs	r3, #0
 8009942:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800994a:	2b01      	cmp	r3, #1
 800994c:	d002      	beq.n	8009954 <CDC_ProcessTransmission+0x26>
 800994e:	2b02      	cmp	r3, #2
 8009950:	d023      	beq.n	800999a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009952:	e05e      	b.n	8009a12 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	8b12      	ldrh	r2, [r2, #24]
 800995c:	4293      	cmp	r3, r2
 800995e:	d90b      	bls.n	8009978 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	69d9      	ldr	r1, [r3, #28]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8b1a      	ldrh	r2, [r3, #24]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	7b5b      	ldrb	r3, [r3, #13]
 800996c:	2001      	movs	r0, #1
 800996e:	9000      	str	r0, [sp, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f001 fc48 	bl	800b206 <USBH_BulkSendData>
 8009976:	e00b      	b.n	8009990 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	7b5b      	ldrb	r3, [r3, #13]
 8009986:	2001      	movs	r0, #1
 8009988:	9000      	str	r0, [sp, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f001 fc3b 	bl	800b206 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009998:	e03b      	b.n	8009a12 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	7b5b      	ldrb	r3, [r3, #13]
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f005 fde5 	bl	800f570 <USBH_LL_GetURBState>
 80099a6:	4603      	mov	r3, r0
 80099a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80099aa:	7afb      	ldrb	r3, [r7, #11]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d128      	bne.n	8009a02 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	8b12      	ldrh	r2, [r2, #24]
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d90e      	bls.n	80099da <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	8b12      	ldrh	r2, [r2, #24]
 80099c4:	1a9a      	subs	r2, r3, r2
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	8b12      	ldrh	r2, [r2, #24]
 80099d2:	441a      	add	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	61da      	str	r2, [r3, #28]
 80099d8:	e002      	b.n	80099e0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d004      	beq.n	80099f2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80099f0:	e00e      	b.n	8009a10 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f868 	bl	8009ad0 <USBH_CDC_TransmitCallback>
      break;
 8009a00:	e006      	b.n	8009a10 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009a02:	7afb      	ldrb	r3, [r7, #11]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d103      	bne.n	8009a10 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009a10:	bf00      	nop
  }
}
 8009a12:	bf00      	nop
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b086      	sub	sp, #24
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	d002      	beq.n	8009a40 <CDC_ProcessReception+0x26>
 8009a3a:	2b04      	cmp	r3, #4
 8009a3c:	d00e      	beq.n	8009a5c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009a3e:	e043      	b.n	8009ac8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	6a19      	ldr	r1, [r3, #32]
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	8b5a      	ldrh	r2, [r3, #26]
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	7b1b      	ldrb	r3, [r3, #12]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 fbff 	bl	800b250 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2204      	movs	r2, #4
 8009a56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009a5a:	e035      	b.n	8009ac8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	7b1b      	ldrb	r3, [r3, #12]
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f005 fd84 	bl	800f570 <USBH_LL_GetURBState>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009a6c:	7cfb      	ldrb	r3, [r7, #19]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d129      	bne.n	8009ac6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	7b1b      	ldrb	r3, [r3, #12]
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f005 fce7 	bl	800f44c <USBH_LL_GetLastXferSize>
 8009a7e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d016      	beq.n	8009ab8 <CDC_ProcessReception+0x9e>
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	8b5b      	ldrh	r3, [r3, #26]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d910      	bls.n	8009ab8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	1ad2      	subs	r2, r2, r3
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	6a1a      	ldr	r2, [r3, #32]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	441a      	add	r2, r3
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2203      	movs	r2, #3
 8009ab2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009ab6:	e006      	b.n	8009ac6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f80f 	bl	8009ae4 <USBH_CDC_ReceiveCallback>
      break;
 8009ac6:	bf00      	nop
  }
}
 8009ac8:	bf00      	nop
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	4613      	mov	r3, r2
 8009b18:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009b20:	2302      	movs	r3, #2
 8009b22:	e029      	b.n	8009b78 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	79fa      	ldrb	r2, [r7, #7]
 8009b28:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f000 f81f 	bl	8009b80 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d003      	beq.n	8009b70 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f005 fbb7 	bl	800f2e4 <USBH_LL_Init>

  return USBH_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	e009      	b.n	8009ba6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	33e0      	adds	r3, #224	; 0xe0
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	60fb      	str	r3, [r7, #12]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2b0f      	cmp	r3, #15
 8009baa:	d9f2      	bls.n	8009b92 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	e009      	b.n	8009bc6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	60fb      	str	r3, [r7, #12]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bcc:	d3f1      	bcc.n	8009bb2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2240      	movs	r2, #64	; 0x40
 8009bf2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3714      	adds	r7, #20
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009c32:	2300      	movs	r3, #0
 8009c34:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d016      	beq.n	8009c6a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10e      	bne.n	8009c64 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c4c:	1c59      	adds	r1, r3, #1
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	33de      	adds	r3, #222	; 0xde
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	73fb      	strb	r3, [r7, #15]
 8009c62:	e004      	b.n	8009c6e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009c64:	2302      	movs	r3, #2
 8009c66:	73fb      	strb	r3, [r7, #15]
 8009c68:	e001      	b.n	8009c6e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	460b      	mov	r3, r1
 8009c86:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009c92:	78fa      	ldrb	r2, [r7, #3]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d204      	bcs.n	8009ca2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	78fa      	ldrb	r2, [r7, #3]
 8009c9c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009ca0:	e001      	b.n	8009ca6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b087      	sub	sp, #28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	4608      	mov	r0, r1
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	70fb      	strb	r3, [r7, #3]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	70bb      	strb	r3, [r7, #2]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009cdc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009cde:	e025      	b.n	8009d2c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
 8009ce2:	221a      	movs	r2, #26
 8009ce4:	fb02 f303 	mul.w	r3, r2, r3
 8009ce8:	3308      	adds	r3, #8
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	4413      	add	r3, r2
 8009cee:	3302      	adds	r3, #2
 8009cf0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	795b      	ldrb	r3, [r3, #5]
 8009cf6:	78fa      	ldrb	r2, [r7, #3]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d002      	beq.n	8009d02 <USBH_FindInterface+0x4e>
 8009cfc:	78fb      	ldrb	r3, [r7, #3]
 8009cfe:	2bff      	cmp	r3, #255	; 0xff
 8009d00:	d111      	bne.n	8009d26 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d06:	78ba      	ldrb	r2, [r7, #2]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d002      	beq.n	8009d12 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d0c:	78bb      	ldrb	r3, [r7, #2]
 8009d0e:	2bff      	cmp	r3, #255	; 0xff
 8009d10:	d109      	bne.n	8009d26 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d16:	787a      	ldrb	r2, [r7, #1]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d002      	beq.n	8009d22 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d1c:	787b      	ldrb	r3, [r7, #1]
 8009d1e:	2bff      	cmp	r3, #255	; 0xff
 8009d20:	d101      	bne.n	8009d26 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
 8009d24:	e006      	b.n	8009d34 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009d26:	7dfb      	ldrb	r3, [r7, #23]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d2c:	7dfb      	ldrb	r3, [r7, #23]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d9d6      	bls.n	8009ce0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009d32:	23ff      	movs	r3, #255	; 0xff
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	371c      	adds	r7, #28
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f005 fb07 	bl	800f35c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009d4e:	2101      	movs	r1, #1
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f005 fc20 	bl	800f596 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b088      	sub	sp, #32
 8009d64:	af04      	add	r7, sp, #16
 8009d66:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009d68:	2302      	movs	r3, #2
 8009d6a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d102      	bne.n	8009d82 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2203      	movs	r2, #3
 8009d80:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	2b0b      	cmp	r3, #11
 8009d8a:	f200 81be 	bhi.w	800a10a <USBH_Process+0x3aa>
 8009d8e:	a201      	add	r2, pc, #4	; (adr r2, 8009d94 <USBH_Process+0x34>)
 8009d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d94:	08009dc5 	.word	0x08009dc5
 8009d98:	08009df7 	.word	0x08009df7
 8009d9c:	08009e5f 	.word	0x08009e5f
 8009da0:	0800a0a5 	.word	0x0800a0a5
 8009da4:	0800a10b 	.word	0x0800a10b
 8009da8:	08009f03 	.word	0x08009f03
 8009dac:	0800a04b 	.word	0x0800a04b
 8009db0:	08009f39 	.word	0x08009f39
 8009db4:	08009f59 	.word	0x08009f59
 8009db8:	08009f79 	.word	0x08009f79
 8009dbc:	08009fbd 	.word	0x08009fbd
 8009dc0:	0800a08d 	.word	0x0800a08d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f000 819e 	beq.w	800a10e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009dd8:	20c8      	movs	r0, #200	; 0xc8
 8009dda:	f005 fc23 	bl	800f624 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f005 fb19 	bl	800f416 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009df4:	e18b      	b.n	800a10e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d107      	bne.n	8009e10 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e0e:	e18d      	b.n	800a12c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e1a:	d914      	bls.n	8009e46 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009e22:	3301      	adds	r3, #1
 8009e24:	b2da      	uxtb	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d903      	bls.n	8009e3e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	220d      	movs	r2, #13
 8009e3a:	701a      	strb	r2, [r3, #0]
      break;
 8009e3c:	e176      	b.n	800a12c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	701a      	strb	r2, [r3, #0]
      break;
 8009e44:	e172      	b.n	800a12c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009e4c:	f103 020a 	add.w	r2, r3, #10
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009e56:	200a      	movs	r0, #10
 8009e58:	f005 fbe4 	bl	800f624 <USBH_Delay>
      break;
 8009e5c:	e166      	b.n	800a12c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d005      	beq.n	8009e74 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e6e:	2104      	movs	r1, #4
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009e74:	2064      	movs	r0, #100	; 0x64
 8009e76:	f005 fbd5 	bl	800f624 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f005 faa4 	bl	800f3c8 <USBH_LL_GetSpeed>
 8009e80:	4603      	mov	r3, r0
 8009e82:	461a      	mov	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2205      	movs	r2, #5
 8009e8e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009e90:	2100      	movs	r1, #0
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f001 fa29 	bl	800b2ea <USBH_AllocPipe>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009ea0:	2180      	movs	r1, #128	; 0x80
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f001 fa21 	bl	800b2ea <USBH_AllocPipe>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	461a      	mov	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	7919      	ldrb	r1, [r3, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009ec4:	b292      	uxth	r2, r2
 8009ec6:	9202      	str	r2, [sp, #8]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	9201      	str	r2, [sp, #4]
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2280      	movs	r2, #128	; 0x80
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f001 f9da 	bl	800b28c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	7959      	ldrb	r1, [r3, #5]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009eec:	b292      	uxth	r2, r2
 8009eee:	9202      	str	r2, [sp, #8]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	9201      	str	r2, [sp, #4]
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2200      	movs	r2, #0
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f001 f9c6 	bl	800b28c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009f00:	e114      	b.n	800a12c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f918 	bl	800a138 <USBH_HandleEnum>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009f0c:	7bbb      	ldrb	r3, [r7, #14]
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f040 80fe 	bne.w	800a112 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d103      	bne.n	8009f30 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2208      	movs	r2, #8
 8009f2c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009f2e:	e0f0      	b.n	800a112 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2207      	movs	r2, #7
 8009f34:	701a      	strb	r2, [r3, #0]
      break;
 8009f36:	e0ec      	b.n	800a112 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f000 80e9 	beq.w	800a116 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2208      	movs	r2, #8
 8009f54:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009f56:	e0de      	b.n	800a116 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	4619      	mov	r1, r3
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fc2c 	bl	800a7c0 <USBH_SetCfg>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f040 80d5 	bne.w	800a11a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2209      	movs	r2, #9
 8009f74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009f76:	e0d0      	b.n	800a11a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009f7e:	f003 0320 	and.w	r3, r3, #32
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d016      	beq.n	8009fb4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009f86:	2101      	movs	r1, #1
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fc3c 	bl	800a806 <USBH_SetFeature>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009f92:	7bbb      	ldrb	r3, [r7, #14]
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d103      	bne.n	8009fa2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	220a      	movs	r2, #10
 8009f9e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009fa0:	e0bd      	b.n	800a11e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009fa2:	7bbb      	ldrb	r3, [r7, #14]
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	f040 80b9 	bne.w	800a11e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	220a      	movs	r2, #10
 8009fb0:	701a      	strb	r2, [r3, #0]
      break;
 8009fb2:	e0b4      	b.n	800a11e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	220a      	movs	r2, #10
 8009fb8:	701a      	strb	r2, [r3, #0]
      break;
 8009fba:	e0b0      	b.n	800a11e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f000 80ad 	beq.w	800a122 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	73fb      	strb	r3, [r7, #15]
 8009fd4:	e016      	b.n	800a004 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009fd6:	7bfa      	ldrb	r2, [r7, #15]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	32de      	adds	r2, #222	; 0xde
 8009fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe0:	791a      	ldrb	r2, [r3, #4]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d108      	bne.n	8009ffe <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009fec:	7bfa      	ldrb	r2, [r7, #15]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	32de      	adds	r2, #222	; 0xde
 8009ff2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009ffc:	e005      	b.n	800a00a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	3301      	adds	r3, #1
 800a002:	73fb      	strb	r3, [r7, #15]
 800a004:	7bfb      	ldrb	r3, [r7, #15]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d0e5      	beq.n	8009fd6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a010:	2b00      	cmp	r3, #0
 800a012:	d016      	beq.n	800a042 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	4798      	blx	r3
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d109      	bne.n	800a03a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2206      	movs	r2, #6
 800a02a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a032:	2103      	movs	r1, #3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a038:	e073      	b.n	800a122 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	220d      	movs	r2, #13
 800a03e:	701a      	strb	r2, [r3, #0]
      break;
 800a040:	e06f      	b.n	800a122 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	220d      	movs	r2, #13
 800a046:	701a      	strb	r2, [r3, #0]
      break;
 800a048:	e06b      	b.n	800a122 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a050:	2b00      	cmp	r3, #0
 800a052:	d017      	beq.n	800a084 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	4798      	blx	r3
 800a060:	4603      	mov	r3, r0
 800a062:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a064:	7bbb      	ldrb	r3, [r7, #14]
 800a066:	b2db      	uxtb	r3, r3
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d103      	bne.n	800a074 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	220b      	movs	r2, #11
 800a070:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a072:	e058      	b.n	800a126 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a074:	7bbb      	ldrb	r3, [r7, #14]
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d154      	bne.n	800a126 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	220d      	movs	r2, #13
 800a080:	701a      	strb	r2, [r3, #0]
      break;
 800a082:	e050      	b.n	800a126 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	220d      	movs	r2, #13
 800a088:	701a      	strb	r2, [r3, #0]
      break;
 800a08a:	e04c      	b.n	800a126 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a092:	2b00      	cmp	r3, #0
 800a094:	d049      	beq.n	800a12a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	4798      	blx	r3
      }
      break;
 800a0a2:	e042      	b.n	800a12a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7ff fd67 	bl	8009b80 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d009      	beq.n	800a0d0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d005      	beq.n	800a0e6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0e0:	2105      	movs	r1, #5
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d107      	bne.n	800a102 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7ff fe20 	bl	8009d40 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a100:	e014      	b.n	800a12c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f005 f92a 	bl	800f35c <USBH_LL_Start>
      break;
 800a108:	e010      	b.n	800a12c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a10a:	bf00      	nop
 800a10c:	e00e      	b.n	800a12c <USBH_Process+0x3cc>
      break;
 800a10e:	bf00      	nop
 800a110:	e00c      	b.n	800a12c <USBH_Process+0x3cc>
      break;
 800a112:	bf00      	nop
 800a114:	e00a      	b.n	800a12c <USBH_Process+0x3cc>
    break;
 800a116:	bf00      	nop
 800a118:	e008      	b.n	800a12c <USBH_Process+0x3cc>
      break;
 800a11a:	bf00      	nop
 800a11c:	e006      	b.n	800a12c <USBH_Process+0x3cc>
      break;
 800a11e:	bf00      	nop
 800a120:	e004      	b.n	800a12c <USBH_Process+0x3cc>
      break;
 800a122:	bf00      	nop
 800a124:	e002      	b.n	800a12c <USBH_Process+0x3cc>
      break;
 800a126:	bf00      	nop
 800a128:	e000      	b.n	800a12c <USBH_Process+0x3cc>
      break;
 800a12a:	bf00      	nop
  }
  return USBH_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop

0800a138 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af04      	add	r7, sp, #16
 800a13e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a140:	2301      	movs	r3, #1
 800a142:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a144:	2301      	movs	r3, #1
 800a146:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	785b      	ldrb	r3, [r3, #1]
 800a14c:	2b07      	cmp	r3, #7
 800a14e:	f200 81c1 	bhi.w	800a4d4 <USBH_HandleEnum+0x39c>
 800a152:	a201      	add	r2, pc, #4	; (adr r2, 800a158 <USBH_HandleEnum+0x20>)
 800a154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a158:	0800a179 	.word	0x0800a179
 800a15c:	0800a237 	.word	0x0800a237
 800a160:	0800a2a1 	.word	0x0800a2a1
 800a164:	0800a32f 	.word	0x0800a32f
 800a168:	0800a399 	.word	0x0800a399
 800a16c:	0800a409 	.word	0x0800a409
 800a170:	0800a44f 	.word	0x0800a44f
 800a174:	0800a495 	.word	0x0800a495
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a178:	2108      	movs	r1, #8
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fa50 	bl	800a620 <USBH_Get_DevDesc>
 800a180:	4603      	mov	r3, r0
 800a182:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a184:	7bbb      	ldrb	r3, [r7, #14]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d130      	bne.n	800a1ec <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	7919      	ldrb	r1, [r3, #4]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a1ae:	b292      	uxth	r2, r2
 800a1b0:	9202      	str	r2, [sp, #8]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	9201      	str	r2, [sp, #4]
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2280      	movs	r2, #128	; 0x80
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f001 f865 	bl	800b28c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	7959      	ldrb	r1, [r3, #5]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1d6:	b292      	uxth	r2, r2
 800a1d8:	9202      	str	r2, [sp, #8]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	9201      	str	r2, [sp, #4]
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 f851 	bl	800b28c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a1ea:	e175      	b.n	800a4d8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1ec:	7bbb      	ldrb	r3, [r7, #14]
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	f040 8172 	bne.w	800a4d8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d903      	bls.n	800a216 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	220d      	movs	r2, #13
 800a212:	701a      	strb	r2, [r3, #0]
      break;
 800a214:	e160      	b.n	800a4d8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	795b      	ldrb	r3, [r3, #5]
 800a21a:	4619      	mov	r1, r3
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f001 f885 	bl	800b32c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	791b      	ldrb	r3, [r3, #4]
 800a226:	4619      	mov	r1, r3
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f001 f87f 	bl	800b32c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	701a      	strb	r2, [r3, #0]
      break;
 800a234:	e150      	b.n	800a4d8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a236:	2112      	movs	r1, #18
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f9f1 	bl	800a620 <USBH_Get_DevDesc>
 800a23e:	4603      	mov	r3, r0
 800a240:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a242:	7bbb      	ldrb	r3, [r7, #14]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d103      	bne.n	800a250 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2202      	movs	r2, #2
 800a24c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a24e:	e145      	b.n	800a4dc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a250:	7bbb      	ldrb	r3, [r7, #14]
 800a252:	2b03      	cmp	r3, #3
 800a254:	f040 8142 	bne.w	800a4dc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a25e:	3301      	adds	r3, #1
 800a260:	b2da      	uxtb	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d903      	bls.n	800a27a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	220d      	movs	r2, #13
 800a276:	701a      	strb	r2, [r3, #0]
      break;
 800a278:	e130      	b.n	800a4dc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	795b      	ldrb	r3, [r3, #5]
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f001 f853 	bl	800b32c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	791b      	ldrb	r3, [r3, #4]
 800a28a:	4619      	mov	r1, r3
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f001 f84d 	bl	800b32c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	701a      	strb	r2, [r3, #0]
      break;
 800a29e:	e11d      	b.n	800a4dc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fa68 	bl	800a778 <USBH_SetAddress>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d132      	bne.n	800a318 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a2b2:	2002      	movs	r0, #2
 800a2b4:	f005 f9b6 	bl	800f624 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2203      	movs	r2, #3
 800a2c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	7919      	ldrb	r1, [r3, #4]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a2da:	b292      	uxth	r2, r2
 800a2dc:	9202      	str	r2, [sp, #8]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	9201      	str	r2, [sp, #4]
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2280      	movs	r2, #128	; 0x80
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 ffcf 	bl	800b28c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	7959      	ldrb	r1, [r3, #5]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a302:	b292      	uxth	r2, r2
 800a304:	9202      	str	r2, [sp, #8]
 800a306:	2200      	movs	r2, #0
 800a308:	9201      	str	r2, [sp, #4]
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	4603      	mov	r3, r0
 800a30e:	2200      	movs	r2, #0
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 ffbb 	bl	800b28c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a316:	e0e3      	b.n	800a4e0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a318:	7bbb      	ldrb	r3, [r7, #14]
 800a31a:	2b03      	cmp	r3, #3
 800a31c:	f040 80e0 	bne.w	800a4e0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	220d      	movs	r2, #13
 800a324:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	705a      	strb	r2, [r3, #1]
      break;
 800a32c:	e0d8      	b.n	800a4e0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a32e:	2109      	movs	r1, #9
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 f99d 	bl	800a670 <USBH_Get_CfgDesc>
 800a336:	4603      	mov	r3, r0
 800a338:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a33a:	7bbb      	ldrb	r3, [r7, #14]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d103      	bne.n	800a348 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2204      	movs	r2, #4
 800a344:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a346:	e0cd      	b.n	800a4e4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a348:	7bbb      	ldrb	r3, [r7, #14]
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	f040 80ca 	bne.w	800a4e4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a356:	3301      	adds	r3, #1
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a366:	2b03      	cmp	r3, #3
 800a368:	d903      	bls.n	800a372 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	220d      	movs	r2, #13
 800a36e:	701a      	strb	r2, [r3, #0]
      break;
 800a370:	e0b8      	b.n	800a4e4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	795b      	ldrb	r3, [r3, #5]
 800a376:	4619      	mov	r1, r3
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 ffd7 	bl	800b32c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	791b      	ldrb	r3, [r3, #4]
 800a382:	4619      	mov	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 ffd1 	bl	800b32c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	701a      	strb	r2, [r3, #0]
      break;
 800a396:	e0a5      	b.n	800a4e4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a39e:	4619      	mov	r1, r3
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f965 	bl	800a670 <USBH_Get_CfgDesc>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3aa:	7bbb      	ldrb	r3, [r7, #14]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d103      	bne.n	800a3b8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2205      	movs	r2, #5
 800a3b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a3b6:	e097      	b.n	800a4e8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3b8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	f040 8094 	bne.w	800a4e8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	b2da      	uxtb	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	d903      	bls.n	800a3e2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	220d      	movs	r2, #13
 800a3de:	701a      	strb	r2, [r3, #0]
      break;
 800a3e0:	e082      	b.n	800a4e8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	795b      	ldrb	r3, [r3, #5]
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 ff9f 	bl	800b32c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	791b      	ldrb	r3, [r3, #4]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 ff99 	bl	800b32c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
      break;
 800a406:	e06f      	b.n	800a4e8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d019      	beq.n	800a446 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a41e:	23ff      	movs	r3, #255	; 0xff
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f949 	bl	800a6b8 <USBH_Get_StringDesc>
 800a426:	4603      	mov	r3, r0
 800a428:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a42a:	7bbb      	ldrb	r3, [r7, #14]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d103      	bne.n	800a438 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2206      	movs	r2, #6
 800a434:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a436:	e059      	b.n	800a4ec <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a438:	7bbb      	ldrb	r3, [r7, #14]
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	d156      	bne.n	800a4ec <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2206      	movs	r2, #6
 800a442:	705a      	strb	r2, [r3, #1]
      break;
 800a444:	e052      	b.n	800a4ec <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2206      	movs	r2, #6
 800a44a:	705a      	strb	r2, [r3, #1]
      break;
 800a44c:	e04e      	b.n	800a4ec <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a454:	2b00      	cmp	r3, #0
 800a456:	d019      	beq.n	800a48c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a464:	23ff      	movs	r3, #255	; 0xff
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f926 	bl	800a6b8 <USBH_Get_StringDesc>
 800a46c:	4603      	mov	r3, r0
 800a46e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a470:	7bbb      	ldrb	r3, [r7, #14]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d103      	bne.n	800a47e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2207      	movs	r2, #7
 800a47a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a47c:	e038      	b.n	800a4f0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a47e:	7bbb      	ldrb	r3, [r7, #14]
 800a480:	2b03      	cmp	r3, #3
 800a482:	d135      	bne.n	800a4f0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2207      	movs	r2, #7
 800a488:	705a      	strb	r2, [r3, #1]
      break;
 800a48a:	e031      	b.n	800a4f0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2207      	movs	r2, #7
 800a490:	705a      	strb	r2, [r3, #1]
      break;
 800a492:	e02d      	b.n	800a4f0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d017      	beq.n	800a4ce <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a4aa:	23ff      	movs	r3, #255	; 0xff
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f903 	bl	800a6b8 <USBH_Get_StringDesc>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4b6:	7bbb      	ldrb	r3, [r7, #14]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d102      	bne.n	800a4c2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a4c0:	e018      	b.n	800a4f4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4c2:	7bbb      	ldrb	r3, [r7, #14]
 800a4c4:	2b03      	cmp	r3, #3
 800a4c6:	d115      	bne.n	800a4f4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a4cc:	e012      	b.n	800a4f4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a4d2:	e00f      	b.n	800a4f4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a4d4:	bf00      	nop
 800a4d6:	e00e      	b.n	800a4f6 <USBH_HandleEnum+0x3be>
      break;
 800a4d8:	bf00      	nop
 800a4da:	e00c      	b.n	800a4f6 <USBH_HandleEnum+0x3be>
      break;
 800a4dc:	bf00      	nop
 800a4de:	e00a      	b.n	800a4f6 <USBH_HandleEnum+0x3be>
      break;
 800a4e0:	bf00      	nop
 800a4e2:	e008      	b.n	800a4f6 <USBH_HandleEnum+0x3be>
      break;
 800a4e4:	bf00      	nop
 800a4e6:	e006      	b.n	800a4f6 <USBH_HandleEnum+0x3be>
      break;
 800a4e8:	bf00      	nop
 800a4ea:	e004      	b.n	800a4f6 <USBH_HandleEnum+0x3be>
      break;
 800a4ec:	bf00      	nop
 800a4ee:	e002      	b.n	800a4f6 <USBH_HandleEnum+0x3be>
      break;
 800a4f0:	bf00      	nop
 800a4f2:	e000      	b.n	800a4f6 <USBH_HandleEnum+0x3be>
      break;
 800a4f4:	bf00      	nop
  }
  return Status;
 800a4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a512:	bf00      	nop
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b082      	sub	sp, #8
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a52c:	1c5a      	adds	r2, r3, #1
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 f804 	bl	800a542 <USBH_HandleSof>
}
 800a53a:	bf00      	nop
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b082      	sub	sp, #8
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b0b      	cmp	r3, #11
 800a552:	d10a      	bne.n	800a56a <USBH_HandleSof+0x28>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d005      	beq.n	800a56a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	4798      	blx	r3
  }
}
 800a56a:	bf00      	nop
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a572:	b480      	push	{r7}
 800a574:	b083      	sub	sp, #12
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a582:	bf00      	nop
}
 800a584:	370c      	adds	r7, #12
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a58e:	b480      	push	{r7}
 800a590:	b083      	sub	sp, #12
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a59e:	bf00      	nop
}
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b083      	sub	sp, #12
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f004 feca 	bl	800f392 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	791b      	ldrb	r3, [r3, #4]
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fe91 	bl	800b32c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	795b      	ldrb	r3, [r3, #5]
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fe8b 	bl	800b32c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af02      	add	r7, sp, #8
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	460b      	mov	r3, r1
 800a62a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a632:	78fb      	ldrb	r3, [r7, #3]
 800a634:	b29b      	uxth	r3, r3
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	4613      	mov	r3, r2
 800a63a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a63e:	2100      	movs	r1, #0
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f864 	bl	800a70e <USBH_GetDescriptor>
 800a646:	4603      	mov	r3, r0
 800a648:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10a      	bne.n	800a666 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a65c:	78fa      	ldrb	r2, [r7, #3]
 800a65e:	b292      	uxth	r2, r2
 800a660:	4619      	mov	r1, r3
 800a662:	f000 f918 	bl	800a896 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a666:	7bfb      	ldrb	r3, [r7, #15]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af02      	add	r7, sp, #8
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	331c      	adds	r3, #28
 800a680:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a682:	887b      	ldrh	r3, [r7, #2]
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a68c:	2100      	movs	r1, #0
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f83d 	bl	800a70e <USBH_GetDescriptor>
 800a694:	4603      	mov	r3, r0
 800a696:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a698:	7bfb      	ldrb	r3, [r7, #15]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d107      	bne.n	800a6ae <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a69e:	887b      	ldrh	r3, [r7, #2]
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	68b9      	ldr	r1, [r7, #8]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 f987 	bl	800a9b8 <USBH_ParseCfgDesc>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	607a      	str	r2, [r7, #4]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	72fb      	strb	r3, [r7, #11]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a6cc:	7afb      	ldrb	r3, [r7, #11]
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a6d4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a6dc:	893b      	ldrh	r3, [r7, #8]
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f000 f812 	bl	800a70e <USBH_GetDescriptor>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a6ee:	7dfb      	ldrb	r3, [r7, #23]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d107      	bne.n	800a704 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a6fa:	893a      	ldrh	r2, [r7, #8]
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 fb24 	bl	800ad4c <USBH_ParseStringDesc>
  }

  return status;
 800a704:	7dfb      	ldrb	r3, [r7, #23]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	60f8      	str	r0, [r7, #12]
 800a716:	607b      	str	r3, [r7, #4]
 800a718:	460b      	mov	r3, r1
 800a71a:	72fb      	strb	r3, [r7, #11]
 800a71c:	4613      	mov	r3, r2
 800a71e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	789b      	ldrb	r3, [r3, #2]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d11c      	bne.n	800a762 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a728:	7afb      	ldrb	r3, [r7, #11]
 800a72a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a72e:	b2da      	uxtb	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2206      	movs	r2, #6
 800a738:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	893a      	ldrh	r2, [r7, #8]
 800a73e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a740:	893b      	ldrh	r3, [r7, #8]
 800a742:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a74a:	d104      	bne.n	800a756 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f240 4209 	movw	r2, #1033	; 0x409
 800a752:	829a      	strh	r2, [r3, #20]
 800a754:	e002      	b.n	800a75c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	8b3a      	ldrh	r2, [r7, #24]
 800a760:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a762:	8b3b      	ldrh	r3, [r7, #24]
 800a764:	461a      	mov	r2, r3
 800a766:	6879      	ldr	r1, [r7, #4]
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f000 fb3d 	bl	800ade8 <USBH_CtlReq>
 800a76e:	4603      	mov	r3, r0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	460b      	mov	r3, r1
 800a782:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	789b      	ldrb	r3, [r3, #2]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d10f      	bne.n	800a7ac <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2205      	movs	r2, #5
 800a796:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a798:	78fb      	ldrb	r3, [r7, #3]
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 fb19 	bl	800ade8 <USBH_CtlReq>
 800a7b6:	4603      	mov	r3, r0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3708      	adds	r7, #8
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	789b      	ldrb	r3, [r3, #2]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d10e      	bne.n	800a7f2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2209      	movs	r2, #9
 800a7de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	887a      	ldrh	r2, [r7, #2]
 800a7e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 faf6 	bl	800ade8 <USBH_CtlReq>
 800a7fc:	4603      	mov	r3, r0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b082      	sub	sp, #8
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	460b      	mov	r3, r1
 800a810:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	789b      	ldrb	r3, [r3, #2]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d10f      	bne.n	800a83a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2203      	movs	r2, #3
 800a824:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a826:	78fb      	ldrb	r3, [r7, #3]
 800a828:	b29a      	uxth	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a83a:	2200      	movs	r2, #0
 800a83c:	2100      	movs	r1, #0
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fad2 	bl	800ade8 <USBH_CtlReq>
 800a844:	4603      	mov	r3, r0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3708      	adds	r7, #8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b082      	sub	sp, #8
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	460b      	mov	r3, r1
 800a858:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	789b      	ldrb	r3, [r3, #2]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d10f      	bne.n	800a882 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2202      	movs	r2, #2
 800a866:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a874:	78fb      	ldrb	r3, [r7, #3]
 800a876:	b29a      	uxth	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a882:	2200      	movs	r2, #0
 800a884:	2100      	movs	r1, #0
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 faae 	bl	800ade8 <USBH_CtlReq>
 800a88c:	4603      	mov	r3, r0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a896:	b480      	push	{r7}
 800a898:	b085      	sub	sp, #20
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	60b9      	str	r1, [r7, #8]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	781a      	ldrb	r2, [r3, #0]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	785a      	ldrb	r2, [r3, #1]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	3302      	adds	r3, #2
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	3303      	adds	r3, #3
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	021b      	lsls	r3, r3, #8
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	791a      	ldrb	r2, [r3, #4]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	795a      	ldrb	r2, [r3, #5]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	799a      	ldrb	r2, [r3, #6]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	79da      	ldrb	r2, [r3, #7]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	79db      	ldrb	r3, [r3, #7]
 800a8f4:	2b20      	cmp	r3, #32
 800a8f6:	dc11      	bgt.n	800a91c <USBH_ParseDevDesc+0x86>
 800a8f8:	2b08      	cmp	r3, #8
 800a8fa:	db16      	blt.n	800a92a <USBH_ParseDevDesc+0x94>
 800a8fc:	3b08      	subs	r3, #8
 800a8fe:	2201      	movs	r2, #1
 800a900:	fa02 f303 	lsl.w	r3, r2, r3
 800a904:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	bf14      	ite	ne
 800a910:	2301      	movne	r3, #1
 800a912:	2300      	moveq	r3, #0
 800a914:	b2db      	uxtb	r3, r3
 800a916:	2b00      	cmp	r3, #0
 800a918:	d102      	bne.n	800a920 <USBH_ParseDevDesc+0x8a>
 800a91a:	e006      	b.n	800a92a <USBH_ParseDevDesc+0x94>
 800a91c:	2b40      	cmp	r3, #64	; 0x40
 800a91e:	d104      	bne.n	800a92a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	79da      	ldrb	r2, [r3, #7]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	71da      	strb	r2, [r3, #7]
      break;
 800a928:	e003      	b.n	800a932 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2240      	movs	r2, #64	; 0x40
 800a92e:	71da      	strb	r2, [r3, #7]
      break;
 800a930:	bf00      	nop
  }

  if (length > 8U)
 800a932:	88fb      	ldrh	r3, [r7, #6]
 800a934:	2b08      	cmp	r3, #8
 800a936:	d939      	bls.n	800a9ac <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	3308      	adds	r3, #8
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	b29a      	uxth	r2, r3
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	3309      	adds	r3, #9
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	b29b      	uxth	r3, r3
 800a948:	021b      	lsls	r3, r3, #8
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	4313      	orrs	r3, r2
 800a94e:	b29a      	uxth	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	330a      	adds	r3, #10
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	330b      	adds	r3, #11
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	b29b      	uxth	r3, r3
 800a964:	021b      	lsls	r3, r3, #8
 800a966:	b29b      	uxth	r3, r3
 800a968:	4313      	orrs	r3, r2
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	330c      	adds	r3, #12
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	b29a      	uxth	r2, r3
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	330d      	adds	r3, #13
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	b29b      	uxth	r3, r3
 800a980:	021b      	lsls	r3, r3, #8
 800a982:	b29b      	uxth	r3, r3
 800a984:	4313      	orrs	r3, r2
 800a986:	b29a      	uxth	r2, r3
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	7b9a      	ldrb	r2, [r3, #14]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	7bda      	ldrb	r2, [r3, #15]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	7c1a      	ldrb	r2, [r3, #16]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	7c5a      	ldrb	r2, [r3, #17]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	745a      	strb	r2, [r3, #17]
  }
}
 800a9ac:	bf00      	nop
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08c      	sub	sp, #48	; 0x30
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a9cc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	781a      	ldrb	r2, [r3, #0]
 800a9ec:	6a3b      	ldr	r3, [r7, #32]
 800a9ee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	785a      	ldrb	r2, [r3, #1]
 800a9f4:	6a3b      	ldr	r3, [r7, #32]
 800a9f6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	3302      	adds	r3, #2
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	3303      	adds	r3, #3
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	021b      	lsls	r3, r3, #8
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa14:	bf28      	it	cs
 800aa16:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	791a      	ldrb	r2, [r3, #4]
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	795a      	ldrb	r2, [r3, #5]
 800aa2c:	6a3b      	ldr	r3, [r7, #32]
 800aa2e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	799a      	ldrb	r2, [r3, #6]
 800aa34:	6a3b      	ldr	r3, [r7, #32]
 800aa36:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	79da      	ldrb	r2, [r3, #7]
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	7a1a      	ldrb	r2, [r3, #8]
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800aa48:	6a3b      	ldr	r3, [r7, #32]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	2b09      	cmp	r3, #9
 800aa4e:	d002      	beq.n	800aa56 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800aa50:	6a3b      	ldr	r3, [r7, #32]
 800aa52:	2209      	movs	r2, #9
 800aa54:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800aa56:	88fb      	ldrh	r3, [r7, #6]
 800aa58:	2b09      	cmp	r3, #9
 800aa5a:	f240 809d 	bls.w	800ab98 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800aa5e:	2309      	movs	r3, #9
 800aa60:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800aa62:	2300      	movs	r3, #0
 800aa64:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aa66:	e081      	b.n	800ab6c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aa68:	f107 0316 	add.w	r3, r7, #22
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa70:	f000 f99f 	bl	800adb2 <USBH_GetNextDesc>
 800aa74:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800aa76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa78:	785b      	ldrb	r3, [r3, #1]
 800aa7a:	2b04      	cmp	r3, #4
 800aa7c:	d176      	bne.n	800ab6c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800aa7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	2b09      	cmp	r3, #9
 800aa84:	d002      	beq.n	800aa8c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800aa86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa88:	2209      	movs	r2, #9
 800aa8a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800aa8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa90:	221a      	movs	r2, #26
 800aa92:	fb02 f303 	mul.w	r3, r2, r3
 800aa96:	3308      	adds	r3, #8
 800aa98:	6a3a      	ldr	r2, [r7, #32]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	3302      	adds	r3, #2
 800aa9e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aaa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aaa2:	69f8      	ldr	r0, [r7, #28]
 800aaa4:	f000 f87e 	bl	800aba4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800aaae:	2300      	movs	r3, #0
 800aab0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aab2:	e043      	b.n	800ab3c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aab4:	f107 0316 	add.w	r3, r7, #22
 800aab8:	4619      	mov	r1, r3
 800aaba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aabc:	f000 f979 	bl	800adb2 <USBH_GetNextDesc>
 800aac0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac4:	785b      	ldrb	r3, [r3, #1]
 800aac6:	2b05      	cmp	r3, #5
 800aac8:	d138      	bne.n	800ab3c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	795b      	ldrb	r3, [r3, #5]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d10f      	bne.n	800aaf2 <USBH_ParseCfgDesc+0x13a>
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	799b      	ldrb	r3, [r3, #6]
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d10b      	bne.n	800aaf2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	79db      	ldrb	r3, [r3, #7]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10f      	bne.n	800ab02 <USBH_ParseCfgDesc+0x14a>
 800aae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	2b09      	cmp	r3, #9
 800aae8:	d00b      	beq.n	800ab02 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800aaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaec:	2209      	movs	r2, #9
 800aaee:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aaf0:	e007      	b.n	800ab02 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800aaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	2b07      	cmp	r3, #7
 800aaf8:	d004      	beq.n	800ab04 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafc:	2207      	movs	r2, #7
 800aafe:	701a      	strb	r2, [r3, #0]
 800ab00:	e000      	b.n	800ab04 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ab02:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ab04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ab0c:	3201      	adds	r2, #1
 800ab0e:	00d2      	lsls	r2, r2, #3
 800ab10:	211a      	movs	r1, #26
 800ab12:	fb01 f303 	mul.w	r3, r1, r3
 800ab16:	4413      	add	r3, r2
 800ab18:	3308      	adds	r3, #8
 800ab1a:	6a3a      	ldr	r2, [r7, #32]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	3304      	adds	r3, #4
 800ab20:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ab22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab24:	69b9      	ldr	r1, [r7, #24]
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f000 f86b 	bl	800ac02 <USBH_ParseEPDesc>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ab32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ab36:	3301      	adds	r3, #1
 800ab38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	791b      	ldrb	r3, [r3, #4]
 800ab40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d204      	bcs.n	800ab52 <USBH_ParseCfgDesc+0x19a>
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	885a      	ldrh	r2, [r3, #2]
 800ab4c:	8afb      	ldrh	r3, [r7, #22]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d8b0      	bhi.n	800aab4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	791b      	ldrb	r3, [r3, #4]
 800ab56:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d201      	bcs.n	800ab62 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	e01c      	b.n	800ab9c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800ab62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab66:	3301      	adds	r3, #1
 800ab68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ab6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d805      	bhi.n	800ab80 <USBH_ParseCfgDesc+0x1c8>
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	885a      	ldrh	r2, [r3, #2]
 800ab78:	8afb      	ldrh	r3, [r7, #22]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	f63f af74 	bhi.w	800aa68 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	791b      	ldrb	r3, [r3, #4]
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	bf28      	it	cs
 800ab88:	2302      	movcs	r3, #2
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d201      	bcs.n	800ab98 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800ab94:	2303      	movs	r3, #3
 800ab96:	e001      	b.n	800ab9c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800ab98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3730      	adds	r7, #48	; 0x30
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	781a      	ldrb	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	785a      	ldrb	r2, [r3, #1]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	789a      	ldrb	r2, [r3, #2]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	78da      	ldrb	r2, [r3, #3]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	791a      	ldrb	r2, [r3, #4]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	795a      	ldrb	r2, [r3, #5]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	799a      	ldrb	r2, [r3, #6]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	79da      	ldrb	r2, [r3, #7]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	7a1a      	ldrb	r2, [r3, #8]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	721a      	strb	r2, [r3, #8]
}
 800abf6:	bf00      	nop
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800ac02:	b480      	push	{r7}
 800ac04:	b087      	sub	sp, #28
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	60f8      	str	r0, [r7, #12]
 800ac0a:	60b9      	str	r1, [r7, #8]
 800ac0c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	781a      	ldrb	r2, [r3, #0]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	785a      	ldrb	r2, [r3, #1]
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	789a      	ldrb	r2, [r3, #2]
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	78da      	ldrb	r2, [r3, #3]
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	3304      	adds	r3, #4
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	3305      	adds	r3, #5
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	021b      	lsls	r3, r3, #8
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	4313      	orrs	r3, r2
 800ac48:	b29a      	uxth	r2, r3
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	799a      	ldrb	r2, [r3, #6]
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	889b      	ldrh	r3, [r3, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d102      	bne.n	800ac64 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	75fb      	strb	r3, [r7, #23]
 800ac62:	e033      	b.n	800accc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	889b      	ldrh	r3, [r3, #4]
 800ac68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ac6c:	f023 0307 	bic.w	r3, r3, #7
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	889b      	ldrh	r3, [r3, #4]
 800ac7a:	b21a      	sxth	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3304      	adds	r3, #4
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	b299      	uxth	r1, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	3305      	adds	r3, #5
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	021b      	lsls	r3, r3, #8
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	430b      	orrs	r3, r1
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d110      	bne.n	800acbe <USBH_ParseEPDesc+0xbc>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	3304      	adds	r3, #4
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	b299      	uxth	r1, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3305      	adds	r3, #5
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	b29b      	uxth	r3, r3
 800acac:	021b      	lsls	r3, r3, #8
 800acae:	b29b      	uxth	r3, r3
 800acb0:	430b      	orrs	r3, r1
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	b21b      	sxth	r3, r3
 800acb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acba:	b21b      	sxth	r3, r3
 800acbc:	e001      	b.n	800acc2 <USBH_ParseEPDesc+0xc0>
 800acbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acc2:	4313      	orrs	r3, r2
 800acc4:	b21b      	sxth	r3, r3
 800acc6:	b29a      	uxth	r2, r3
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d116      	bne.n	800ad04 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	78db      	ldrb	r3, [r3, #3]
 800acda:	f003 0303 	and.w	r3, r3, #3
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d005      	beq.n	800acee <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	78db      	ldrb	r3, [r3, #3]
 800ace6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800acea:	2b03      	cmp	r3, #3
 800acec:	d127      	bne.n	800ad3e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	799b      	ldrb	r3, [r3, #6]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d003      	beq.n	800acfe <USBH_ParseEPDesc+0xfc>
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	799b      	ldrb	r3, [r3, #6]
 800acfa:	2b10      	cmp	r3, #16
 800acfc:	d91f      	bls.n	800ad3e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800acfe:	2303      	movs	r3, #3
 800ad00:	75fb      	strb	r3, [r7, #23]
 800ad02:	e01c      	b.n	800ad3e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	78db      	ldrb	r3, [r3, #3]
 800ad08:	f003 0303 	and.w	r3, r3, #3
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d10a      	bne.n	800ad26 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	799b      	ldrb	r3, [r3, #6]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d003      	beq.n	800ad20 <USBH_ParseEPDesc+0x11e>
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	799b      	ldrb	r3, [r3, #6]
 800ad1c:	2b10      	cmp	r3, #16
 800ad1e:	d90e      	bls.n	800ad3e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ad20:	2303      	movs	r3, #3
 800ad22:	75fb      	strb	r3, [r7, #23]
 800ad24:	e00b      	b.n	800ad3e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	78db      	ldrb	r3, [r3, #3]
 800ad2a:	f003 0303 	and.w	r3, r3, #3
 800ad2e:	2b03      	cmp	r3, #3
 800ad30:	d105      	bne.n	800ad3e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	799b      	ldrb	r3, [r3, #6]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d101      	bne.n	800ad3e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800ad3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	371c      	adds	r7, #28
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	4613      	mov	r3, r2
 800ad58:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	2b03      	cmp	r3, #3
 800ad62:	d120      	bne.n	800ada6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	1e9a      	subs	r2, r3, #2
 800ad6a:	88fb      	ldrh	r3, [r7, #6]
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	bf28      	it	cs
 800ad70:	4613      	movcs	r3, r2
 800ad72:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3302      	adds	r3, #2
 800ad78:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	82fb      	strh	r3, [r7, #22]
 800ad7e:	e00b      	b.n	800ad98 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ad80:	8afb      	ldrh	r3, [r7, #22]
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	4413      	add	r3, r2
 800ad86:	781a      	ldrb	r2, [r3, #0]
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ad92:	8afb      	ldrh	r3, [r7, #22]
 800ad94:	3302      	adds	r3, #2
 800ad96:	82fb      	strh	r3, [r7, #22]
 800ad98:	8afa      	ldrh	r2, [r7, #22]
 800ad9a:	8abb      	ldrh	r3, [r7, #20]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d3ef      	bcc.n	800ad80 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2200      	movs	r2, #0
 800ada4:	701a      	strb	r2, [r3, #0]
  }
}
 800ada6:	bf00      	nop
 800ada8:	371c      	adds	r7, #28
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b085      	sub	sp, #20
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	881a      	ldrh	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	4413      	add	r3, r2
 800adc8:	b29a      	uxth	r2, r3
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4413      	add	r3, r2
 800add8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800adda:	68fb      	ldr	r3, [r7, #12]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3714      	adds	r7, #20
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	4613      	mov	r3, r2
 800adf4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800adf6:	2301      	movs	r3, #1
 800adf8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	789b      	ldrb	r3, [r3, #2]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d002      	beq.n	800ae08 <USBH_CtlReq+0x20>
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d00f      	beq.n	800ae26 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ae06:	e027      	b.n	800ae58 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	88fa      	ldrh	r2, [r7, #6]
 800ae12:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2201      	movs	r2, #1
 800ae18:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2202      	movs	r2, #2
 800ae1e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ae20:	2301      	movs	r3, #1
 800ae22:	75fb      	strb	r3, [r7, #23]
      break;
 800ae24:	e018      	b.n	800ae58 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f000 f81c 	bl	800ae64 <USBH_HandleControl>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ae30:	7dfb      	ldrb	r3, [r7, #23]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d002      	beq.n	800ae3c <USBH_CtlReq+0x54>
 800ae36:	7dfb      	ldrb	r3, [r7, #23]
 800ae38:	2b03      	cmp	r3, #3
 800ae3a:	d106      	bne.n	800ae4a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	761a      	strb	r2, [r3, #24]
      break;
 800ae48:	e005      	b.n	800ae56 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ae4a:	7dfb      	ldrb	r3, [r7, #23]
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	d102      	bne.n	800ae56 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2201      	movs	r2, #1
 800ae54:	709a      	strb	r2, [r3, #2]
      break;
 800ae56:	bf00      	nop
  }
  return status;
 800ae58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3718      	adds	r7, #24
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
	...

0800ae64 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af02      	add	r7, sp, #8
 800ae6a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ae70:	2300      	movs	r3, #0
 800ae72:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	7e1b      	ldrb	r3, [r3, #24]
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	2b0a      	cmp	r3, #10
 800ae7c:	f200 8156 	bhi.w	800b12c <USBH_HandleControl+0x2c8>
 800ae80:	a201      	add	r2, pc, #4	; (adr r2, 800ae88 <USBH_HandleControl+0x24>)
 800ae82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae86:	bf00      	nop
 800ae88:	0800aeb5 	.word	0x0800aeb5
 800ae8c:	0800aecf 	.word	0x0800aecf
 800ae90:	0800af39 	.word	0x0800af39
 800ae94:	0800af5f 	.word	0x0800af5f
 800ae98:	0800af97 	.word	0x0800af97
 800ae9c:	0800afc1 	.word	0x0800afc1
 800aea0:	0800b013 	.word	0x0800b013
 800aea4:	0800b035 	.word	0x0800b035
 800aea8:	0800b071 	.word	0x0800b071
 800aeac:	0800b097 	.word	0x0800b097
 800aeb0:	0800b0d5 	.word	0x0800b0d5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f103 0110 	add.w	r1, r3, #16
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	795b      	ldrb	r3, [r3, #5]
 800aebe:	461a      	mov	r2, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f943 	bl	800b14c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2202      	movs	r2, #2
 800aeca:	761a      	strb	r2, [r3, #24]
      break;
 800aecc:	e139      	b.n	800b142 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	795b      	ldrb	r3, [r3, #5]
 800aed2:	4619      	mov	r1, r3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f004 fb4b 	bl	800f570 <USBH_LL_GetURBState>
 800aeda:	4603      	mov	r3, r0
 800aedc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800aede:	7bbb      	ldrb	r3, [r7, #14]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d11e      	bne.n	800af22 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	7c1b      	ldrb	r3, [r3, #16]
 800aee8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aeec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	8adb      	ldrh	r3, [r3, #22]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00a      	beq.n	800af0c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800aef6:	7b7b      	ldrb	r3, [r7, #13]
 800aef8:	2b80      	cmp	r3, #128	; 0x80
 800aefa:	d103      	bne.n	800af04 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2203      	movs	r2, #3
 800af00:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800af02:	e115      	b.n	800b130 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2205      	movs	r2, #5
 800af08:	761a      	strb	r2, [r3, #24]
      break;
 800af0a:	e111      	b.n	800b130 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800af0c:	7b7b      	ldrb	r3, [r7, #13]
 800af0e:	2b80      	cmp	r3, #128	; 0x80
 800af10:	d103      	bne.n	800af1a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2209      	movs	r2, #9
 800af16:	761a      	strb	r2, [r3, #24]
      break;
 800af18:	e10a      	b.n	800b130 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2207      	movs	r2, #7
 800af1e:	761a      	strb	r2, [r3, #24]
      break;
 800af20:	e106      	b.n	800b130 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800af22:	7bbb      	ldrb	r3, [r7, #14]
 800af24:	2b04      	cmp	r3, #4
 800af26:	d003      	beq.n	800af30 <USBH_HandleControl+0xcc>
 800af28:	7bbb      	ldrb	r3, [r7, #14]
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	f040 8100 	bne.w	800b130 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	220b      	movs	r2, #11
 800af34:	761a      	strb	r2, [r3, #24]
      break;
 800af36:	e0fb      	b.n	800b130 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af3e:	b29a      	uxth	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6899      	ldr	r1, [r3, #8]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	899a      	ldrh	r2, [r3, #12]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	791b      	ldrb	r3, [r3, #4]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f93a 	bl	800b1ca <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2204      	movs	r2, #4
 800af5a:	761a      	strb	r2, [r3, #24]
      break;
 800af5c:	e0f1      	b.n	800b142 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	791b      	ldrb	r3, [r3, #4]
 800af62:	4619      	mov	r1, r3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f004 fb03 	bl	800f570 <USBH_LL_GetURBState>
 800af6a:	4603      	mov	r3, r0
 800af6c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800af6e:	7bbb      	ldrb	r3, [r7, #14]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d102      	bne.n	800af7a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2209      	movs	r2, #9
 800af78:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	2b05      	cmp	r3, #5
 800af7e:	d102      	bne.n	800af86 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800af80:	2303      	movs	r3, #3
 800af82:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800af84:	e0d6      	b.n	800b134 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800af86:	7bbb      	ldrb	r3, [r7, #14]
 800af88:	2b04      	cmp	r3, #4
 800af8a:	f040 80d3 	bne.w	800b134 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	220b      	movs	r2, #11
 800af92:	761a      	strb	r2, [r3, #24]
      break;
 800af94:	e0ce      	b.n	800b134 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6899      	ldr	r1, [r3, #8]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	899a      	ldrh	r2, [r3, #12]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	795b      	ldrb	r3, [r3, #5]
 800afa2:	2001      	movs	r0, #1
 800afa4:	9000      	str	r0, [sp, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f8ea 	bl	800b180 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800afb2:	b29a      	uxth	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2206      	movs	r2, #6
 800afbc:	761a      	strb	r2, [r3, #24]
      break;
 800afbe:	e0c0      	b.n	800b142 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	795b      	ldrb	r3, [r3, #5]
 800afc4:	4619      	mov	r1, r3
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f004 fad2 	bl	800f570 <USBH_LL_GetURBState>
 800afcc:	4603      	mov	r3, r0
 800afce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800afd0:	7bbb      	ldrb	r3, [r7, #14]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d103      	bne.n	800afde <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2207      	movs	r2, #7
 800afda:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800afdc:	e0ac      	b.n	800b138 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800afde:	7bbb      	ldrb	r3, [r7, #14]
 800afe0:	2b05      	cmp	r3, #5
 800afe2:	d105      	bne.n	800aff0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	220c      	movs	r2, #12
 800afe8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800afea:	2303      	movs	r3, #3
 800afec:	73fb      	strb	r3, [r7, #15]
      break;
 800afee:	e0a3      	b.n	800b138 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	d103      	bne.n	800affe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2205      	movs	r2, #5
 800affa:	761a      	strb	r2, [r3, #24]
      break;
 800affc:	e09c      	b.n	800b138 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800affe:	7bbb      	ldrb	r3, [r7, #14]
 800b000:	2b04      	cmp	r3, #4
 800b002:	f040 8099 	bne.w	800b138 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	220b      	movs	r2, #11
 800b00a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b00c:	2302      	movs	r3, #2
 800b00e:	73fb      	strb	r3, [r7, #15]
      break;
 800b010:	e092      	b.n	800b138 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	791b      	ldrb	r3, [r3, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	2100      	movs	r1, #0
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f8d5 	bl	800b1ca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b026:	b29a      	uxth	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2208      	movs	r2, #8
 800b030:	761a      	strb	r2, [r3, #24]

      break;
 800b032:	e086      	b.n	800b142 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	791b      	ldrb	r3, [r3, #4]
 800b038:	4619      	mov	r1, r3
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f004 fa98 	bl	800f570 <USBH_LL_GetURBState>
 800b040:	4603      	mov	r3, r0
 800b042:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b044:	7bbb      	ldrb	r3, [r7, #14]
 800b046:	2b01      	cmp	r3, #1
 800b048:	d105      	bne.n	800b056 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	220d      	movs	r2, #13
 800b04e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b050:	2300      	movs	r3, #0
 800b052:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b054:	e072      	b.n	800b13c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b056:	7bbb      	ldrb	r3, [r7, #14]
 800b058:	2b04      	cmp	r3, #4
 800b05a:	d103      	bne.n	800b064 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	220b      	movs	r2, #11
 800b060:	761a      	strb	r2, [r3, #24]
      break;
 800b062:	e06b      	b.n	800b13c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b064:	7bbb      	ldrb	r3, [r7, #14]
 800b066:	2b05      	cmp	r3, #5
 800b068:	d168      	bne.n	800b13c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b06a:	2303      	movs	r3, #3
 800b06c:	73fb      	strb	r3, [r7, #15]
      break;
 800b06e:	e065      	b.n	800b13c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	795b      	ldrb	r3, [r3, #5]
 800b074:	2201      	movs	r2, #1
 800b076:	9200      	str	r2, [sp, #0]
 800b078:	2200      	movs	r2, #0
 800b07a:	2100      	movs	r1, #0
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f87f 	bl	800b180 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b088:	b29a      	uxth	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	220a      	movs	r2, #10
 800b092:	761a      	strb	r2, [r3, #24]
      break;
 800b094:	e055      	b.n	800b142 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	795b      	ldrb	r3, [r3, #5]
 800b09a:	4619      	mov	r1, r3
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f004 fa67 	bl	800f570 <USBH_LL_GetURBState>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b0a6:	7bbb      	ldrb	r3, [r7, #14]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d105      	bne.n	800b0b8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	220d      	movs	r2, #13
 800b0b4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b0b6:	e043      	b.n	800b140 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b0b8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d103      	bne.n	800b0c6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2209      	movs	r2, #9
 800b0c2:	761a      	strb	r2, [r3, #24]
      break;
 800b0c4:	e03c      	b.n	800b140 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b0c6:	7bbb      	ldrb	r3, [r7, #14]
 800b0c8:	2b04      	cmp	r3, #4
 800b0ca:	d139      	bne.n	800b140 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	220b      	movs	r2, #11
 800b0d0:	761a      	strb	r2, [r3, #24]
      break;
 800b0d2:	e035      	b.n	800b140 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	7e5b      	ldrb	r3, [r3, #25]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	b2da      	uxtb	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	765a      	strb	r2, [r3, #25]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	7e5b      	ldrb	r3, [r3, #25]
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d806      	bhi.n	800b0f6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b0f4:	e025      	b.n	800b142 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b0fc:	2106      	movs	r1, #6
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	795b      	ldrb	r3, [r3, #5]
 800b10c:	4619      	mov	r1, r3
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f90c 	bl	800b32c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	791b      	ldrb	r3, [r3, #4]
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f906 	bl	800b32c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b126:	2302      	movs	r3, #2
 800b128:	73fb      	strb	r3, [r7, #15]
      break;
 800b12a:	e00a      	b.n	800b142 <USBH_HandleControl+0x2de>

    default:
      break;
 800b12c:	bf00      	nop
 800b12e:	e008      	b.n	800b142 <USBH_HandleControl+0x2de>
      break;
 800b130:	bf00      	nop
 800b132:	e006      	b.n	800b142 <USBH_HandleControl+0x2de>
      break;
 800b134:	bf00      	nop
 800b136:	e004      	b.n	800b142 <USBH_HandleControl+0x2de>
      break;
 800b138:	bf00      	nop
 800b13a:	e002      	b.n	800b142 <USBH_HandleControl+0x2de>
      break;
 800b13c:	bf00      	nop
 800b13e:	e000      	b.n	800b142 <USBH_HandleControl+0x2de>
      break;
 800b140:	bf00      	nop
  }

  return status;
 800b142:	7bfb      	ldrb	r3, [r7, #15]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b088      	sub	sp, #32
 800b150:	af04      	add	r7, sp, #16
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	4613      	mov	r3, r2
 800b158:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b15a:	79f9      	ldrb	r1, [r7, #7]
 800b15c:	2300      	movs	r3, #0
 800b15e:	9303      	str	r3, [sp, #12]
 800b160:	2308      	movs	r3, #8
 800b162:	9302      	str	r3, [sp, #8]
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	9301      	str	r3, [sp, #4]
 800b168:	2300      	movs	r3, #0
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	2300      	movs	r3, #0
 800b16e:	2200      	movs	r2, #0
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f004 f9cc 	bl	800f50e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b088      	sub	sp, #32
 800b184:	af04      	add	r7, sp, #16
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	4611      	mov	r1, r2
 800b18c:	461a      	mov	r2, r3
 800b18e:	460b      	mov	r3, r1
 800b190:	80fb      	strh	r3, [r7, #6]
 800b192:	4613      	mov	r3, r2
 800b194:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d001      	beq.n	800b1a4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b1a4:	7979      	ldrb	r1, [r7, #5]
 800b1a6:	7e3b      	ldrb	r3, [r7, #24]
 800b1a8:	9303      	str	r3, [sp, #12]
 800b1aa:	88fb      	ldrh	r3, [r7, #6]
 800b1ac:	9302      	str	r3, [sp, #8]
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	9301      	str	r3, [sp, #4]
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f004 f9a7 	bl	800f50e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b088      	sub	sp, #32
 800b1ce:	af04      	add	r7, sp, #16
 800b1d0:	60f8      	str	r0, [r7, #12]
 800b1d2:	60b9      	str	r1, [r7, #8]
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	460b      	mov	r3, r1
 800b1da:	80fb      	strh	r3, [r7, #6]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b1e0:	7979      	ldrb	r1, [r7, #5]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	9303      	str	r3, [sp, #12]
 800b1e6:	88fb      	ldrh	r3, [r7, #6]
 800b1e8:	9302      	str	r3, [sp, #8]
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	9301      	str	r3, [sp, #4]
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f004 f989 	bl	800f50e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b1fc:	2300      	movs	r3, #0

}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b088      	sub	sp, #32
 800b20a:	af04      	add	r7, sp, #16
 800b20c:	60f8      	str	r0, [r7, #12]
 800b20e:	60b9      	str	r1, [r7, #8]
 800b210:	4611      	mov	r1, r2
 800b212:	461a      	mov	r2, r3
 800b214:	460b      	mov	r3, r1
 800b216:	80fb      	strh	r3, [r7, #6]
 800b218:	4613      	mov	r3, r2
 800b21a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b226:	2300      	movs	r3, #0
 800b228:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b22a:	7979      	ldrb	r1, [r7, #5]
 800b22c:	7e3b      	ldrb	r3, [r7, #24]
 800b22e:	9303      	str	r3, [sp, #12]
 800b230:	88fb      	ldrh	r3, [r7, #6]
 800b232:	9302      	str	r3, [sp, #8]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	9301      	str	r3, [sp, #4]
 800b238:	2301      	movs	r3, #1
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	2302      	movs	r3, #2
 800b23e:	2200      	movs	r2, #0
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f004 f964 	bl	800f50e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b088      	sub	sp, #32
 800b254:	af04      	add	r7, sp, #16
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	4611      	mov	r1, r2
 800b25c:	461a      	mov	r2, r3
 800b25e:	460b      	mov	r3, r1
 800b260:	80fb      	strh	r3, [r7, #6]
 800b262:	4613      	mov	r3, r2
 800b264:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b266:	7979      	ldrb	r1, [r7, #5]
 800b268:	2300      	movs	r3, #0
 800b26a:	9303      	str	r3, [sp, #12]
 800b26c:	88fb      	ldrh	r3, [r7, #6]
 800b26e:	9302      	str	r3, [sp, #8]
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	9301      	str	r3, [sp, #4]
 800b274:	2301      	movs	r3, #1
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	2302      	movs	r3, #2
 800b27a:	2201      	movs	r2, #1
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f004 f946 	bl	800f50e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3710      	adds	r7, #16
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af04      	add	r7, sp, #16
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	4608      	mov	r0, r1
 800b296:	4611      	mov	r1, r2
 800b298:	461a      	mov	r2, r3
 800b29a:	4603      	mov	r3, r0
 800b29c:	70fb      	strb	r3, [r7, #3]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	70bb      	strb	r3, [r7, #2]
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b2a6:	7878      	ldrb	r0, [r7, #1]
 800b2a8:	78ba      	ldrb	r2, [r7, #2]
 800b2aa:	78f9      	ldrb	r1, [r7, #3]
 800b2ac:	8b3b      	ldrh	r3, [r7, #24]
 800b2ae:	9302      	str	r3, [sp, #8]
 800b2b0:	7d3b      	ldrb	r3, [r7, #20]
 800b2b2:	9301      	str	r3, [sp, #4]
 800b2b4:	7c3b      	ldrb	r3, [r7, #16]
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f004 f8d9 	bl	800f472 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b082      	sub	sp, #8
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b2d6:	78fb      	ldrb	r3, [r7, #3]
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f004 f8f8 	bl	800f4d0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b084      	sub	sp, #16
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f836 	bl	800b368 <USBH_GetFreePipe>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b300:	89fb      	ldrh	r3, [r7, #14]
 800b302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b306:	4293      	cmp	r3, r2
 800b308:	d00a      	beq.n	800b320 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b30a:	78fa      	ldrb	r2, [r7, #3]
 800b30c:	89fb      	ldrh	r3, [r7, #14]
 800b30e:	f003 030f 	and.w	r3, r3, #15
 800b312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b316:	6879      	ldr	r1, [r7, #4]
 800b318:	33e0      	adds	r3, #224	; 0xe0
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	440b      	add	r3, r1
 800b31e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b320:	89fb      	ldrh	r3, [r7, #14]
 800b322:	b2db      	uxtb	r3, r3
}
 800b324:	4618      	mov	r0, r3
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b338:	78fb      	ldrb	r3, [r7, #3]
 800b33a:	2b0f      	cmp	r3, #15
 800b33c:	d80d      	bhi.n	800b35a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b33e:	78fb      	ldrb	r3, [r7, #3]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	33e0      	adds	r3, #224	; 0xe0
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	685a      	ldr	r2, [r3, #4]
 800b34a:	78fb      	ldrb	r3, [r7, #3]
 800b34c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b350:	6879      	ldr	r1, [r7, #4]
 800b352:	33e0      	adds	r3, #224	; 0xe0
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	440b      	add	r3, r1
 800b358:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b370:	2300      	movs	r3, #0
 800b372:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b374:	2300      	movs	r3, #0
 800b376:	73fb      	strb	r3, [r7, #15]
 800b378:	e00f      	b.n	800b39a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	33e0      	adds	r3, #224	; 0xe0
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d102      	bne.n	800b394 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
 800b390:	b29b      	uxth	r3, r3
 800b392:	e007      	b.n	800b3a4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b394:	7bfb      	ldrb	r3, [r7, #15]
 800b396:	3301      	adds	r3, #1
 800b398:	73fb      	strb	r3, [r7, #15]
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
 800b39c:	2b0f      	cmp	r3, #15
 800b39e:	d9ec      	bls.n	800b37a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b3a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3714      	adds	r7, #20
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b3ba:	79fb      	ldrb	r3, [r7, #7]
 800b3bc:	4a08      	ldr	r2, [pc, #32]	; (800b3e0 <disk_status+0x30>)
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	4413      	add	r3, r2
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	79fa      	ldrb	r2, [r7, #7]
 800b3c8:	4905      	ldr	r1, [pc, #20]	; (800b3e0 <disk_status+0x30>)
 800b3ca:	440a      	add	r2, r1
 800b3cc:	7a12      	ldrb	r2, [r2, #8]
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	4798      	blx	r3
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	20003b38 	.word	0x20003b38

0800b3e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b3f2:	79fb      	ldrb	r3, [r7, #7]
 800b3f4:	4a0d      	ldr	r2, [pc, #52]	; (800b42c <disk_initialize+0x48>)
 800b3f6:	5cd3      	ldrb	r3, [r2, r3]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d111      	bne.n	800b420 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b3fc:	79fb      	ldrb	r3, [r7, #7]
 800b3fe:	4a0b      	ldr	r2, [pc, #44]	; (800b42c <disk_initialize+0x48>)
 800b400:	2101      	movs	r1, #1
 800b402:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b404:	79fb      	ldrb	r3, [r7, #7]
 800b406:	4a09      	ldr	r2, [pc, #36]	; (800b42c <disk_initialize+0x48>)
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	79fa      	ldrb	r2, [r7, #7]
 800b412:	4906      	ldr	r1, [pc, #24]	; (800b42c <disk_initialize+0x48>)
 800b414:	440a      	add	r2, r1
 800b416:	7a12      	ldrb	r2, [r2, #8]
 800b418:	4610      	mov	r0, r2
 800b41a:	4798      	blx	r3
 800b41c:	4603      	mov	r3, r0
 800b41e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b420:	7bfb      	ldrb	r3, [r7, #15]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	20003b38 	.word	0x20003b38

0800b430 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b430:	b590      	push	{r4, r7, lr}
 800b432:	b087      	sub	sp, #28
 800b434:	af00      	add	r7, sp, #0
 800b436:	60b9      	str	r1, [r7, #8]
 800b438:	607a      	str	r2, [r7, #4]
 800b43a:	603b      	str	r3, [r7, #0]
 800b43c:	4603      	mov	r3, r0
 800b43e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b440:	7bfb      	ldrb	r3, [r7, #15]
 800b442:	4a0a      	ldr	r2, [pc, #40]	; (800b46c <disk_read+0x3c>)
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	689c      	ldr	r4, [r3, #8]
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
 800b44e:	4a07      	ldr	r2, [pc, #28]	; (800b46c <disk_read+0x3c>)
 800b450:	4413      	add	r3, r2
 800b452:	7a18      	ldrb	r0, [r3, #8]
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	68b9      	ldr	r1, [r7, #8]
 800b45a:	47a0      	blx	r4
 800b45c:	4603      	mov	r3, r0
 800b45e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b460:	7dfb      	ldrb	r3, [r7, #23]
}
 800b462:	4618      	mov	r0, r3
 800b464:	371c      	adds	r7, #28
 800b466:	46bd      	mov	sp, r7
 800b468:	bd90      	pop	{r4, r7, pc}
 800b46a:	bf00      	nop
 800b46c:	20003b38 	.word	0x20003b38

0800b470 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b470:	b590      	push	{r4, r7, lr}
 800b472:	b087      	sub	sp, #28
 800b474:	af00      	add	r7, sp, #0
 800b476:	60b9      	str	r1, [r7, #8]
 800b478:	607a      	str	r2, [r7, #4]
 800b47a:	603b      	str	r3, [r7, #0]
 800b47c:	4603      	mov	r3, r0
 800b47e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	4a0a      	ldr	r2, [pc, #40]	; (800b4ac <disk_write+0x3c>)
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4413      	add	r3, r2
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	68dc      	ldr	r4, [r3, #12]
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	4a07      	ldr	r2, [pc, #28]	; (800b4ac <disk_write+0x3c>)
 800b490:	4413      	add	r3, r2
 800b492:	7a18      	ldrb	r0, [r3, #8]
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	68b9      	ldr	r1, [r7, #8]
 800b49a:	47a0      	blx	r4
 800b49c:	4603      	mov	r3, r0
 800b49e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	371c      	adds	r7, #28
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd90      	pop	{r4, r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	20003b38 	.word	0x20003b38

0800b4b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	603a      	str	r2, [r7, #0]
 800b4ba:	71fb      	strb	r3, [r7, #7]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b4c0:	79fb      	ldrb	r3, [r7, #7]
 800b4c2:	4a09      	ldr	r2, [pc, #36]	; (800b4e8 <disk_ioctl+0x38>)
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	79fa      	ldrb	r2, [r7, #7]
 800b4ce:	4906      	ldr	r1, [pc, #24]	; (800b4e8 <disk_ioctl+0x38>)
 800b4d0:	440a      	add	r2, r1
 800b4d2:	7a10      	ldrb	r0, [r2, #8]
 800b4d4:	79b9      	ldrb	r1, [r7, #6]
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	4798      	blx	r3
 800b4da:	4603      	mov	r3, r0
 800b4dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	20003b38 	.word	0x20003b38

0800b4ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b4fc:	89fb      	ldrh	r3, [r7, #14]
 800b4fe:	021b      	lsls	r3, r3, #8
 800b500:	b21a      	sxth	r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	b21b      	sxth	r3, r3
 800b508:	4313      	orrs	r3, r2
 800b50a:	b21b      	sxth	r3, r3
 800b50c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b50e:	89fb      	ldrh	r3, [r7, #14]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3714      	adds	r7, #20
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	3303      	adds	r3, #3
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	021b      	lsls	r3, r3, #8
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	3202      	adds	r2, #2
 800b534:	7812      	ldrb	r2, [r2, #0]
 800b536:	4313      	orrs	r3, r2
 800b538:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	021b      	lsls	r3, r3, #8
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	3201      	adds	r2, #1
 800b542:	7812      	ldrb	r2, [r2, #0]
 800b544:	4313      	orrs	r3, r2
 800b546:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	021b      	lsls	r3, r3, #8
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	7812      	ldrb	r2, [r2, #0]
 800b550:	4313      	orrs	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]
	return rv;
 800b554:	68fb      	ldr	r3, [r7, #12]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b562:	b480      	push	{r7}
 800b564:	b083      	sub	sp, #12
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	460b      	mov	r3, r1
 800b56c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	1c5a      	adds	r2, r3, #1
 800b572:	607a      	str	r2, [r7, #4]
 800b574:	887a      	ldrh	r2, [r7, #2]
 800b576:	b2d2      	uxtb	r2, r2
 800b578:	701a      	strb	r2, [r3, #0]
 800b57a:	887b      	ldrh	r3, [r7, #2]
 800b57c:	0a1b      	lsrs	r3, r3, #8
 800b57e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	1c5a      	adds	r2, r3, #1
 800b584:	607a      	str	r2, [r7, #4]
 800b586:	887a      	ldrh	r2, [r7, #2]
 800b588:	b2d2      	uxtb	r2, r2
 800b58a:	701a      	strb	r2, [r3, #0]
}
 800b58c:	bf00      	nop
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	1c5a      	adds	r2, r3, #1
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	b2d2      	uxtb	r2, r2
 800b5ac:	701a      	strb	r2, [r3, #0]
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	0a1b      	lsrs	r3, r3, #8
 800b5b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	607a      	str	r2, [r7, #4]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	b2d2      	uxtb	r2, r2
 800b5be:	701a      	strb	r2, [r3, #0]
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	0a1b      	lsrs	r3, r3, #8
 800b5c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	1c5a      	adds	r2, r3, #1
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	683a      	ldr	r2, [r7, #0]
 800b5ce:	b2d2      	uxtb	r2, r2
 800b5d0:	701a      	strb	r2, [r3, #0]
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	0a1b      	lsrs	r3, r3, #8
 800b5d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	607a      	str	r2, [r7, #4]
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	b2d2      	uxtb	r2, r2
 800b5e2:	701a      	strb	r2, [r3, #0]
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b5f0:	b480      	push	{r7}
 800b5f2:	b087      	sub	sp, #28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00d      	beq.n	800b626 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b60a:	693a      	ldr	r2, [r7, #16]
 800b60c:	1c53      	adds	r3, r2, #1
 800b60e:	613b      	str	r3, [r7, #16]
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	1c59      	adds	r1, r3, #1
 800b614:	6179      	str	r1, [r7, #20]
 800b616:	7812      	ldrb	r2, [r2, #0]
 800b618:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	3b01      	subs	r3, #1
 800b61e:	607b      	str	r3, [r7, #4]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1f1      	bne.n	800b60a <mem_cpy+0x1a>
	}
}
 800b626:	bf00      	nop
 800b628:	371c      	adds	r7, #28
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b632:	b480      	push	{r7}
 800b634:	b087      	sub	sp, #28
 800b636:	af00      	add	r7, sp, #0
 800b638:	60f8      	str	r0, [r7, #12]
 800b63a:	60b9      	str	r1, [r7, #8]
 800b63c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	1c5a      	adds	r2, r3, #1
 800b646:	617a      	str	r2, [r7, #20]
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	b2d2      	uxtb	r2, r2
 800b64c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	3b01      	subs	r3, #1
 800b652:	607b      	str	r3, [r7, #4]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1f3      	bne.n	800b642 <mem_set+0x10>
}
 800b65a:	bf00      	nop
 800b65c:	bf00      	nop
 800b65e:	371c      	adds	r7, #28
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b668:	b480      	push	{r7}
 800b66a:	b089      	sub	sp, #36	; 0x24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	61fb      	str	r3, [r7, #28]
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b67c:	2300      	movs	r3, #0
 800b67e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	1c5a      	adds	r2, r3, #1
 800b684:	61fa      	str	r2, [r7, #28]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	4619      	mov	r1, r3
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	1c5a      	adds	r2, r3, #1
 800b68e:	61ba      	str	r2, [r7, #24]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	1acb      	subs	r3, r1, r3
 800b694:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	3b01      	subs	r3, #1
 800b69a:	607b      	str	r3, [r7, #4]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d002      	beq.n	800b6a8 <mem_cmp+0x40>
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d0eb      	beq.n	800b680 <mem_cmp+0x18>

	return r;
 800b6a8:	697b      	ldr	r3, [r7, #20]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3724      	adds	r7, #36	; 0x24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr

0800b6b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b6b6:	b480      	push	{r7}
 800b6b8:	b083      	sub	sp, #12
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
 800b6be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b6c0:	e002      	b.n	800b6c8 <chk_chr+0x12>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	607b      	str	r3, [r7, #4]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d005      	beq.n	800b6dc <chk_chr+0x26>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d1f2      	bne.n	800b6c2 <chk_chr+0xc>
	return *str;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	781b      	ldrb	r3, [r3, #0]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	60bb      	str	r3, [r7, #8]
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	60fb      	str	r3, [r7, #12]
 800b6fe:	e029      	b.n	800b754 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b700:	4a27      	ldr	r2, [pc, #156]	; (800b7a0 <chk_lock+0xb4>)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	011b      	lsls	r3, r3, #4
 800b706:	4413      	add	r3, r2
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d01d      	beq.n	800b74a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b70e:	4a24      	ldr	r2, [pc, #144]	; (800b7a0 <chk_lock+0xb4>)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	011b      	lsls	r3, r3, #4
 800b714:	4413      	add	r3, r2
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d116      	bne.n	800b74e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b720:	4a1f      	ldr	r2, [pc, #124]	; (800b7a0 <chk_lock+0xb4>)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	011b      	lsls	r3, r3, #4
 800b726:	4413      	add	r3, r2
 800b728:	3304      	adds	r3, #4
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b730:	429a      	cmp	r2, r3
 800b732:	d10c      	bne.n	800b74e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b734:	4a1a      	ldr	r2, [pc, #104]	; (800b7a0 <chk_lock+0xb4>)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	011b      	lsls	r3, r3, #4
 800b73a:	4413      	add	r3, r2
 800b73c:	3308      	adds	r3, #8
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b744:	429a      	cmp	r2, r3
 800b746:	d102      	bne.n	800b74e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b748:	e007      	b.n	800b75a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b74a:	2301      	movs	r3, #1
 800b74c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	3301      	adds	r3, #1
 800b752:	60fb      	str	r3, [r7, #12]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d9d2      	bls.n	800b700 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	d109      	bne.n	800b774 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d102      	bne.n	800b76c <chk_lock+0x80>
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d101      	bne.n	800b770 <chk_lock+0x84>
 800b76c:	2300      	movs	r3, #0
 800b76e:	e010      	b.n	800b792 <chk_lock+0xa6>
 800b770:	2312      	movs	r3, #18
 800b772:	e00e      	b.n	800b792 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d108      	bne.n	800b78c <chk_lock+0xa0>
 800b77a:	4a09      	ldr	r2, [pc, #36]	; (800b7a0 <chk_lock+0xb4>)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	011b      	lsls	r3, r3, #4
 800b780:	4413      	add	r3, r2
 800b782:	330c      	adds	r3, #12
 800b784:	881b      	ldrh	r3, [r3, #0]
 800b786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b78a:	d101      	bne.n	800b790 <chk_lock+0xa4>
 800b78c:	2310      	movs	r3, #16
 800b78e:	e000      	b.n	800b792 <chk_lock+0xa6>
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3714      	adds	r7, #20
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	20003918 	.word	0x20003918

0800b7a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	607b      	str	r3, [r7, #4]
 800b7ae:	e002      	b.n	800b7b6 <enq_lock+0x12>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	607b      	str	r3, [r7, #4]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d806      	bhi.n	800b7ca <enq_lock+0x26>
 800b7bc:	4a09      	ldr	r2, [pc, #36]	; (800b7e4 <enq_lock+0x40>)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	011b      	lsls	r3, r3, #4
 800b7c2:	4413      	add	r3, r2
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1f2      	bne.n	800b7b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	bf14      	ite	ne
 800b7d0:	2301      	movne	r3, #1
 800b7d2:	2300      	moveq	r3, #0
 800b7d4:	b2db      	uxtb	r3, r3
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	20003918 	.word	0x20003918

0800b7e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60fb      	str	r3, [r7, #12]
 800b7f6:	e01f      	b.n	800b838 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b7f8:	4a41      	ldr	r2, [pc, #260]	; (800b900 <inc_lock+0x118>)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	011b      	lsls	r3, r3, #4
 800b7fe:	4413      	add	r3, r2
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	429a      	cmp	r2, r3
 800b808:	d113      	bne.n	800b832 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b80a:	4a3d      	ldr	r2, [pc, #244]	; (800b900 <inc_lock+0x118>)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	011b      	lsls	r3, r3, #4
 800b810:	4413      	add	r3, r2
 800b812:	3304      	adds	r3, #4
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d109      	bne.n	800b832 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b81e:	4a38      	ldr	r2, [pc, #224]	; (800b900 <inc_lock+0x118>)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	011b      	lsls	r3, r3, #4
 800b824:	4413      	add	r3, r2
 800b826:	3308      	adds	r3, #8
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b82e:	429a      	cmp	r2, r3
 800b830:	d006      	beq.n	800b840 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3301      	adds	r3, #1
 800b836:	60fb      	str	r3, [r7, #12]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d9dc      	bls.n	800b7f8 <inc_lock+0x10>
 800b83e:	e000      	b.n	800b842 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b840:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2b02      	cmp	r3, #2
 800b846:	d132      	bne.n	800b8ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b848:	2300      	movs	r3, #0
 800b84a:	60fb      	str	r3, [r7, #12]
 800b84c:	e002      	b.n	800b854 <inc_lock+0x6c>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	3301      	adds	r3, #1
 800b852:	60fb      	str	r3, [r7, #12]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2b01      	cmp	r3, #1
 800b858:	d806      	bhi.n	800b868 <inc_lock+0x80>
 800b85a:	4a29      	ldr	r2, [pc, #164]	; (800b900 <inc_lock+0x118>)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	011b      	lsls	r3, r3, #4
 800b860:	4413      	add	r3, r2
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1f2      	bne.n	800b84e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d101      	bne.n	800b872 <inc_lock+0x8a>
 800b86e:	2300      	movs	r3, #0
 800b870:	e040      	b.n	800b8f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	4922      	ldr	r1, [pc, #136]	; (800b900 <inc_lock+0x118>)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	011b      	lsls	r3, r3, #4
 800b87c:	440b      	add	r3, r1
 800b87e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	689a      	ldr	r2, [r3, #8]
 800b884:	491e      	ldr	r1, [pc, #120]	; (800b900 <inc_lock+0x118>)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	011b      	lsls	r3, r3, #4
 800b88a:	440b      	add	r3, r1
 800b88c:	3304      	adds	r3, #4
 800b88e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	695a      	ldr	r2, [r3, #20]
 800b894:	491a      	ldr	r1, [pc, #104]	; (800b900 <inc_lock+0x118>)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	011b      	lsls	r3, r3, #4
 800b89a:	440b      	add	r3, r1
 800b89c:	3308      	adds	r3, #8
 800b89e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b8a0:	4a17      	ldr	r2, [pc, #92]	; (800b900 <inc_lock+0x118>)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	011b      	lsls	r3, r3, #4
 800b8a6:	4413      	add	r3, r2
 800b8a8:	330c      	adds	r3, #12
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d009      	beq.n	800b8c8 <inc_lock+0xe0>
 800b8b4:	4a12      	ldr	r2, [pc, #72]	; (800b900 <inc_lock+0x118>)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	011b      	lsls	r3, r3, #4
 800b8ba:	4413      	add	r3, r2
 800b8bc:	330c      	adds	r3, #12
 800b8be:	881b      	ldrh	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d001      	beq.n	800b8c8 <inc_lock+0xe0>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	e015      	b.n	800b8f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d108      	bne.n	800b8e0 <inc_lock+0xf8>
 800b8ce:	4a0c      	ldr	r2, [pc, #48]	; (800b900 <inc_lock+0x118>)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	011b      	lsls	r3, r3, #4
 800b8d4:	4413      	add	r3, r2
 800b8d6:	330c      	adds	r3, #12
 800b8d8:	881b      	ldrh	r3, [r3, #0]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	e001      	b.n	800b8e4 <inc_lock+0xfc>
 800b8e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8e4:	4906      	ldr	r1, [pc, #24]	; (800b900 <inc_lock+0x118>)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	011b      	lsls	r3, r3, #4
 800b8ea:	440b      	add	r3, r1
 800b8ec:	330c      	adds	r3, #12
 800b8ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	3301      	adds	r3, #1
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	20003918 	.word	0x20003918

0800b904 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	3b01      	subs	r3, #1
 800b910:	607b      	str	r3, [r7, #4]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d825      	bhi.n	800b964 <dec_lock+0x60>
		n = Files[i].ctr;
 800b918:	4a17      	ldr	r2, [pc, #92]	; (800b978 <dec_lock+0x74>)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	011b      	lsls	r3, r3, #4
 800b91e:	4413      	add	r3, r2
 800b920:	330c      	adds	r3, #12
 800b922:	881b      	ldrh	r3, [r3, #0]
 800b924:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b926:	89fb      	ldrh	r3, [r7, #14]
 800b928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b92c:	d101      	bne.n	800b932 <dec_lock+0x2e>
 800b92e:	2300      	movs	r3, #0
 800b930:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b932:	89fb      	ldrh	r3, [r7, #14]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <dec_lock+0x3a>
 800b938:	89fb      	ldrh	r3, [r7, #14]
 800b93a:	3b01      	subs	r3, #1
 800b93c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b93e:	4a0e      	ldr	r2, [pc, #56]	; (800b978 <dec_lock+0x74>)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	011b      	lsls	r3, r3, #4
 800b944:	4413      	add	r3, r2
 800b946:	330c      	adds	r3, #12
 800b948:	89fa      	ldrh	r2, [r7, #14]
 800b94a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b94c:	89fb      	ldrh	r3, [r7, #14]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d105      	bne.n	800b95e <dec_lock+0x5a>
 800b952:	4a09      	ldr	r2, [pc, #36]	; (800b978 <dec_lock+0x74>)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	011b      	lsls	r3, r3, #4
 800b958:	4413      	add	r3, r2
 800b95a:	2200      	movs	r2, #0
 800b95c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b95e:	2300      	movs	r3, #0
 800b960:	737b      	strb	r3, [r7, #13]
 800b962:	e001      	b.n	800b968 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b964:	2302      	movs	r3, #2
 800b966:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b968:	7b7b      	ldrb	r3, [r7, #13]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	20003918 	.word	0x20003918

0800b97c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]
 800b988:	e010      	b.n	800b9ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b98a:	4a0d      	ldr	r2, [pc, #52]	; (800b9c0 <clear_lock+0x44>)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	011b      	lsls	r3, r3, #4
 800b990:	4413      	add	r3, r2
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	429a      	cmp	r2, r3
 800b998:	d105      	bne.n	800b9a6 <clear_lock+0x2a>
 800b99a:	4a09      	ldr	r2, [pc, #36]	; (800b9c0 <clear_lock+0x44>)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	011b      	lsls	r3, r3, #4
 800b9a0:	4413      	add	r3, r2
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	60fb      	str	r3, [r7, #12]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d9eb      	bls.n	800b98a <clear_lock+0xe>
	}
}
 800b9b2:	bf00      	nop
 800b9b4:	bf00      	nop
 800b9b6:	3714      	adds	r7, #20
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr
 800b9c0:	20003918 	.word	0x20003918

0800b9c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	78db      	ldrb	r3, [r3, #3]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d034      	beq.n	800ba42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	7858      	ldrb	r0, [r3, #1]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	f7ff fd40 	bl	800b470 <disk_write>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d002      	beq.n	800b9fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	73fb      	strb	r3, [r7, #15]
 800b9fa:	e022      	b.n	800ba42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	1ad2      	subs	r2, r2, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6a1b      	ldr	r3, [r3, #32]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d217      	bcs.n	800ba42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	789b      	ldrb	r3, [r3, #2]
 800ba16:	613b      	str	r3, [r7, #16]
 800ba18:	e010      	b.n	800ba3c <sync_window+0x78>
					wsect += fs->fsize;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	4413      	add	r3, r2
 800ba22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	7858      	ldrb	r0, [r3, #1]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba2e:	2301      	movs	r3, #1
 800ba30:	697a      	ldr	r2, [r7, #20]
 800ba32:	f7ff fd1d 	bl	800b470 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	613b      	str	r3, [r7, #16]
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d8eb      	bhi.n	800ba1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ba42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3718      	adds	r7, #24
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ba56:	2300      	movs	r3, #0
 800ba58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d01b      	beq.n	800ba9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f7ff ffad 	bl	800b9c4 <sync_window>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ba6e:	7bfb      	ldrb	r3, [r7, #15]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d113      	bne.n	800ba9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	7858      	ldrb	r0, [r3, #1]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba7e:	2301      	movs	r3, #1
 800ba80:	683a      	ldr	r2, [r7, #0]
 800ba82:	f7ff fcd5 	bl	800b430 <disk_read>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d004      	beq.n	800ba96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ba8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ba9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
	...

0800baa8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff ff87 	bl	800b9c4 <sync_window>
 800bab6:	4603      	mov	r3, r0
 800bab8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800baba:	7bfb      	ldrb	r3, [r7, #15]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d159      	bne.n	800bb74 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	2b03      	cmp	r3, #3
 800bac6:	d149      	bne.n	800bb5c <sync_fs+0xb4>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	791b      	ldrb	r3, [r3, #4]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d145      	bne.n	800bb5c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	899b      	ldrh	r3, [r3, #12]
 800bada:	461a      	mov	r2, r3
 800badc:	2100      	movs	r1, #0
 800bade:	f7ff fda8 	bl	800b632 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	3338      	adds	r3, #56	; 0x38
 800bae6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800baea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff fd37 	bl	800b562 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	3338      	adds	r3, #56	; 0x38
 800baf8:	4921      	ldr	r1, [pc, #132]	; (800bb80 <sync_fs+0xd8>)
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7ff fd4c 	bl	800b598 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	3338      	adds	r3, #56	; 0x38
 800bb04:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bb08:	491e      	ldr	r1, [pc, #120]	; (800bb84 <sync_fs+0xdc>)
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7ff fd44 	bl	800b598 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	3338      	adds	r3, #56	; 0x38
 800bb14:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	699b      	ldr	r3, [r3, #24]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	4610      	mov	r0, r2
 800bb20:	f7ff fd3a 	bl	800b598 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	3338      	adds	r3, #56	; 0x38
 800bb28:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	695b      	ldr	r3, [r3, #20]
 800bb30:	4619      	mov	r1, r3
 800bb32:	4610      	mov	r0, r2
 800bb34:	f7ff fd30 	bl	800b598 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	7858      	ldrb	r0, [r3, #1]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb50:	2301      	movs	r3, #1
 800bb52:	f7ff fc8d 	bl	800b470 <disk_write>
			fs->fsi_flag = 0;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	785b      	ldrb	r3, [r3, #1]
 800bb60:	2200      	movs	r2, #0
 800bb62:	2100      	movs	r1, #0
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7ff fca3 	bl	800b4b0 <disk_ioctl>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d001      	beq.n	800bb74 <sync_fs+0xcc>
 800bb70:	2301      	movs	r3, #1
 800bb72:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	41615252 	.word	0x41615252
 800bb84:	61417272 	.word	0x61417272

0800bb88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	3b02      	subs	r3, #2
 800bb96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	69db      	ldr	r3, [r3, #28]
 800bb9c:	3b02      	subs	r3, #2
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d301      	bcc.n	800bba8 <clust2sect+0x20>
 800bba4:	2300      	movs	r3, #0
 800bba6:	e008      	b.n	800bbba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	895b      	ldrh	r3, [r3, #10]
 800bbac:	461a      	mov	r2, r3
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	fb03 f202 	mul.w	r2, r3, r2
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb8:	4413      	add	r3, r2
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	370c      	adds	r7, #12
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr

0800bbc6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b086      	sub	sp, #24
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
 800bbce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d904      	bls.n	800bbe6 <get_fat+0x20>
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	69db      	ldr	r3, [r3, #28]
 800bbe0:	683a      	ldr	r2, [r7, #0]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d302      	bcc.n	800bbec <get_fat+0x26>
		val = 1;	/* Internal error */
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	617b      	str	r3, [r7, #20]
 800bbea:	e0bb      	b.n	800bd64 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bbec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbf0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	2b03      	cmp	r3, #3
 800bbf8:	f000 8083 	beq.w	800bd02 <get_fat+0x13c>
 800bbfc:	2b03      	cmp	r3, #3
 800bbfe:	f300 80a7 	bgt.w	800bd50 <get_fat+0x18a>
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d002      	beq.n	800bc0c <get_fat+0x46>
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d056      	beq.n	800bcb8 <get_fat+0xf2>
 800bc0a:	e0a1      	b.n	800bd50 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	60fb      	str	r3, [r7, #12]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	085b      	lsrs	r3, r3, #1
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	4413      	add	r3, r2
 800bc18:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	899b      	ldrh	r3, [r3, #12]
 800bc22:	4619      	mov	r1, r3
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc2a:	4413      	add	r3, r2
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6938      	ldr	r0, [r7, #16]
 800bc30:	f7ff ff0c 	bl	800ba4c <move_window>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f040 808d 	bne.w	800bd56 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	1c5a      	adds	r2, r3, #1
 800bc40:	60fa      	str	r2, [r7, #12]
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	8992      	ldrh	r2, [r2, #12]
 800bc46:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc4a:	fb01 f202 	mul.w	r2, r1, r2
 800bc4e:	1a9b      	subs	r3, r3, r2
 800bc50:	693a      	ldr	r2, [r7, #16]
 800bc52:	4413      	add	r3, r2
 800bc54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	899b      	ldrh	r3, [r3, #12]
 800bc62:	4619      	mov	r1, r3
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc6a:	4413      	add	r3, r2
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	6938      	ldr	r0, [r7, #16]
 800bc70:	f7ff feec 	bl	800ba4c <move_window>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d16f      	bne.n	800bd5a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	899b      	ldrh	r3, [r3, #12]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc86:	fb01 f202 	mul.w	r2, r1, r2
 800bc8a:	1a9b      	subs	r3, r3, r2
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	4413      	add	r3, r2
 800bc90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc94:	021b      	lsls	r3, r3, #8
 800bc96:	461a      	mov	r2, r3
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	f003 0301 	and.w	r3, r3, #1
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d002      	beq.n	800bcae <get_fat+0xe8>
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	091b      	lsrs	r3, r3, #4
 800bcac:	e002      	b.n	800bcb4 <get_fat+0xee>
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcb4:	617b      	str	r3, [r7, #20]
			break;
 800bcb6:	e055      	b.n	800bd64 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	899b      	ldrh	r3, [r3, #12]
 800bcc0:	085b      	lsrs	r3, r3, #1
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	fbb3 f3f1 	udiv	r3, r3, r1
 800bccc:	4413      	add	r3, r2
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6938      	ldr	r0, [r7, #16]
 800bcd2:	f7ff febb 	bl	800ba4c <move_window>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d140      	bne.n	800bd5e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	8992      	ldrh	r2, [r2, #12]
 800bcea:	fbb3 f0f2 	udiv	r0, r3, r2
 800bcee:	fb00 f202 	mul.w	r2, r0, r2
 800bcf2:	1a9b      	subs	r3, r3, r2
 800bcf4:	440b      	add	r3, r1
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff fbf8 	bl	800b4ec <ld_word>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	617b      	str	r3, [r7, #20]
			break;
 800bd00:	e030      	b.n	800bd64 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	899b      	ldrh	r3, [r3, #12]
 800bd0a:	089b      	lsrs	r3, r3, #2
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	4619      	mov	r1, r3
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd16:	4413      	add	r3, r2
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6938      	ldr	r0, [r7, #16]
 800bd1c:	f7ff fe96 	bl	800ba4c <move_window>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d11d      	bne.n	800bd62 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	8992      	ldrh	r2, [r2, #12]
 800bd34:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd38:	fb00 f202 	mul.w	r2, r0, r2
 800bd3c:	1a9b      	subs	r3, r3, r2
 800bd3e:	440b      	add	r3, r1
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7ff fbeb 	bl	800b51c <ld_dword>
 800bd46:	4603      	mov	r3, r0
 800bd48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bd4c:	617b      	str	r3, [r7, #20]
			break;
 800bd4e:	e009      	b.n	800bd64 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bd50:	2301      	movs	r3, #1
 800bd52:	617b      	str	r3, [r7, #20]
 800bd54:	e006      	b.n	800bd64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd56:	bf00      	nop
 800bd58:	e004      	b.n	800bd64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd5a:	bf00      	nop
 800bd5c:	e002      	b.n	800bd64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd5e:	bf00      	nop
 800bd60:	e000      	b.n	800bd64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd62:	bf00      	nop
		}
	}

	return val;
 800bd64:	697b      	ldr	r3, [r7, #20]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3718      	adds	r7, #24
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bd6e:	b590      	push	{r4, r7, lr}
 800bd70:	b089      	sub	sp, #36	; 0x24
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	60f8      	str	r0, [r7, #12]
 800bd76:	60b9      	str	r1, [r7, #8]
 800bd78:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	f240 8102 	bls.w	800bf8a <put_fat+0x21c>
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	69db      	ldr	r3, [r3, #28]
 800bd8a:	68ba      	ldr	r2, [r7, #8]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	f080 80fc 	bcs.w	800bf8a <put_fat+0x21c>
		switch (fs->fs_type) {
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	2b03      	cmp	r3, #3
 800bd98:	f000 80b6 	beq.w	800bf08 <put_fat+0x19a>
 800bd9c:	2b03      	cmp	r3, #3
 800bd9e:	f300 80fd 	bgt.w	800bf9c <put_fat+0x22e>
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d003      	beq.n	800bdae <put_fat+0x40>
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	f000 8083 	beq.w	800beb2 <put_fat+0x144>
 800bdac:	e0f6      	b.n	800bf9c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	61bb      	str	r3, [r7, #24]
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	085b      	lsrs	r3, r3, #1
 800bdb6:	69ba      	ldr	r2, [r7, #24]
 800bdb8:	4413      	add	r3, r2
 800bdba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	899b      	ldrh	r3, [r3, #12]
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdcc:	4413      	add	r3, r2
 800bdce:	4619      	mov	r1, r3
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f7ff fe3b 	bl	800ba4c <move_window>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bdda:	7ffb      	ldrb	r3, [r7, #31]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f040 80d6 	bne.w	800bf8e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	1c5a      	adds	r2, r3, #1
 800bdec:	61ba      	str	r2, [r7, #24]
 800bdee:	68fa      	ldr	r2, [r7, #12]
 800bdf0:	8992      	ldrh	r2, [r2, #12]
 800bdf2:	fbb3 f0f2 	udiv	r0, r3, r2
 800bdf6:	fb00 f202 	mul.w	r2, r0, r2
 800bdfa:	1a9b      	subs	r3, r3, r2
 800bdfc:	440b      	add	r3, r1
 800bdfe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	f003 0301 	and.w	r3, r3, #1
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00d      	beq.n	800be26 <put_fat+0xb8>
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	b25b      	sxtb	r3, r3
 800be10:	f003 030f 	and.w	r3, r3, #15
 800be14:	b25a      	sxtb	r2, r3
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	011b      	lsls	r3, r3, #4
 800be1c:	b25b      	sxtb	r3, r3
 800be1e:	4313      	orrs	r3, r2
 800be20:	b25b      	sxtb	r3, r3
 800be22:	b2db      	uxtb	r3, r3
 800be24:	e001      	b.n	800be2a <put_fat+0xbc>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	697a      	ldr	r2, [r7, #20]
 800be2c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2201      	movs	r2, #1
 800be32:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	899b      	ldrh	r3, [r3, #12]
 800be3c:	4619      	mov	r1, r3
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	fbb3 f3f1 	udiv	r3, r3, r1
 800be44:	4413      	add	r3, r2
 800be46:	4619      	mov	r1, r3
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f7ff fdff 	bl	800ba4c <move_window>
 800be4e:	4603      	mov	r3, r0
 800be50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be52:	7ffb      	ldrb	r3, [r7, #31]
 800be54:	2b00      	cmp	r3, #0
 800be56:	f040 809c 	bne.w	800bf92 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	899b      	ldrh	r3, [r3, #12]
 800be64:	461a      	mov	r2, r3
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	fbb3 f0f2 	udiv	r0, r3, r2
 800be6c:	fb00 f202 	mul.w	r2, r0, r2
 800be70:	1a9b      	subs	r3, r3, r2
 800be72:	440b      	add	r3, r1
 800be74:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	f003 0301 	and.w	r3, r3, #1
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d003      	beq.n	800be88 <put_fat+0x11a>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	091b      	lsrs	r3, r3, #4
 800be84:	b2db      	uxtb	r3, r3
 800be86:	e00e      	b.n	800bea6 <put_fat+0x138>
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	b25b      	sxtb	r3, r3
 800be8e:	f023 030f 	bic.w	r3, r3, #15
 800be92:	b25a      	sxtb	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	0a1b      	lsrs	r3, r3, #8
 800be98:	b25b      	sxtb	r3, r3
 800be9a:	f003 030f 	and.w	r3, r3, #15
 800be9e:	b25b      	sxtb	r3, r3
 800bea0:	4313      	orrs	r3, r2
 800bea2:	b25b      	sxtb	r3, r3
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2201      	movs	r2, #1
 800beae:	70da      	strb	r2, [r3, #3]
			break;
 800beb0:	e074      	b.n	800bf9c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	899b      	ldrh	r3, [r3, #12]
 800beba:	085b      	lsrs	r3, r3, #1
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	4619      	mov	r1, r3
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	fbb3 f3f1 	udiv	r3, r3, r1
 800bec6:	4413      	add	r3, r2
 800bec8:	4619      	mov	r1, r3
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f7ff fdbe 	bl	800ba4c <move_window>
 800bed0:	4603      	mov	r3, r0
 800bed2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bed4:	7ffb      	ldrb	r3, [r7, #31]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d15d      	bne.n	800bf96 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	8992      	ldrh	r2, [r2, #12]
 800bee8:	fbb3 f0f2 	udiv	r0, r3, r2
 800beec:	fb00 f202 	mul.w	r2, r0, r2
 800bef0:	1a9b      	subs	r3, r3, r2
 800bef2:	440b      	add	r3, r1
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	b292      	uxth	r2, r2
 800bef8:	4611      	mov	r1, r2
 800befa:	4618      	mov	r0, r3
 800befc:	f7ff fb31 	bl	800b562 <st_word>
			fs->wflag = 1;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2201      	movs	r2, #1
 800bf04:	70da      	strb	r2, [r3, #3]
			break;
 800bf06:	e049      	b.n	800bf9c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	899b      	ldrh	r3, [r3, #12]
 800bf10:	089b      	lsrs	r3, r3, #2
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	4619      	mov	r1, r3
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf1c:	4413      	add	r3, r2
 800bf1e:	4619      	mov	r1, r3
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f7ff fd93 	bl	800ba4c <move_window>
 800bf26:	4603      	mov	r3, r0
 800bf28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf2a:	7ffb      	ldrb	r3, [r7, #31]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d134      	bne.n	800bf9a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	8992      	ldrh	r2, [r2, #12]
 800bf44:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf48:	fb00 f202 	mul.w	r2, r0, r2
 800bf4c:	1a9b      	subs	r3, r3, r2
 800bf4e:	440b      	add	r3, r1
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7ff fae3 	bl	800b51c <ld_dword>
 800bf56:	4603      	mov	r3, r0
 800bf58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bf5c:	4323      	orrs	r3, r4
 800bf5e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	8992      	ldrh	r2, [r2, #12]
 800bf6e:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf72:	fb00 f202 	mul.w	r2, r0, r2
 800bf76:	1a9b      	subs	r3, r3, r2
 800bf78:	440b      	add	r3, r1
 800bf7a:	6879      	ldr	r1, [r7, #4]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7ff fb0b 	bl	800b598 <st_dword>
			fs->wflag = 1;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2201      	movs	r2, #1
 800bf86:	70da      	strb	r2, [r3, #3]
			break;
 800bf88:	e008      	b.n	800bf9c <put_fat+0x22e>
		}
	}
 800bf8a:	bf00      	nop
 800bf8c:	e006      	b.n	800bf9c <put_fat+0x22e>
			if (res != FR_OK) break;
 800bf8e:	bf00      	nop
 800bf90:	e004      	b.n	800bf9c <put_fat+0x22e>
			if (res != FR_OK) break;
 800bf92:	bf00      	nop
 800bf94:	e002      	b.n	800bf9c <put_fat+0x22e>
			if (res != FR_OK) break;
 800bf96:	bf00      	nop
 800bf98:	e000      	b.n	800bf9c <put_fat+0x22e>
			if (res != FR_OK) break;
 800bf9a:	bf00      	nop
	return res;
 800bf9c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3724      	adds	r7, #36	; 0x24
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd90      	pop	{r4, r7, pc}

0800bfa6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b088      	sub	sp, #32
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	60f8      	str	r0, [r7, #12]
 800bfae:	60b9      	str	r1, [r7, #8]
 800bfb0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d904      	bls.n	800bfcc <remove_chain+0x26>
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	69db      	ldr	r3, [r3, #28]
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d301      	bcc.n	800bfd0 <remove_chain+0x2a>
 800bfcc:	2302      	movs	r3, #2
 800bfce:	e04b      	b.n	800c068 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00c      	beq.n	800bff0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bfd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfda:	6879      	ldr	r1, [r7, #4]
 800bfdc:	69b8      	ldr	r0, [r7, #24]
 800bfde:	f7ff fec6 	bl	800bd6e <put_fat>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bfe6:	7ffb      	ldrb	r3, [r7, #31]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d001      	beq.n	800bff0 <remove_chain+0x4a>
 800bfec:	7ffb      	ldrb	r3, [r7, #31]
 800bfee:	e03b      	b.n	800c068 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bff0:	68b9      	ldr	r1, [r7, #8]
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f7ff fde7 	bl	800bbc6 <get_fat>
 800bff8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d031      	beq.n	800c064 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	2b01      	cmp	r3, #1
 800c004:	d101      	bne.n	800c00a <remove_chain+0x64>
 800c006:	2302      	movs	r3, #2
 800c008:	e02e      	b.n	800c068 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c010:	d101      	bne.n	800c016 <remove_chain+0x70>
 800c012:	2301      	movs	r3, #1
 800c014:	e028      	b.n	800c068 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c016:	2200      	movs	r2, #0
 800c018:	68b9      	ldr	r1, [r7, #8]
 800c01a:	69b8      	ldr	r0, [r7, #24]
 800c01c:	f7ff fea7 	bl	800bd6e <put_fat>
 800c020:	4603      	mov	r3, r0
 800c022:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c024:	7ffb      	ldrb	r3, [r7, #31]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <remove_chain+0x88>
 800c02a:	7ffb      	ldrb	r3, [r7, #31]
 800c02c:	e01c      	b.n	800c068 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	699a      	ldr	r2, [r3, #24]
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	69db      	ldr	r3, [r3, #28]
 800c036:	3b02      	subs	r3, #2
 800c038:	429a      	cmp	r2, r3
 800c03a:	d20b      	bcs.n	800c054 <remove_chain+0xae>
			fs->free_clst++;
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	699b      	ldr	r3, [r3, #24]
 800c040:	1c5a      	adds	r2, r3, #1
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	791b      	ldrb	r3, [r3, #4]
 800c04a:	f043 0301 	orr.w	r3, r3, #1
 800c04e:	b2da      	uxtb	r2, r3
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	69db      	ldr	r3, [r3, #28]
 800c05c:	68ba      	ldr	r2, [r7, #8]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d3c6      	bcc.n	800bff0 <remove_chain+0x4a>
 800c062:	e000      	b.n	800c066 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c064:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3720      	adds	r7, #32
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b088      	sub	sp, #32
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10d      	bne.n	800c0a2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	695b      	ldr	r3, [r3, #20]
 800c08a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d004      	beq.n	800c09c <create_chain+0x2c>
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	69db      	ldr	r3, [r3, #28]
 800c096:	69ba      	ldr	r2, [r7, #24]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d31b      	bcc.n	800c0d4 <create_chain+0x64>
 800c09c:	2301      	movs	r3, #1
 800c09e:	61bb      	str	r3, [r7, #24]
 800c0a0:	e018      	b.n	800c0d4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c0a2:	6839      	ldr	r1, [r7, #0]
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7ff fd8e 	bl	800bbc6 <get_fat>
 800c0aa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d801      	bhi.n	800c0b6 <create_chain+0x46>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e070      	b.n	800c198 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0bc:	d101      	bne.n	800c0c2 <create_chain+0x52>
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	e06a      	b.n	800c198 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	69db      	ldr	r3, [r3, #28]
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d201      	bcs.n	800c0d0 <create_chain+0x60>
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	e063      	b.n	800c198 <create_chain+0x128>
		scl = clst;
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c0d4:	69bb      	ldr	r3, [r7, #24]
 800c0d6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	69db      	ldr	r3, [r3, #28]
 800c0e2:	69fa      	ldr	r2, [r7, #28]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d307      	bcc.n	800c0f8 <create_chain+0x88>
				ncl = 2;
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c0ec:	69fa      	ldr	r2, [r7, #28]
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d901      	bls.n	800c0f8 <create_chain+0x88>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	e04f      	b.n	800c198 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c0f8:	69f9      	ldr	r1, [r7, #28]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f7ff fd63 	bl	800bbc6 <get_fat>
 800c100:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00e      	beq.n	800c126 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d003      	beq.n	800c116 <create_chain+0xa6>
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c114:	d101      	bne.n	800c11a <create_chain+0xaa>
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	e03e      	b.n	800c198 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c11a:	69fa      	ldr	r2, [r7, #28]
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d1da      	bne.n	800c0d8 <create_chain+0x68>
 800c122:	2300      	movs	r3, #0
 800c124:	e038      	b.n	800c198 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c126:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c12c:	69f9      	ldr	r1, [r7, #28]
 800c12e:	6938      	ldr	r0, [r7, #16]
 800c130:	f7ff fe1d 	bl	800bd6e <put_fat>
 800c134:	4603      	mov	r3, r0
 800c136:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c138:	7dfb      	ldrb	r3, [r7, #23]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d109      	bne.n	800c152 <create_chain+0xe2>
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d006      	beq.n	800c152 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c144:	69fa      	ldr	r2, [r7, #28]
 800c146:	6839      	ldr	r1, [r7, #0]
 800c148:	6938      	ldr	r0, [r7, #16]
 800c14a:	f7ff fe10 	bl	800bd6e <put_fat>
 800c14e:	4603      	mov	r3, r0
 800c150:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c152:	7dfb      	ldrb	r3, [r7, #23]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d116      	bne.n	800c186 <create_chain+0x116>
		fs->last_clst = ncl;
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	69fa      	ldr	r2, [r7, #28]
 800c15c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	699a      	ldr	r2, [r3, #24]
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	3b02      	subs	r3, #2
 800c168:	429a      	cmp	r2, r3
 800c16a:	d804      	bhi.n	800c176 <create_chain+0x106>
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	699b      	ldr	r3, [r3, #24]
 800c170:	1e5a      	subs	r2, r3, #1
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	791b      	ldrb	r3, [r3, #4]
 800c17a:	f043 0301 	orr.w	r3, r3, #1
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	711a      	strb	r2, [r3, #4]
 800c184:	e007      	b.n	800c196 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c186:	7dfb      	ldrb	r3, [r7, #23]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d102      	bne.n	800c192 <create_chain+0x122>
 800c18c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c190:	e000      	b.n	800c194 <create_chain+0x124>
 800c192:	2301      	movs	r3, #1
 800c194:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c196:	69fb      	ldr	r3, [r7, #28]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3720      	adds	r7, #32
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b087      	sub	sp, #28
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	899b      	ldrh	r3, [r3, #12]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	8952      	ldrh	r2, [r2, #10]
 800c1c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	1d1a      	adds	r2, r3, #4
 800c1d2:	613a      	str	r2, [r7, #16]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d101      	bne.n	800c1e2 <clmt_clust+0x42>
 800c1de:	2300      	movs	r3, #0
 800c1e0:	e010      	b.n	800c204 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c1e2:	697a      	ldr	r2, [r7, #20]
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d307      	bcc.n	800c1fa <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c1ea:	697a      	ldr	r2, [r7, #20]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	617b      	str	r3, [r7, #20]
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c1f8:	e7e9      	b.n	800c1ce <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c1fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	4413      	add	r3, r2
}
 800c204:	4618      	mov	r0, r3
 800c206:	371c      	adds	r7, #28
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b086      	sub	sp, #24
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c226:	d204      	bcs.n	800c232 <dir_sdi+0x22>
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	f003 031f 	and.w	r3, r3, #31
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d001      	beq.n	800c236 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c232:	2302      	movs	r3, #2
 800c234:	e071      	b.n	800c31a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	683a      	ldr	r2, [r7, #0]
 800c23a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d106      	bne.n	800c256 <dir_sdi+0x46>
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	d902      	bls.n	800c256 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c254:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d10c      	bne.n	800c276 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	095b      	lsrs	r3, r3, #5
 800c260:	693a      	ldr	r2, [r7, #16]
 800c262:	8912      	ldrh	r2, [r2, #8]
 800c264:	4293      	cmp	r3, r2
 800c266:	d301      	bcc.n	800c26c <dir_sdi+0x5c>
 800c268:	2302      	movs	r3, #2
 800c26a:	e056      	b.n	800c31a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	61da      	str	r2, [r3, #28]
 800c274:	e02d      	b.n	800c2d2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	895b      	ldrh	r3, [r3, #10]
 800c27a:	461a      	mov	r2, r3
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	899b      	ldrh	r3, [r3, #12]
 800c280:	fb02 f303 	mul.w	r3, r2, r3
 800c284:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c286:	e019      	b.n	800c2bc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6979      	ldr	r1, [r7, #20]
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff fc9a 	bl	800bbc6 <get_fat>
 800c292:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c29a:	d101      	bne.n	800c2a0 <dir_sdi+0x90>
 800c29c:	2301      	movs	r3, #1
 800c29e:	e03c      	b.n	800c31a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d904      	bls.n	800c2b0 <dir_sdi+0xa0>
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	69db      	ldr	r3, [r3, #28]
 800c2aa:	697a      	ldr	r2, [r7, #20]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d301      	bcc.n	800c2b4 <dir_sdi+0xa4>
 800c2b0:	2302      	movs	r3, #2
 800c2b2:	e032      	b.n	800c31a <dir_sdi+0x10a>
			ofs -= csz;
 800c2b4:	683a      	ldr	r2, [r7, #0]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	1ad3      	subs	r3, r2, r3
 800c2ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d2e1      	bcs.n	800c288 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c2c4:	6979      	ldr	r1, [r7, #20]
 800c2c6:	6938      	ldr	r0, [r7, #16]
 800c2c8:	f7ff fc5e 	bl	800bb88 <clust2sect>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	697a      	ldr	r2, [r7, #20]
 800c2d6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	69db      	ldr	r3, [r3, #28]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d101      	bne.n	800c2e4 <dir_sdi+0xd4>
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	e01a      	b.n	800c31a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	69da      	ldr	r2, [r3, #28]
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	899b      	ldrh	r3, [r3, #12]
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	fbb3 f3f1 	udiv	r3, r3, r1
 800c2f4:	441a      	add	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	899b      	ldrh	r3, [r3, #12]
 800c304:	461a      	mov	r2, r3
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	fbb3 f0f2 	udiv	r0, r3, r2
 800c30c:	fb00 f202 	mul.w	r2, r0, r2
 800c310:	1a9b      	subs	r3, r3, r2
 800c312:	18ca      	adds	r2, r1, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3718      	adds	r7, #24
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b086      	sub	sp, #24
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	695b      	ldr	r3, [r3, #20]
 800c336:	3320      	adds	r3, #32
 800c338:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	69db      	ldr	r3, [r3, #28]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <dir_next+0x28>
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c348:	d301      	bcc.n	800c34e <dir_next+0x2c>
 800c34a:	2304      	movs	r3, #4
 800c34c:	e0bb      	b.n	800c4c6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	899b      	ldrh	r3, [r3, #12]
 800c352:	461a      	mov	r2, r3
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	fbb3 f1f2 	udiv	r1, r3, r2
 800c35a:	fb01 f202 	mul.w	r2, r1, r2
 800c35e:	1a9b      	subs	r3, r3, r2
 800c360:	2b00      	cmp	r3, #0
 800c362:	f040 809d 	bne.w	800c4a0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	69db      	ldr	r3, [r3, #28]
 800c36a:	1c5a      	adds	r2, r3, #1
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10b      	bne.n	800c390 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	095b      	lsrs	r3, r3, #5
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	8912      	ldrh	r2, [r2, #8]
 800c380:	4293      	cmp	r3, r2
 800c382:	f0c0 808d 	bcc.w	800c4a0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2200      	movs	r2, #0
 800c38a:	61da      	str	r2, [r3, #28]
 800c38c:	2304      	movs	r3, #4
 800c38e:	e09a      	b.n	800c4c6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	899b      	ldrh	r3, [r3, #12]
 800c394:	461a      	mov	r2, r3
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	fbb3 f3f2 	udiv	r3, r3, r2
 800c39c:	68fa      	ldr	r2, [r7, #12]
 800c39e:	8952      	ldrh	r2, [r2, #10]
 800c3a0:	3a01      	subs	r2, #1
 800c3a2:	4013      	ands	r3, r2
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d17b      	bne.n	800c4a0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	699b      	ldr	r3, [r3, #24]
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	4610      	mov	r0, r2
 800c3b2:	f7ff fc08 	bl	800bbc6 <get_fat>
 800c3b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d801      	bhi.n	800c3c2 <dir_next+0xa0>
 800c3be:	2302      	movs	r3, #2
 800c3c0:	e081      	b.n	800c4c6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3c8:	d101      	bne.n	800c3ce <dir_next+0xac>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e07b      	b.n	800c4c6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	69db      	ldr	r3, [r3, #28]
 800c3d2:	697a      	ldr	r2, [r7, #20]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d359      	bcc.n	800c48c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d104      	bne.n	800c3e8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	61da      	str	r2, [r3, #28]
 800c3e4:	2304      	movs	r3, #4
 800c3e6:	e06e      	b.n	800c4c6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	699b      	ldr	r3, [r3, #24]
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	f7ff fe3d 	bl	800c070 <create_chain>
 800c3f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <dir_next+0xe0>
 800c3fe:	2307      	movs	r3, #7
 800c400:	e061      	b.n	800c4c6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	2b01      	cmp	r3, #1
 800c406:	d101      	bne.n	800c40c <dir_next+0xea>
 800c408:	2302      	movs	r3, #2
 800c40a:	e05c      	b.n	800c4c6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c412:	d101      	bne.n	800c418 <dir_next+0xf6>
 800c414:	2301      	movs	r3, #1
 800c416:	e056      	b.n	800c4c6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f7ff fad3 	bl	800b9c4 <sync_window>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <dir_next+0x106>
 800c424:	2301      	movs	r3, #1
 800c426:	e04e      	b.n	800c4c6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	899b      	ldrh	r3, [r3, #12]
 800c432:	461a      	mov	r2, r3
 800c434:	2100      	movs	r1, #0
 800c436:	f7ff f8fc 	bl	800b632 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c43a:	2300      	movs	r3, #0
 800c43c:	613b      	str	r3, [r7, #16]
 800c43e:	6979      	ldr	r1, [r7, #20]
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f7ff fba1 	bl	800bb88 <clust2sect>
 800c446:	4602      	mov	r2, r0
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	635a      	str	r2, [r3, #52]	; 0x34
 800c44c:	e012      	b.n	800c474 <dir_next+0x152>
						fs->wflag = 1;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2201      	movs	r2, #1
 800c452:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f7ff fab5 	bl	800b9c4 <sync_window>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d001      	beq.n	800c464 <dir_next+0x142>
 800c460:	2301      	movs	r3, #1
 800c462:	e030      	b.n	800c4c6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	3301      	adds	r3, #1
 800c468:	613b      	str	r3, [r7, #16]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c46e:	1c5a      	adds	r2, r3, #1
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	635a      	str	r2, [r3, #52]	; 0x34
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	895b      	ldrh	r3, [r3, #10]
 800c478:	461a      	mov	r2, r3
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d3e6      	bcc.n	800c44e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	1ad2      	subs	r2, r2, r3
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	697a      	ldr	r2, [r7, #20]
 800c490:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c492:	6979      	ldr	r1, [r7, #20]
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f7ff fb77 	bl	800bb88 <clust2sect>
 800c49a:	4602      	mov	r2, r0
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	68ba      	ldr	r2, [r7, #8]
 800c4a4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	899b      	ldrh	r3, [r3, #12]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c4b8:	fb00 f202 	mul.w	r2, r0, r2
 800c4bc:	1a9b      	subs	r3, r3, r2
 800c4be:	18ca      	adds	r2, r1, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3718      	adds	r7, #24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b086      	sub	sp, #24
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
 800c4d6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c4de:	2100      	movs	r1, #0
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f7ff fe95 	bl	800c210 <dir_sdi>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c4ea:	7dfb      	ldrb	r3, [r7, #23]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d12b      	bne.n	800c548 <dir_alloc+0x7a>
		n = 0;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	69db      	ldr	r3, [r3, #28]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f7ff faa6 	bl	800ba4c <move_window>
 800c500:	4603      	mov	r3, r0
 800c502:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c504:	7dfb      	ldrb	r3, [r7, #23]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d11d      	bne.n	800c546 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6a1b      	ldr	r3, [r3, #32]
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	2be5      	cmp	r3, #229	; 0xe5
 800c512:	d004      	beq.n	800c51e <dir_alloc+0x50>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6a1b      	ldr	r3, [r3, #32]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d107      	bne.n	800c52e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	3301      	adds	r3, #1
 800c522:	613b      	str	r3, [r7, #16]
 800c524:	693a      	ldr	r2, [r7, #16]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d102      	bne.n	800c532 <dir_alloc+0x64>
 800c52c:	e00c      	b.n	800c548 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c52e:	2300      	movs	r3, #0
 800c530:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c532:	2101      	movs	r1, #1
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f7ff fef4 	bl	800c322 <dir_next>
 800c53a:	4603      	mov	r3, r0
 800c53c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c53e:	7dfb      	ldrb	r3, [r7, #23]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d0d7      	beq.n	800c4f4 <dir_alloc+0x26>
 800c544:	e000      	b.n	800c548 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c546:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c548:	7dfb      	ldrb	r3, [r7, #23]
 800c54a:	2b04      	cmp	r3, #4
 800c54c:	d101      	bne.n	800c552 <dir_alloc+0x84>
 800c54e:	2307      	movs	r3, #7
 800c550:	75fb      	strb	r3, [r7, #23]
	return res;
 800c552:	7dfb      	ldrb	r3, [r7, #23]
}
 800c554:	4618      	mov	r0, r3
 800c556:	3718      	adds	r7, #24
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	331a      	adds	r3, #26
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fe ffbe 	bl	800b4ec <ld_word>
 800c570:	4603      	mov	r3, r0
 800c572:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d109      	bne.n	800c590 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	3314      	adds	r3, #20
 800c580:	4618      	mov	r0, r3
 800c582:	f7fe ffb3 	bl	800b4ec <ld_word>
 800c586:	4603      	mov	r3, r0
 800c588:	041b      	lsls	r3, r3, #16
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	4313      	orrs	r3, r2
 800c58e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c590:	68fb      	ldr	r3, [r7, #12]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b084      	sub	sp, #16
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	60f8      	str	r0, [r7, #12]
 800c5a2:	60b9      	str	r1, [r7, #8]
 800c5a4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	331a      	adds	r3, #26
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	b292      	uxth	r2, r2
 800c5ae:	4611      	mov	r1, r2
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7fe ffd6 	bl	800b562 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	2b03      	cmp	r3, #3
 800c5bc:	d109      	bne.n	800c5d2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	f103 0214 	add.w	r2, r3, #20
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	0c1b      	lsrs	r3, r3, #16
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	4610      	mov	r0, r2
 800c5ce:	f7fe ffc8 	bl	800b562 <st_word>
	}
}
 800c5d2:	bf00      	nop
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
	...

0800c5dc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c5dc:	b590      	push	{r4, r7, lr}
 800c5de:	b087      	sub	sp, #28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	331a      	adds	r3, #26
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe ff7e 	bl	800b4ec <ld_word>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d001      	beq.n	800c5fa <cmp_lfn+0x1e>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e059      	b.n	800c6ae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c602:	1e5a      	subs	r2, r3, #1
 800c604:	4613      	mov	r3, r2
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	4413      	add	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4413      	add	r3, r2
 800c60e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c610:	2301      	movs	r3, #1
 800c612:	81fb      	strh	r3, [r7, #14]
 800c614:	2300      	movs	r3, #0
 800c616:	613b      	str	r3, [r7, #16]
 800c618:	e033      	b.n	800c682 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c61a:	4a27      	ldr	r2, [pc, #156]	; (800c6b8 <cmp_lfn+0xdc>)
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	4413      	add	r3, r2
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	461a      	mov	r2, r3
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	4413      	add	r3, r2
 800c628:	4618      	mov	r0, r3
 800c62a:	f7fe ff5f 	bl	800b4ec <ld_word>
 800c62e:	4603      	mov	r3, r0
 800c630:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c632:	89fb      	ldrh	r3, [r7, #14]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d01a      	beq.n	800c66e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	2bfe      	cmp	r3, #254	; 0xfe
 800c63c:	d812      	bhi.n	800c664 <cmp_lfn+0x88>
 800c63e:	89bb      	ldrh	r3, [r7, #12]
 800c640:	4618      	mov	r0, r3
 800c642:	f002 fcb1 	bl	800efa8 <ff_wtoupper>
 800c646:	4603      	mov	r3, r0
 800c648:	461c      	mov	r4, r3
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	1c5a      	adds	r2, r3, #1
 800c64e:	617a      	str	r2, [r7, #20]
 800c650:	005b      	lsls	r3, r3, #1
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	4413      	add	r3, r2
 800c656:	881b      	ldrh	r3, [r3, #0]
 800c658:	4618      	mov	r0, r3
 800c65a:	f002 fca5 	bl	800efa8 <ff_wtoupper>
 800c65e:	4603      	mov	r3, r0
 800c660:	429c      	cmp	r4, r3
 800c662:	d001      	beq.n	800c668 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c664:	2300      	movs	r3, #0
 800c666:	e022      	b.n	800c6ae <cmp_lfn+0xd2>
			}
			wc = uc;
 800c668:	89bb      	ldrh	r3, [r7, #12]
 800c66a:	81fb      	strh	r3, [r7, #14]
 800c66c:	e006      	b.n	800c67c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c66e:	89bb      	ldrh	r3, [r7, #12]
 800c670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c674:	4293      	cmp	r3, r2
 800c676:	d001      	beq.n	800c67c <cmp_lfn+0xa0>
 800c678:	2300      	movs	r3, #0
 800c67a:	e018      	b.n	800c6ae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	3301      	adds	r3, #1
 800c680:	613b      	str	r3, [r7, #16]
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	2b0c      	cmp	r3, #12
 800c686:	d9c8      	bls.n	800c61a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00b      	beq.n	800c6ac <cmp_lfn+0xd0>
 800c694:	89fb      	ldrh	r3, [r7, #14]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d008      	beq.n	800c6ac <cmp_lfn+0xd0>
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	005b      	lsls	r3, r3, #1
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <cmp_lfn+0xd0>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	e000      	b.n	800c6ae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c6ac:	2301      	movs	r3, #1
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	371c      	adds	r7, #28
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd90      	pop	{r4, r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	08010280 	.word	0x08010280

0800c6bc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	331a      	adds	r3, #26
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fe ff0e 	bl	800b4ec <ld_word>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d001      	beq.n	800c6da <pick_lfn+0x1e>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	e04d      	b.n	800c776 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6e2:	1e5a      	subs	r2, r3, #1
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	005b      	lsls	r3, r3, #1
 800c6e8:	4413      	add	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	4413      	add	r3, r2
 800c6ee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	81fb      	strh	r3, [r7, #14]
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	613b      	str	r3, [r7, #16]
 800c6f8:	e028      	b.n	800c74c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c6fa:	4a21      	ldr	r2, [pc, #132]	; (800c780 <pick_lfn+0xc4>)
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	4413      	add	r3, r2
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	461a      	mov	r2, r3
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	4413      	add	r3, r2
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fe feef 	bl	800b4ec <ld_word>
 800c70e:	4603      	mov	r3, r0
 800c710:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c712:	89fb      	ldrh	r3, [r7, #14]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d00f      	beq.n	800c738 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	2bfe      	cmp	r3, #254	; 0xfe
 800c71c:	d901      	bls.n	800c722 <pick_lfn+0x66>
 800c71e:	2300      	movs	r3, #0
 800c720:	e029      	b.n	800c776 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c722:	89bb      	ldrh	r3, [r7, #12]
 800c724:	81fb      	strh	r3, [r7, #14]
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	1c5a      	adds	r2, r3, #1
 800c72a:	617a      	str	r2, [r7, #20]
 800c72c:	005b      	lsls	r3, r3, #1
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	4413      	add	r3, r2
 800c732:	89fa      	ldrh	r2, [r7, #14]
 800c734:	801a      	strh	r2, [r3, #0]
 800c736:	e006      	b.n	800c746 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c738:	89bb      	ldrh	r3, [r7, #12]
 800c73a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c73e:	4293      	cmp	r3, r2
 800c740:	d001      	beq.n	800c746 <pick_lfn+0x8a>
 800c742:	2300      	movs	r3, #0
 800c744:	e017      	b.n	800c776 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	3301      	adds	r3, #1
 800c74a:	613b      	str	r3, [r7, #16]
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	2b0c      	cmp	r3, #12
 800c750:	d9d3      	bls.n	800c6fa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00a      	beq.n	800c774 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	2bfe      	cmp	r3, #254	; 0xfe
 800c762:	d901      	bls.n	800c768 <pick_lfn+0xac>
 800c764:	2300      	movs	r3, #0
 800c766:	e006      	b.n	800c776 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	005b      	lsls	r3, r3, #1
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	4413      	add	r3, r2
 800c770:	2200      	movs	r2, #0
 800c772:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c774:	2301      	movs	r3, #1
}
 800c776:	4618      	mov	r0, r3
 800c778:	3718      	adds	r7, #24
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	08010280 	.word	0x08010280

0800c784 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b088      	sub	sp, #32
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	4611      	mov	r1, r2
 800c790:	461a      	mov	r2, r3
 800c792:	460b      	mov	r3, r1
 800c794:	71fb      	strb	r3, [r7, #7]
 800c796:	4613      	mov	r3, r2
 800c798:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	330d      	adds	r3, #13
 800c79e:	79ba      	ldrb	r2, [r7, #6]
 800c7a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	330b      	adds	r3, #11
 800c7a6:	220f      	movs	r2, #15
 800c7a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	330c      	adds	r3, #12
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	331a      	adds	r3, #26
 800c7b6:	2100      	movs	r1, #0
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe fed2 	bl	800b562 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c7be:	79fb      	ldrb	r3, [r7, #7]
 800c7c0:	1e5a      	subs	r2, r3, #1
 800c7c2:	4613      	mov	r3, r2
 800c7c4:	005b      	lsls	r3, r3, #1
 800c7c6:	4413      	add	r3, r2
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	4413      	add	r3, r2
 800c7cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	82fb      	strh	r3, [r7, #22]
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c7d6:	8afb      	ldrh	r3, [r7, #22]
 800c7d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d007      	beq.n	800c7f0 <put_lfn+0x6c>
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	1c5a      	adds	r2, r3, #1
 800c7e4:	61fa      	str	r2, [r7, #28]
 800c7e6:	005b      	lsls	r3, r3, #1
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	881b      	ldrh	r3, [r3, #0]
 800c7ee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c7f0:	4a17      	ldr	r2, [pc, #92]	; (800c850 <put_lfn+0xcc>)
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	8afa      	ldrh	r2, [r7, #22]
 800c800:	4611      	mov	r1, r2
 800c802:	4618      	mov	r0, r3
 800c804:	f7fe fead 	bl	800b562 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c808:	8afb      	ldrh	r3, [r7, #22]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d102      	bne.n	800c814 <put_lfn+0x90>
 800c80e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c812:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	3301      	adds	r3, #1
 800c818:	61bb      	str	r3, [r7, #24]
 800c81a:	69bb      	ldr	r3, [r7, #24]
 800c81c:	2b0c      	cmp	r3, #12
 800c81e:	d9da      	bls.n	800c7d6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c820:	8afb      	ldrh	r3, [r7, #22]
 800c822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c826:	4293      	cmp	r3, r2
 800c828:	d006      	beq.n	800c838 <put_lfn+0xb4>
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	68fa      	ldr	r2, [r7, #12]
 800c830:	4413      	add	r3, r2
 800c832:	881b      	ldrh	r3, [r3, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d103      	bne.n	800c840 <put_lfn+0xbc>
 800c838:	79fb      	ldrb	r3, [r7, #7]
 800c83a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c83e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	79fa      	ldrb	r2, [r7, #7]
 800c844:	701a      	strb	r2, [r3, #0]
}
 800c846:	bf00      	nop
 800c848:	3720      	adds	r7, #32
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	08010280 	.word	0x08010280

0800c854 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b08c      	sub	sp, #48	; 0x30
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	607a      	str	r2, [r7, #4]
 800c860:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c862:	220b      	movs	r2, #11
 800c864:	68b9      	ldr	r1, [r7, #8]
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f7fe fec2 	bl	800b5f0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	2b05      	cmp	r3, #5
 800c870:	d92b      	bls.n	800c8ca <gen_numname+0x76>
		sr = seq;
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c876:	e022      	b.n	800c8be <gen_numname+0x6a>
			wc = *lfn++;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	1c9a      	adds	r2, r3, #2
 800c87c:	607a      	str	r2, [r7, #4]
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c882:	2300      	movs	r3, #0
 800c884:	62bb      	str	r3, [r7, #40]	; 0x28
 800c886:	e017      	b.n	800c8b8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	005a      	lsls	r2, r3, #1
 800c88c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c88e:	f003 0301 	and.w	r3, r3, #1
 800c892:	4413      	add	r3, r2
 800c894:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c896:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c898:	085b      	lsrs	r3, r3, #1
 800c89a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d005      	beq.n	800c8b2 <gen_numname+0x5e>
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c8ac:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c8b0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ba:	2b0f      	cmp	r3, #15
 800c8bc:	d9e4      	bls.n	800c888 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	881b      	ldrh	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d1d8      	bne.n	800c878 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c8ca:	2307      	movs	r3, #7
 800c8cc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	f003 030f 	and.w	r3, r3, #15
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	3330      	adds	r3, #48	; 0x30
 800c8da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c8de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8e2:	2b39      	cmp	r3, #57	; 0x39
 800c8e4:	d904      	bls.n	800c8f0 <gen_numname+0x9c>
 800c8e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8ea:	3307      	adds	r3, #7
 800c8ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f2:	1e5a      	subs	r2, r3, #1
 800c8f4:	62ba      	str	r2, [r7, #40]	; 0x28
 800c8f6:	3330      	adds	r3, #48	; 0x30
 800c8f8:	443b      	add	r3, r7
 800c8fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c8fe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	091b      	lsrs	r3, r3, #4
 800c906:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1df      	bne.n	800c8ce <gen_numname+0x7a>
	ns[i] = '~';
 800c90e:	f107 0214 	add.w	r2, r7, #20
 800c912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c914:	4413      	add	r3, r2
 800c916:	227e      	movs	r2, #126	; 0x7e
 800c918:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c91a:	2300      	movs	r3, #0
 800c91c:	627b      	str	r3, [r7, #36]	; 0x24
 800c91e:	e002      	b.n	800c926 <gen_numname+0xd2>
 800c920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c922:	3301      	adds	r3, #1
 800c924:	627b      	str	r3, [r7, #36]	; 0x24
 800c926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d205      	bcs.n	800c93a <gen_numname+0xe6>
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c932:	4413      	add	r3, r2
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	2b20      	cmp	r3, #32
 800c938:	d1f2      	bne.n	800c920 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93c:	2b07      	cmp	r3, #7
 800c93e:	d807      	bhi.n	800c950 <gen_numname+0xfc>
 800c940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c942:	1c5a      	adds	r2, r3, #1
 800c944:	62ba      	str	r2, [r7, #40]	; 0x28
 800c946:	3330      	adds	r3, #48	; 0x30
 800c948:	443b      	add	r3, r7
 800c94a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c94e:	e000      	b.n	800c952 <gen_numname+0xfe>
 800c950:	2120      	movs	r1, #32
 800c952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c954:	1c5a      	adds	r2, r3, #1
 800c956:	627a      	str	r2, [r7, #36]	; 0x24
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	4413      	add	r3, r2
 800c95c:	460a      	mov	r2, r1
 800c95e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c962:	2b07      	cmp	r3, #7
 800c964:	d9e9      	bls.n	800c93a <gen_numname+0xe6>
}
 800c966:	bf00      	nop
 800c968:	bf00      	nop
 800c96a:	3730      	adds	r7, #48	; 0x30
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c978:	2300      	movs	r3, #0
 800c97a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c97c:	230b      	movs	r3, #11
 800c97e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c980:	7bfb      	ldrb	r3, [r7, #15]
 800c982:	b2da      	uxtb	r2, r3
 800c984:	0852      	lsrs	r2, r2, #1
 800c986:	01db      	lsls	r3, r3, #7
 800c988:	4313      	orrs	r3, r2
 800c98a:	b2da      	uxtb	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	1c59      	adds	r1, r3, #1
 800c990:	6079      	str	r1, [r7, #4]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	4413      	add	r3, r2
 800c996:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	3b01      	subs	r3, #1
 800c99c:	60bb      	str	r3, [r7, #8]
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d1ed      	bne.n	800c980 <sum_sfn+0x10>
	return sum;
 800c9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b086      	sub	sp, #24
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c9bc:	2304      	movs	r3, #4
 800c9be:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c9c6:	23ff      	movs	r3, #255	; 0xff
 800c9c8:	757b      	strb	r3, [r7, #21]
 800c9ca:	23ff      	movs	r3, #255	; 0xff
 800c9cc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c9ce:	e081      	b.n	800cad4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	69db      	ldr	r3, [r3, #28]
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	6938      	ldr	r0, [r7, #16]
 800c9d8:	f7ff f838 	bl	800ba4c <move_window>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c9e0:	7dfb      	ldrb	r3, [r7, #23]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d17c      	bne.n	800cae0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6a1b      	ldr	r3, [r3, #32]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c9ee:	7dbb      	ldrb	r3, [r7, #22]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d102      	bne.n	800c9fa <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c9f4:	2304      	movs	r3, #4
 800c9f6:	75fb      	strb	r3, [r7, #23]
 800c9f8:	e077      	b.n	800caea <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a1b      	ldr	r3, [r3, #32]
 800c9fe:	330b      	adds	r3, #11
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca06:	73fb      	strb	r3, [r7, #15]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	7bfa      	ldrb	r2, [r7, #15]
 800ca0c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ca0e:	7dbb      	ldrb	r3, [r7, #22]
 800ca10:	2be5      	cmp	r3, #229	; 0xe5
 800ca12:	d00e      	beq.n	800ca32 <dir_read+0x80>
 800ca14:	7dbb      	ldrb	r3, [r7, #22]
 800ca16:	2b2e      	cmp	r3, #46	; 0x2e
 800ca18:	d00b      	beq.n	800ca32 <dir_read+0x80>
 800ca1a:	7bfb      	ldrb	r3, [r7, #15]
 800ca1c:	f023 0320 	bic.w	r3, r3, #32
 800ca20:	2b08      	cmp	r3, #8
 800ca22:	bf0c      	ite	eq
 800ca24:	2301      	moveq	r3, #1
 800ca26:	2300      	movne	r3, #0
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d002      	beq.n	800ca38 <dir_read+0x86>
				ord = 0xFF;
 800ca32:	23ff      	movs	r3, #255	; 0xff
 800ca34:	757b      	strb	r3, [r7, #21]
 800ca36:	e044      	b.n	800cac2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ca38:	7bfb      	ldrb	r3, [r7, #15]
 800ca3a:	2b0f      	cmp	r3, #15
 800ca3c:	d12f      	bne.n	800ca9e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ca3e:	7dbb      	ldrb	r3, [r7, #22]
 800ca40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00d      	beq.n	800ca64 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6a1b      	ldr	r3, [r3, #32]
 800ca4c:	7b5b      	ldrb	r3, [r3, #13]
 800ca4e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ca50:	7dbb      	ldrb	r3, [r7, #22]
 800ca52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca56:	75bb      	strb	r3, [r7, #22]
 800ca58:	7dbb      	ldrb	r3, [r7, #22]
 800ca5a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	695a      	ldr	r2, [r3, #20]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ca64:	7dba      	ldrb	r2, [r7, #22]
 800ca66:	7d7b      	ldrb	r3, [r7, #21]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d115      	bne.n	800ca98 <dir_read+0xe6>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6a1b      	ldr	r3, [r3, #32]
 800ca70:	330d      	adds	r3, #13
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	7d3a      	ldrb	r2, [r7, #20]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d10e      	bne.n	800ca98 <dir_read+0xe6>
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	691a      	ldr	r2, [r3, #16]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6a1b      	ldr	r3, [r3, #32]
 800ca82:	4619      	mov	r1, r3
 800ca84:	4610      	mov	r0, r2
 800ca86:	f7ff fe19 	bl	800c6bc <pick_lfn>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d003      	beq.n	800ca98 <dir_read+0xe6>
 800ca90:	7d7b      	ldrb	r3, [r7, #21]
 800ca92:	3b01      	subs	r3, #1
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	e000      	b.n	800ca9a <dir_read+0xe8>
 800ca98:	23ff      	movs	r3, #255	; 0xff
 800ca9a:	757b      	strb	r3, [r7, #21]
 800ca9c:	e011      	b.n	800cac2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ca9e:	7d7b      	ldrb	r3, [r7, #21]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d109      	bne.n	800cab8 <dir_read+0x106>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6a1b      	ldr	r3, [r3, #32]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7ff ff61 	bl	800c970 <sum_sfn>
 800caae:	4603      	mov	r3, r0
 800cab0:	461a      	mov	r2, r3
 800cab2:	7d3b      	ldrb	r3, [r7, #20]
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d015      	beq.n	800cae4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cabe:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800cac0:	e010      	b.n	800cae4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cac2:	2100      	movs	r1, #0
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f7ff fc2c 	bl	800c322 <dir_next>
 800caca:	4603      	mov	r3, r0
 800cacc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cace:	7dfb      	ldrb	r3, [r7, #23]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d109      	bne.n	800cae8 <dir_read+0x136>
	while (dp->sect) {
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	69db      	ldr	r3, [r3, #28]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	f47f af79 	bne.w	800c9d0 <dir_read+0x1e>
 800cade:	e004      	b.n	800caea <dir_read+0x138>
		if (res != FR_OK) break;
 800cae0:	bf00      	nop
 800cae2:	e002      	b.n	800caea <dir_read+0x138>
					break;
 800cae4:	bf00      	nop
 800cae6:	e000      	b.n	800caea <dir_read+0x138>
		if (res != FR_OK) break;
 800cae8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800caea:	7dfb      	ldrb	r3, [r7, #23]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d002      	beq.n	800caf6 <dir_read+0x144>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	61da      	str	r2, [r3, #28]
	return res;
 800caf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3718      	adds	r7, #24
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cb0e:	2100      	movs	r1, #0
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f7ff fb7d 	bl	800c210 <dir_sdi>
 800cb16:	4603      	mov	r3, r0
 800cb18:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cb1a:	7dfb      	ldrb	r3, [r7, #23]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d001      	beq.n	800cb24 <dir_find+0x24>
 800cb20:	7dfb      	ldrb	r3, [r7, #23]
 800cb22:	e0a9      	b.n	800cc78 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb24:	23ff      	movs	r3, #255	; 0xff
 800cb26:	753b      	strb	r3, [r7, #20]
 800cb28:	7d3b      	ldrb	r3, [r7, #20]
 800cb2a:	757b      	strb	r3, [r7, #21]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb32:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	69db      	ldr	r3, [r3, #28]
 800cb38:	4619      	mov	r1, r3
 800cb3a:	6938      	ldr	r0, [r7, #16]
 800cb3c:	f7fe ff86 	bl	800ba4c <move_window>
 800cb40:	4603      	mov	r3, r0
 800cb42:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb44:	7dfb      	ldrb	r3, [r7, #23]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	f040 8090 	bne.w	800cc6c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6a1b      	ldr	r3, [r3, #32]
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cb54:	7dbb      	ldrb	r3, [r7, #22]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d102      	bne.n	800cb60 <dir_find+0x60>
 800cb5a:	2304      	movs	r3, #4
 800cb5c:	75fb      	strb	r3, [r7, #23]
 800cb5e:	e08a      	b.n	800cc76 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a1b      	ldr	r3, [r3, #32]
 800cb64:	330b      	adds	r3, #11
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb6c:	73fb      	strb	r3, [r7, #15]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	7bfa      	ldrb	r2, [r7, #15]
 800cb72:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cb74:	7dbb      	ldrb	r3, [r7, #22]
 800cb76:	2be5      	cmp	r3, #229	; 0xe5
 800cb78:	d007      	beq.n	800cb8a <dir_find+0x8a>
 800cb7a:	7bfb      	ldrb	r3, [r7, #15]
 800cb7c:	f003 0308 	and.w	r3, r3, #8
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d009      	beq.n	800cb98 <dir_find+0x98>
 800cb84:	7bfb      	ldrb	r3, [r7, #15]
 800cb86:	2b0f      	cmp	r3, #15
 800cb88:	d006      	beq.n	800cb98 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb8a:	23ff      	movs	r3, #255	; 0xff
 800cb8c:	757b      	strb	r3, [r7, #21]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb94:	631a      	str	r2, [r3, #48]	; 0x30
 800cb96:	e05e      	b.n	800cc56 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
 800cb9a:	2b0f      	cmp	r3, #15
 800cb9c:	d136      	bne.n	800cc0c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d154      	bne.n	800cc56 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cbac:	7dbb      	ldrb	r3, [r7, #22]
 800cbae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d00d      	beq.n	800cbd2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6a1b      	ldr	r3, [r3, #32]
 800cbba:	7b5b      	ldrb	r3, [r3, #13]
 800cbbc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cbbe:	7dbb      	ldrb	r3, [r7, #22]
 800cbc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbc4:	75bb      	strb	r3, [r7, #22]
 800cbc6:	7dbb      	ldrb	r3, [r7, #22]
 800cbc8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	695a      	ldr	r2, [r3, #20]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cbd2:	7dba      	ldrb	r2, [r7, #22]
 800cbd4:	7d7b      	ldrb	r3, [r7, #21]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d115      	bne.n	800cc06 <dir_find+0x106>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6a1b      	ldr	r3, [r3, #32]
 800cbde:	330d      	adds	r3, #13
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	7d3a      	ldrb	r2, [r7, #20]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d10e      	bne.n	800cc06 <dir_find+0x106>
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	691a      	ldr	r2, [r3, #16]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a1b      	ldr	r3, [r3, #32]
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	4610      	mov	r0, r2
 800cbf4:	f7ff fcf2 	bl	800c5dc <cmp_lfn>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d003      	beq.n	800cc06 <dir_find+0x106>
 800cbfe:	7d7b      	ldrb	r3, [r7, #21]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	e000      	b.n	800cc08 <dir_find+0x108>
 800cc06:	23ff      	movs	r3, #255	; 0xff
 800cc08:	757b      	strb	r3, [r7, #21]
 800cc0a:	e024      	b.n	800cc56 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cc0c:	7d7b      	ldrb	r3, [r7, #21]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d109      	bne.n	800cc26 <dir_find+0x126>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6a1b      	ldr	r3, [r3, #32]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff feaa 	bl	800c970 <sum_sfn>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	461a      	mov	r2, r3
 800cc20:	7d3b      	ldrb	r3, [r7, #20]
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d024      	beq.n	800cc70 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc2c:	f003 0301 	and.w	r3, r3, #1
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10a      	bne.n	800cc4a <dir_find+0x14a>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6a18      	ldr	r0, [r3, #32]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	3324      	adds	r3, #36	; 0x24
 800cc3c:	220b      	movs	r2, #11
 800cc3e:	4619      	mov	r1, r3
 800cc40:	f7fe fd12 	bl	800b668 <mem_cmp>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d014      	beq.n	800cc74 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cc4a:	23ff      	movs	r3, #255	; 0xff
 800cc4c:	757b      	strb	r3, [r7, #21]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc54:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cc56:	2100      	movs	r1, #0
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7ff fb62 	bl	800c322 <dir_next>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cc62:	7dfb      	ldrb	r3, [r7, #23]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	f43f af65 	beq.w	800cb34 <dir_find+0x34>
 800cc6a:	e004      	b.n	800cc76 <dir_find+0x176>
		if (res != FR_OK) break;
 800cc6c:	bf00      	nop
 800cc6e:	e002      	b.n	800cc76 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cc70:	bf00      	nop
 800cc72:	e000      	b.n	800cc76 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cc74:	bf00      	nop

	return res;
 800cc76:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3718      	adds	r7, #24
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b08c      	sub	sp, #48	; 0x30
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc94:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d001      	beq.n	800cca0 <dir_register+0x20>
 800cc9c:	2306      	movs	r3, #6
 800cc9e:	e0e0      	b.n	800ce62 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cca0:	2300      	movs	r3, #0
 800cca2:	627b      	str	r3, [r7, #36]	; 0x24
 800cca4:	e002      	b.n	800ccac <dir_register+0x2c>
 800cca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca8:	3301      	adds	r3, #1
 800ccaa:	627b      	str	r3, [r7, #36]	; 0x24
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	691a      	ldr	r2, [r3, #16]
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	4413      	add	r3, r2
 800ccb6:	881b      	ldrh	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1f4      	bne.n	800cca6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ccc2:	f107 030c 	add.w	r3, r7, #12
 800ccc6:	220c      	movs	r2, #12
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7fe fc91 	bl	800b5f0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ccce:	7dfb      	ldrb	r3, [r7, #23]
 800ccd0:	f003 0301 	and.w	r3, r3, #1
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d032      	beq.n	800cd3e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2240      	movs	r2, #64	; 0x40
 800ccdc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cce0:	2301      	movs	r3, #1
 800cce2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cce4:	e016      	b.n	800cd14 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ccec:	69fb      	ldr	r3, [r7, #28]
 800ccee:	691a      	ldr	r2, [r3, #16]
 800ccf0:	f107 010c 	add.w	r1, r7, #12
 800ccf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf6:	f7ff fdad 	bl	800c854 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f7ff ff00 	bl	800cb00 <dir_find>
 800cd00:	4603      	mov	r3, r0
 800cd02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800cd06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d106      	bne.n	800cd1c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd10:	3301      	adds	r3, #1
 800cd12:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd16:	2b63      	cmp	r3, #99	; 0x63
 800cd18:	d9e5      	bls.n	800cce6 <dir_register+0x66>
 800cd1a:	e000      	b.n	800cd1e <dir_register+0x9e>
			if (res != FR_OK) break;
 800cd1c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd20:	2b64      	cmp	r3, #100	; 0x64
 800cd22:	d101      	bne.n	800cd28 <dir_register+0xa8>
 800cd24:	2307      	movs	r3, #7
 800cd26:	e09c      	b.n	800ce62 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cd28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd2c:	2b04      	cmp	r3, #4
 800cd2e:	d002      	beq.n	800cd36 <dir_register+0xb6>
 800cd30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd34:	e095      	b.n	800ce62 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cd36:	7dfa      	ldrb	r2, [r7, #23]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cd3e:	7dfb      	ldrb	r3, [r7, #23]
 800cd40:	f003 0302 	and.w	r3, r3, #2
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d007      	beq.n	800cd58 <dir_register+0xd8>
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4a:	330c      	adds	r3, #12
 800cd4c:	4a47      	ldr	r2, [pc, #284]	; (800ce6c <dir_register+0x1ec>)
 800cd4e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd52:	089b      	lsrs	r3, r3, #2
 800cd54:	3301      	adds	r3, #1
 800cd56:	e000      	b.n	800cd5a <dir_register+0xda>
 800cd58:	2301      	movs	r3, #1
 800cd5a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cd5c:	6a39      	ldr	r1, [r7, #32]
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7ff fbb5 	bl	800c4ce <dir_alloc>
 800cd64:	4603      	mov	r3, r0
 800cd66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cd6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d148      	bne.n	800ce04 <dir_register+0x184>
 800cd72:	6a3b      	ldr	r3, [r7, #32]
 800cd74:	3b01      	subs	r3, #1
 800cd76:	623b      	str	r3, [r7, #32]
 800cd78:	6a3b      	ldr	r3, [r7, #32]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d042      	beq.n	800ce04 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	695a      	ldr	r2, [r3, #20]
 800cd82:	6a3b      	ldr	r3, [r7, #32]
 800cd84:	015b      	lsls	r3, r3, #5
 800cd86:	1ad3      	subs	r3, r2, r3
 800cd88:	4619      	mov	r1, r3
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7ff fa40 	bl	800c210 <dir_sdi>
 800cd90:	4603      	mov	r3, r0
 800cd92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cd96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d132      	bne.n	800ce04 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	3324      	adds	r3, #36	; 0x24
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7ff fde4 	bl	800c970 <sum_sfn>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	69db      	ldr	r3, [r3, #28]
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	69f8      	ldr	r0, [r7, #28]
 800cdb4:	f7fe fe4a 	bl	800ba4c <move_window>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cdbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d11d      	bne.n	800ce02 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	6918      	ldr	r0, [r3, #16]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6a19      	ldr	r1, [r3, #32]
 800cdce:	6a3b      	ldr	r3, [r7, #32]
 800cdd0:	b2da      	uxtb	r2, r3
 800cdd2:	7efb      	ldrb	r3, [r7, #27]
 800cdd4:	f7ff fcd6 	bl	800c784 <put_lfn>
				fs->wflag = 1;
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	2201      	movs	r2, #1
 800cddc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cdde:	2100      	movs	r1, #0
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f7ff fa9e 	bl	800c322 <dir_next>
 800cde6:	4603      	mov	r3, r0
 800cde8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cdec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d107      	bne.n	800ce04 <dir_register+0x184>
 800cdf4:	6a3b      	ldr	r3, [r7, #32]
 800cdf6:	3b01      	subs	r3, #1
 800cdf8:	623b      	str	r3, [r7, #32]
 800cdfa:	6a3b      	ldr	r3, [r7, #32]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d1d5      	bne.n	800cdac <dir_register+0x12c>
 800ce00:	e000      	b.n	800ce04 <dir_register+0x184>
				if (res != FR_OK) break;
 800ce02:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ce04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d128      	bne.n	800ce5e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	69db      	ldr	r3, [r3, #28]
 800ce10:	4619      	mov	r1, r3
 800ce12:	69f8      	ldr	r0, [r7, #28]
 800ce14:	f7fe fe1a 	bl	800ba4c <move_window>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ce1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d11b      	bne.n	800ce5e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a1b      	ldr	r3, [r3, #32]
 800ce2a:	2220      	movs	r2, #32
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fe fbff 	bl	800b632 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a18      	ldr	r0, [r3, #32]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	3324      	adds	r3, #36	; 0x24
 800ce3c:	220b      	movs	r2, #11
 800ce3e:	4619      	mov	r1, r3
 800ce40:	f7fe fbd6 	bl	800b5f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6a1b      	ldr	r3, [r3, #32]
 800ce4e:	330c      	adds	r3, #12
 800ce50:	f002 0218 	and.w	r2, r2, #24
 800ce54:	b2d2      	uxtb	r2, r2
 800ce56:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ce5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3730      	adds	r7, #48	; 0x30
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	4ec4ec4f 	.word	0x4ec4ec4f

0800ce70 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b088      	sub	sp, #32
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	2200      	movs	r2, #0
 800ce84:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	69db      	ldr	r3, [r3, #28]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	f000 80c9 	beq.w	800d022 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce98:	d032      	beq.n	800cf00 <get_fileinfo+0x90>
			i = j = 0;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	61bb      	str	r3, [r7, #24]
 800ce9e:	69bb      	ldr	r3, [r7, #24]
 800cea0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cea2:	e01b      	b.n	800cedc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800cea4:	89fb      	ldrh	r3, [r7, #14]
 800cea6:	2100      	movs	r1, #0
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f002 f841 	bl	800ef30 <ff_convert>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ceb2:	89fb      	ldrh	r3, [r7, #14]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d102      	bne.n	800cebe <get_fileinfo+0x4e>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	61fb      	str	r3, [r7, #28]
 800cebc:	e01a      	b.n	800cef4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800cebe:	69fb      	ldr	r3, [r7, #28]
 800cec0:	2bfe      	cmp	r3, #254	; 0xfe
 800cec2:	d902      	bls.n	800ceca <get_fileinfo+0x5a>
 800cec4:	2300      	movs	r3, #0
 800cec6:	61fb      	str	r3, [r7, #28]
 800cec8:	e014      	b.n	800cef4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	1c5a      	adds	r2, r3, #1
 800cece:	61fa      	str	r2, [r7, #28]
 800ced0:	89fa      	ldrh	r2, [r7, #14]
 800ced2:	b2d1      	uxtb	r1, r2
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	4413      	add	r3, r2
 800ced8:	460a      	mov	r2, r1
 800ceda:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	691a      	ldr	r2, [r3, #16]
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	1c59      	adds	r1, r3, #1
 800cee4:	61b9      	str	r1, [r7, #24]
 800cee6:	005b      	lsls	r3, r3, #1
 800cee8:	4413      	add	r3, r2
 800ceea:	881b      	ldrh	r3, [r3, #0]
 800ceec:	81fb      	strh	r3, [r7, #14]
 800ceee:	89fb      	ldrh	r3, [r7, #14]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1d7      	bne.n	800cea4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cef4:	683a      	ldr	r2, [r7, #0]
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	4413      	add	r3, r2
 800cefa:	3316      	adds	r3, #22
 800cefc:	2200      	movs	r2, #0
 800cefe:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800cf00:	2300      	movs	r3, #0
 800cf02:	61bb      	str	r3, [r7, #24]
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cf08:	683a      	ldr	r2, [r7, #0]
 800cf0a:	69fb      	ldr	r3, [r7, #28]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	3316      	adds	r3, #22
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800cf14:	e04c      	b.n	800cfb0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a1a      	ldr	r2, [r3, #32]
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	1c59      	adds	r1, r3, #1
 800cf1e:	61f9      	str	r1, [r7, #28]
 800cf20:	4413      	add	r3, r2
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cf26:	7dfb      	ldrb	r3, [r7, #23]
 800cf28:	2b20      	cmp	r3, #32
 800cf2a:	d100      	bne.n	800cf2e <get_fileinfo+0xbe>
 800cf2c:	e040      	b.n	800cfb0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cf2e:	7dfb      	ldrb	r3, [r7, #23]
 800cf30:	2b05      	cmp	r3, #5
 800cf32:	d101      	bne.n	800cf38 <get_fileinfo+0xc8>
 800cf34:	23e5      	movs	r3, #229	; 0xe5
 800cf36:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800cf38:	69fb      	ldr	r3, [r7, #28]
 800cf3a:	2b09      	cmp	r3, #9
 800cf3c:	d10f      	bne.n	800cf5e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800cf3e:	89bb      	ldrh	r3, [r7, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d105      	bne.n	800cf50 <get_fileinfo+0xe0>
 800cf44:	683a      	ldr	r2, [r7, #0]
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	4413      	add	r3, r2
 800cf4a:	3316      	adds	r3, #22
 800cf4c:	222e      	movs	r2, #46	; 0x2e
 800cf4e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	1c5a      	adds	r2, r3, #1
 800cf54:	61ba      	str	r2, [r7, #24]
 800cf56:	683a      	ldr	r2, [r7, #0]
 800cf58:	4413      	add	r3, r2
 800cf5a:	222e      	movs	r2, #46	; 0x2e
 800cf5c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800cf5e:	683a      	ldr	r2, [r7, #0]
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	4413      	add	r3, r2
 800cf64:	3309      	adds	r3, #9
 800cf66:	7dfa      	ldrb	r2, [r7, #23]
 800cf68:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800cf6a:	89bb      	ldrh	r3, [r7, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d11c      	bne.n	800cfaa <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cf70:	7dfb      	ldrb	r3, [r7, #23]
 800cf72:	2b40      	cmp	r3, #64	; 0x40
 800cf74:	d913      	bls.n	800cf9e <get_fileinfo+0x12e>
 800cf76:	7dfb      	ldrb	r3, [r7, #23]
 800cf78:	2b5a      	cmp	r3, #90	; 0x5a
 800cf7a:	d810      	bhi.n	800cf9e <get_fileinfo+0x12e>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6a1b      	ldr	r3, [r3, #32]
 800cf80:	330c      	adds	r3, #12
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	461a      	mov	r2, r3
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	2b08      	cmp	r3, #8
 800cf8a:	d901      	bls.n	800cf90 <get_fileinfo+0x120>
 800cf8c:	2310      	movs	r3, #16
 800cf8e:	e000      	b.n	800cf92 <get_fileinfo+0x122>
 800cf90:	2308      	movs	r3, #8
 800cf92:	4013      	ands	r3, r2
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800cf98:	7dfb      	ldrb	r3, [r7, #23]
 800cf9a:	3320      	adds	r3, #32
 800cf9c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800cf9e:	683a      	ldr	r2, [r7, #0]
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	3316      	adds	r3, #22
 800cfa6:	7dfa      	ldrb	r2, [r7, #23]
 800cfa8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	3301      	adds	r3, #1
 800cfae:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	2b0a      	cmp	r3, #10
 800cfb4:	d9af      	bls.n	800cf16 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800cfb6:	89bb      	ldrh	r3, [r7, #12]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10d      	bne.n	800cfd8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800cfbc:	683a      	ldr	r2, [r7, #0]
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	3316      	adds	r3, #22
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6a1b      	ldr	r3, [r3, #32]
 800cfcc:	330c      	adds	r3, #12
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d101      	bne.n	800cfd8 <get_fileinfo+0x168>
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800cfd8:	683a      	ldr	r2, [r7, #0]
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	4413      	add	r3, r2
 800cfde:	3309      	adds	r3, #9
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a1b      	ldr	r3, [r3, #32]
 800cfe8:	7ada      	ldrb	r2, [r3, #11]
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6a1b      	ldr	r3, [r3, #32]
 800cff2:	331c      	adds	r3, #28
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7fe fa91 	bl	800b51c <ld_dword>
 800cffa:	4602      	mov	r2, r0
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6a1b      	ldr	r3, [r3, #32]
 800d004:	3316      	adds	r3, #22
 800d006:	4618      	mov	r0, r3
 800d008:	f7fe fa88 	bl	800b51c <ld_dword>
 800d00c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	b29a      	uxth	r2, r3
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	80da      	strh	r2, [r3, #6]
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	0c1b      	lsrs	r3, r3, #16
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	809a      	strh	r2, [r3, #4]
 800d020:	e000      	b.n	800d024 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d022:	bf00      	nop
}
 800d024:	3720      	adds	r7, #32
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
	...

0800d02c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b08a      	sub	sp, #40	; 0x28
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	613b      	str	r3, [r7, #16]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	691b      	ldr	r3, [r3, #16]
 800d042:	60fb      	str	r3, [r7, #12]
 800d044:	2300      	movs	r3, #0
 800d046:	617b      	str	r3, [r7, #20]
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	1c5a      	adds	r2, r3, #1
 800d050:	61ba      	str	r2, [r7, #24]
 800d052:	693a      	ldr	r2, [r7, #16]
 800d054:	4413      	add	r3, r2
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d05a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d05c:	2b1f      	cmp	r3, #31
 800d05e:	d940      	bls.n	800d0e2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d060:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d062:	2b2f      	cmp	r3, #47	; 0x2f
 800d064:	d006      	beq.n	800d074 <create_name+0x48>
 800d066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d068:	2b5c      	cmp	r3, #92	; 0x5c
 800d06a:	d110      	bne.n	800d08e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d06c:	e002      	b.n	800d074 <create_name+0x48>
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	3301      	adds	r3, #1
 800d072:	61bb      	str	r3, [r7, #24]
 800d074:	693a      	ldr	r2, [r7, #16]
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	4413      	add	r3, r2
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	2b2f      	cmp	r3, #47	; 0x2f
 800d07e:	d0f6      	beq.n	800d06e <create_name+0x42>
 800d080:	693a      	ldr	r2, [r7, #16]
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	4413      	add	r3, r2
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	2b5c      	cmp	r3, #92	; 0x5c
 800d08a:	d0f0      	beq.n	800d06e <create_name+0x42>
			break;
 800d08c:	e02a      	b.n	800d0e4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	2bfe      	cmp	r3, #254	; 0xfe
 800d092:	d901      	bls.n	800d098 <create_name+0x6c>
 800d094:	2306      	movs	r3, #6
 800d096:	e17d      	b.n	800d394 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d09e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0a0:	2101      	movs	r1, #1
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f001 ff44 	bl	800ef30 <ff_convert>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d0ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d101      	bne.n	800d0b6 <create_name+0x8a>
 800d0b2:	2306      	movs	r3, #6
 800d0b4:	e16e      	b.n	800d394 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d0b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0b8:	2b7f      	cmp	r3, #127	; 0x7f
 800d0ba:	d809      	bhi.n	800d0d0 <create_name+0xa4>
 800d0bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0be:	4619      	mov	r1, r3
 800d0c0:	488d      	ldr	r0, [pc, #564]	; (800d2f8 <create_name+0x2cc>)
 800d0c2:	f7fe faf8 	bl	800b6b6 <chk_chr>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d001      	beq.n	800d0d0 <create_name+0xa4>
 800d0cc:	2306      	movs	r3, #6
 800d0ce:	e161      	b.n	800d394 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	617a      	str	r2, [r7, #20]
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	68fa      	ldr	r2, [r7, #12]
 800d0da:	4413      	add	r3, r2
 800d0dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d0de:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d0e0:	e7b4      	b.n	800d04c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d0e2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d0e4:	693a      	ldr	r2, [r7, #16]
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	441a      	add	r2, r3
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d0ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0f0:	2b1f      	cmp	r3, #31
 800d0f2:	d801      	bhi.n	800d0f8 <create_name+0xcc>
 800d0f4:	2304      	movs	r3, #4
 800d0f6:	e000      	b.n	800d0fa <create_name+0xce>
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d0fe:	e011      	b.n	800d124 <create_name+0xf8>
		w = lfn[di - 1];
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d106:	3b01      	subs	r3, #1
 800d108:	005b      	lsls	r3, r3, #1
 800d10a:	68fa      	ldr	r2, [r7, #12]
 800d10c:	4413      	add	r3, r2
 800d10e:	881b      	ldrh	r3, [r3, #0]
 800d110:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d114:	2b20      	cmp	r3, #32
 800d116:	d002      	beq.n	800d11e <create_name+0xf2>
 800d118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d11a:	2b2e      	cmp	r3, #46	; 0x2e
 800d11c:	d106      	bne.n	800d12c <create_name+0x100>
		di--;
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	3b01      	subs	r3, #1
 800d122:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1ea      	bne.n	800d100 <create_name+0xd4>
 800d12a:	e000      	b.n	800d12e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d12c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	68fa      	ldr	r2, [r7, #12]
 800d134:	4413      	add	r3, r2
 800d136:	2200      	movs	r2, #0
 800d138:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d101      	bne.n	800d144 <create_name+0x118>
 800d140:	2306      	movs	r3, #6
 800d142:	e127      	b.n	800d394 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	3324      	adds	r3, #36	; 0x24
 800d148:	220b      	movs	r2, #11
 800d14a:	2120      	movs	r1, #32
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7fe fa70 	bl	800b632 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d152:	2300      	movs	r3, #0
 800d154:	61bb      	str	r3, [r7, #24]
 800d156:	e002      	b.n	800d15e <create_name+0x132>
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	3301      	adds	r3, #1
 800d15c:	61bb      	str	r3, [r7, #24]
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	005b      	lsls	r3, r3, #1
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	4413      	add	r3, r2
 800d166:	881b      	ldrh	r3, [r3, #0]
 800d168:	2b20      	cmp	r3, #32
 800d16a:	d0f5      	beq.n	800d158 <create_name+0x12c>
 800d16c:	69bb      	ldr	r3, [r7, #24]
 800d16e:	005b      	lsls	r3, r3, #1
 800d170:	68fa      	ldr	r2, [r7, #12]
 800d172:	4413      	add	r3, r2
 800d174:	881b      	ldrh	r3, [r3, #0]
 800d176:	2b2e      	cmp	r3, #46	; 0x2e
 800d178:	d0ee      	beq.n	800d158 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d17a:	69bb      	ldr	r3, [r7, #24]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d009      	beq.n	800d194 <create_name+0x168>
 800d180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d184:	f043 0303 	orr.w	r3, r3, #3
 800d188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d18c:	e002      	b.n	800d194 <create_name+0x168>
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	3b01      	subs	r3, #1
 800d192:	617b      	str	r3, [r7, #20]
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d009      	beq.n	800d1ae <create_name+0x182>
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	005b      	lsls	r3, r3, #1
 800d1a4:	68fa      	ldr	r2, [r7, #12]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	881b      	ldrh	r3, [r3, #0]
 800d1aa:	2b2e      	cmp	r3, #46	; 0x2e
 800d1ac:	d1ef      	bne.n	800d18e <create_name+0x162>

	i = b = 0; ni = 8;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	623b      	str	r3, [r7, #32]
 800d1b8:	2308      	movs	r3, #8
 800d1ba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	1c5a      	adds	r2, r3, #1
 800d1c0:	61ba      	str	r2, [r7, #24]
 800d1c2:	005b      	lsls	r3, r3, #1
 800d1c4:	68fa      	ldr	r2, [r7, #12]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	881b      	ldrh	r3, [r3, #0]
 800d1ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d1cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	f000 8090 	beq.w	800d2f4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d1d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1d6:	2b20      	cmp	r3, #32
 800d1d8:	d006      	beq.n	800d1e8 <create_name+0x1bc>
 800d1da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1dc:	2b2e      	cmp	r3, #46	; 0x2e
 800d1de:	d10a      	bne.n	800d1f6 <create_name+0x1ca>
 800d1e0:	69ba      	ldr	r2, [r7, #24]
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d006      	beq.n	800d1f6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1ec:	f043 0303 	orr.w	r3, r3, #3
 800d1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1f4:	e07d      	b.n	800d2f2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d1f6:	6a3a      	ldr	r2, [r7, #32]
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d203      	bcs.n	800d206 <create_name+0x1da>
 800d1fe:	69ba      	ldr	r2, [r7, #24]
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	429a      	cmp	r2, r3
 800d204:	d123      	bne.n	800d24e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d206:	69fb      	ldr	r3, [r7, #28]
 800d208:	2b0b      	cmp	r3, #11
 800d20a:	d106      	bne.n	800d21a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d20c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d210:	f043 0303 	orr.w	r3, r3, #3
 800d214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d218:	e075      	b.n	800d306 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d21a:	69ba      	ldr	r2, [r7, #24]
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d005      	beq.n	800d22e <create_name+0x202>
 800d222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d226:	f043 0303 	orr.w	r3, r3, #3
 800d22a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d22e:	69ba      	ldr	r2, [r7, #24]
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	429a      	cmp	r2, r3
 800d234:	d866      	bhi.n	800d304 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	61bb      	str	r3, [r7, #24]
 800d23a:	2308      	movs	r3, #8
 800d23c:	623b      	str	r3, [r7, #32]
 800d23e:	230b      	movs	r3, #11
 800d240:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d242:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d24c:	e051      	b.n	800d2f2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d24e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d250:	2b7f      	cmp	r3, #127	; 0x7f
 800d252:	d914      	bls.n	800d27e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d256:	2100      	movs	r1, #0
 800d258:	4618      	mov	r0, r3
 800d25a:	f001 fe69 	bl	800ef30 <ff_convert>
 800d25e:	4603      	mov	r3, r0
 800d260:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d264:	2b00      	cmp	r3, #0
 800d266:	d004      	beq.n	800d272 <create_name+0x246>
 800d268:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d26a:	3b80      	subs	r3, #128	; 0x80
 800d26c:	4a23      	ldr	r2, [pc, #140]	; (800d2fc <create_name+0x2d0>)
 800d26e:	5cd3      	ldrb	r3, [r2, r3]
 800d270:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d276:	f043 0302 	orr.w	r3, r3, #2
 800d27a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d27e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d280:	2b00      	cmp	r3, #0
 800d282:	d007      	beq.n	800d294 <create_name+0x268>
 800d284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d286:	4619      	mov	r1, r3
 800d288:	481d      	ldr	r0, [pc, #116]	; (800d300 <create_name+0x2d4>)
 800d28a:	f7fe fa14 	bl	800b6b6 <chk_chr>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d008      	beq.n	800d2a6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d294:	235f      	movs	r3, #95	; 0x5f
 800d296:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d29c:	f043 0303 	orr.w	r3, r3, #3
 800d2a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2a4:	e01b      	b.n	800d2de <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d2a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2a8:	2b40      	cmp	r3, #64	; 0x40
 800d2aa:	d909      	bls.n	800d2c0 <create_name+0x294>
 800d2ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2ae:	2b5a      	cmp	r3, #90	; 0x5a
 800d2b0:	d806      	bhi.n	800d2c0 <create_name+0x294>
					b |= 2;
 800d2b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2b6:	f043 0302 	orr.w	r3, r3, #2
 800d2ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d2be:	e00e      	b.n	800d2de <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d2c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2c2:	2b60      	cmp	r3, #96	; 0x60
 800d2c4:	d90b      	bls.n	800d2de <create_name+0x2b2>
 800d2c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2c8:	2b7a      	cmp	r3, #122	; 0x7a
 800d2ca:	d808      	bhi.n	800d2de <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d2cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2d0:	f043 0301 	orr.w	r3, r3, #1
 800d2d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d2d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2da:	3b20      	subs	r3, #32
 800d2dc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d2de:	6a3b      	ldr	r3, [r7, #32]
 800d2e0:	1c5a      	adds	r2, r3, #1
 800d2e2:	623a      	str	r2, [r7, #32]
 800d2e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d2e6:	b2d1      	uxtb	r1, r2
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	460a      	mov	r2, r1
 800d2ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d2f2:	e763      	b.n	800d1bc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d2f4:	bf00      	nop
 800d2f6:	e006      	b.n	800d306 <create_name+0x2da>
 800d2f8:	08010198 	.word	0x08010198
 800d2fc:	08010200 	.word	0x08010200
 800d300:	080101a4 	.word	0x080101a4
			if (si > di) break;			/* No extension */
 800d304:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d30c:	2be5      	cmp	r3, #229	; 0xe5
 800d30e:	d103      	bne.n	800d318 <create_name+0x2ec>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2205      	movs	r2, #5
 800d314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	2b08      	cmp	r3, #8
 800d31c:	d104      	bne.n	800d328 <create_name+0x2fc>
 800d31e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d328:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d32c:	f003 030c 	and.w	r3, r3, #12
 800d330:	2b0c      	cmp	r3, #12
 800d332:	d005      	beq.n	800d340 <create_name+0x314>
 800d334:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d338:	f003 0303 	and.w	r3, r3, #3
 800d33c:	2b03      	cmp	r3, #3
 800d33e:	d105      	bne.n	800d34c <create_name+0x320>
 800d340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d344:	f043 0302 	orr.w	r3, r3, #2
 800d348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d34c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d350:	f003 0302 	and.w	r3, r3, #2
 800d354:	2b00      	cmp	r3, #0
 800d356:	d117      	bne.n	800d388 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d358:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d35c:	f003 0303 	and.w	r3, r3, #3
 800d360:	2b01      	cmp	r3, #1
 800d362:	d105      	bne.n	800d370 <create_name+0x344>
 800d364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d368:	f043 0310 	orr.w	r3, r3, #16
 800d36c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d370:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d374:	f003 030c 	and.w	r3, r3, #12
 800d378:	2b04      	cmp	r3, #4
 800d37a:	d105      	bne.n	800d388 <create_name+0x35c>
 800d37c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d380:	f043 0308 	orr.w	r3, r3, #8
 800d384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d38e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d392:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d394:	4618      	mov	r0, r3
 800d396:	3728      	adds	r7, #40	; 0x28
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d3b0:	e002      	b.n	800d3b8 <follow_path+0x1c>
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	603b      	str	r3, [r7, #0]
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	2b2f      	cmp	r3, #47	; 0x2f
 800d3be:	d0f8      	beq.n	800d3b2 <follow_path+0x16>
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	2b5c      	cmp	r3, #92	; 0x5c
 800d3c6:	d0f4      	beq.n	800d3b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	2b1f      	cmp	r3, #31
 800d3d4:	d80a      	bhi.n	800d3ec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2280      	movs	r2, #128	; 0x80
 800d3da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d3de:	2100      	movs	r1, #0
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f7fe ff15 	bl	800c210 <dir_sdi>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	75fb      	strb	r3, [r7, #23]
 800d3ea:	e048      	b.n	800d47e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d3ec:	463b      	mov	r3, r7
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7ff fe1b 	bl	800d02c <create_name>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d3fa:	7dfb      	ldrb	r3, [r7, #23]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d139      	bne.n	800d474 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f7ff fb7d 	bl	800cb00 <dir_find>
 800d406:	4603      	mov	r3, r0
 800d408:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d410:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d412:	7dfb      	ldrb	r3, [r7, #23]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d00a      	beq.n	800d42e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d418:	7dfb      	ldrb	r3, [r7, #23]
 800d41a:	2b04      	cmp	r3, #4
 800d41c:	d12c      	bne.n	800d478 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d41e:	7afb      	ldrb	r3, [r7, #11]
 800d420:	f003 0304 	and.w	r3, r3, #4
 800d424:	2b00      	cmp	r3, #0
 800d426:	d127      	bne.n	800d478 <follow_path+0xdc>
 800d428:	2305      	movs	r3, #5
 800d42a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d42c:	e024      	b.n	800d478 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d42e:	7afb      	ldrb	r3, [r7, #11]
 800d430:	f003 0304 	and.w	r3, r3, #4
 800d434:	2b00      	cmp	r3, #0
 800d436:	d121      	bne.n	800d47c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	799b      	ldrb	r3, [r3, #6]
 800d43c:	f003 0310 	and.w	r3, r3, #16
 800d440:	2b00      	cmp	r3, #0
 800d442:	d102      	bne.n	800d44a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d444:	2305      	movs	r3, #5
 800d446:	75fb      	strb	r3, [r7, #23]
 800d448:	e019      	b.n	800d47e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	695b      	ldr	r3, [r3, #20]
 800d454:	68fa      	ldr	r2, [r7, #12]
 800d456:	8992      	ldrh	r2, [r2, #12]
 800d458:	fbb3 f0f2 	udiv	r0, r3, r2
 800d45c:	fb00 f202 	mul.w	r2, r0, r2
 800d460:	1a9b      	subs	r3, r3, r2
 800d462:	440b      	add	r3, r1
 800d464:	4619      	mov	r1, r3
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f7ff f878 	bl	800c55c <ld_clust>
 800d46c:	4602      	mov	r2, r0
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d472:	e7bb      	b.n	800d3ec <follow_path+0x50>
			if (res != FR_OK) break;
 800d474:	bf00      	nop
 800d476:	e002      	b.n	800d47e <follow_path+0xe2>
				break;
 800d478:	bf00      	nop
 800d47a:	e000      	b.n	800d47e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d47c:	bf00      	nop
			}
		}
	}

	return res;
 800d47e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3718      	adds	r7, #24
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d488:	b480      	push	{r7}
 800d48a:	b087      	sub	sp, #28
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d494:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d031      	beq.n	800d502 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	617b      	str	r3, [r7, #20]
 800d4a4:	e002      	b.n	800d4ac <get_ldnumber+0x24>
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	617b      	str	r3, [r7, #20]
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	2b1f      	cmp	r3, #31
 800d4b2:	d903      	bls.n	800d4bc <get_ldnumber+0x34>
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	2b3a      	cmp	r3, #58	; 0x3a
 800d4ba:	d1f4      	bne.n	800d4a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	2b3a      	cmp	r3, #58	; 0x3a
 800d4c2:	d11c      	bne.n	800d4fe <get_ldnumber+0x76>
			tp = *path;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	1c5a      	adds	r2, r3, #1
 800d4ce:	60fa      	str	r2, [r7, #12]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	3b30      	subs	r3, #48	; 0x30
 800d4d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	2b09      	cmp	r3, #9
 800d4da:	d80e      	bhi.n	800d4fa <get_ldnumber+0x72>
 800d4dc:	68fa      	ldr	r2, [r7, #12]
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d10a      	bne.n	800d4fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d107      	bne.n	800d4fa <get_ldnumber+0x72>
					vol = (int)i;
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	617b      	str	r3, [r7, #20]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	697a      	ldr	r2, [r7, #20]
 800d4f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	e002      	b.n	800d504 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d4fe:	2300      	movs	r3, #0
 800d500:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d502:	693b      	ldr	r3, [r7, #16]
}
 800d504:	4618      	mov	r0, r3
 800d506:	371c      	adds	r7, #28
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	70da      	strb	r2, [r3, #3]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d526:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7fe fa8e 	bl	800ba4c <move_window>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d001      	beq.n	800d53a <check_fs+0x2a>
 800d536:	2304      	movs	r3, #4
 800d538:	e038      	b.n	800d5ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	3338      	adds	r3, #56	; 0x38
 800d53e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d542:	4618      	mov	r0, r3
 800d544:	f7fd ffd2 	bl	800b4ec <ld_word>
 800d548:	4603      	mov	r3, r0
 800d54a:	461a      	mov	r2, r3
 800d54c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d550:	429a      	cmp	r2, r3
 800d552:	d001      	beq.n	800d558 <check_fs+0x48>
 800d554:	2303      	movs	r3, #3
 800d556:	e029      	b.n	800d5ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d55e:	2be9      	cmp	r3, #233	; 0xe9
 800d560:	d009      	beq.n	800d576 <check_fs+0x66>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d568:	2beb      	cmp	r3, #235	; 0xeb
 800d56a:	d11e      	bne.n	800d5aa <check_fs+0x9a>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d572:	2b90      	cmp	r3, #144	; 0x90
 800d574:	d119      	bne.n	800d5aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	3338      	adds	r3, #56	; 0x38
 800d57a:	3336      	adds	r3, #54	; 0x36
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7fd ffcd 	bl	800b51c <ld_dword>
 800d582:	4603      	mov	r3, r0
 800d584:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d588:	4a0a      	ldr	r2, [pc, #40]	; (800d5b4 <check_fs+0xa4>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d101      	bne.n	800d592 <check_fs+0x82>
 800d58e:	2300      	movs	r3, #0
 800d590:	e00c      	b.n	800d5ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	3338      	adds	r3, #56	; 0x38
 800d596:	3352      	adds	r3, #82	; 0x52
 800d598:	4618      	mov	r0, r3
 800d59a:	f7fd ffbf 	bl	800b51c <ld_dword>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	4a05      	ldr	r2, [pc, #20]	; (800d5b8 <check_fs+0xa8>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d101      	bne.n	800d5aa <check_fs+0x9a>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	e000      	b.n	800d5ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d5aa:	2302      	movs	r3, #2
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3708      	adds	r7, #8
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	00544146 	.word	0x00544146
 800d5b8:	33544146 	.word	0x33544146

0800d5bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b096      	sub	sp, #88	; 0x58
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f7ff ff59 	bl	800d488 <get_ldnumber>
 800d5d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	da01      	bge.n	800d5e2 <find_volume+0x26>
 800d5de:	230b      	movs	r3, #11
 800d5e0:	e265      	b.n	800daae <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d5e2:	4a9f      	ldr	r2, [pc, #636]	; (800d860 <find_volume+0x2a4>)
 800d5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d101      	bne.n	800d5f6 <find_volume+0x3a>
 800d5f2:	230c      	movs	r3, #12
 800d5f4:	e25b      	b.n	800daae <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d5fc:	79fb      	ldrb	r3, [r7, #7]
 800d5fe:	f023 0301 	bic.w	r3, r3, #1
 800d602:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d01a      	beq.n	800d642 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60e:	785b      	ldrb	r3, [r3, #1]
 800d610:	4618      	mov	r0, r3
 800d612:	f7fd fecd 	bl	800b3b0 <disk_status>
 800d616:	4603      	mov	r3, r0
 800d618:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d61c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d620:	f003 0301 	and.w	r3, r3, #1
 800d624:	2b00      	cmp	r3, #0
 800d626:	d10c      	bne.n	800d642 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d628:	79fb      	ldrb	r3, [r7, #7]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d007      	beq.n	800d63e <find_volume+0x82>
 800d62e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d632:	f003 0304 	and.w	r3, r3, #4
 800d636:	2b00      	cmp	r3, #0
 800d638:	d001      	beq.n	800d63e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d63a:	230a      	movs	r3, #10
 800d63c:	e237      	b.n	800daae <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800d63e:	2300      	movs	r3, #0
 800d640:	e235      	b.n	800daae <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d644:	2200      	movs	r2, #0
 800d646:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d64a:	b2da      	uxtb	r2, r3
 800d64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d652:	785b      	ldrb	r3, [r3, #1]
 800d654:	4618      	mov	r0, r3
 800d656:	f7fd fec5 	bl	800b3e4 <disk_initialize>
 800d65a:	4603      	mov	r3, r0
 800d65c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d660:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d664:	f003 0301 	and.w	r3, r3, #1
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d001      	beq.n	800d670 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d66c:	2303      	movs	r3, #3
 800d66e:	e21e      	b.n	800daae <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d670:	79fb      	ldrb	r3, [r7, #7]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d007      	beq.n	800d686 <find_volume+0xca>
 800d676:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d67a:	f003 0304 	and.w	r3, r3, #4
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d001      	beq.n	800d686 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d682:	230a      	movs	r3, #10
 800d684:	e213      	b.n	800daae <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d688:	7858      	ldrb	r0, [r3, #1]
 800d68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68c:	330c      	adds	r3, #12
 800d68e:	461a      	mov	r2, r3
 800d690:	2102      	movs	r1, #2
 800d692:	f7fd ff0d 	bl	800b4b0 <disk_ioctl>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d001      	beq.n	800d6a0 <find_volume+0xe4>
 800d69c:	2301      	movs	r3, #1
 800d69e:	e206      	b.n	800daae <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a2:	899b      	ldrh	r3, [r3, #12]
 800d6a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6a8:	d80d      	bhi.n	800d6c6 <find_volume+0x10a>
 800d6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ac:	899b      	ldrh	r3, [r3, #12]
 800d6ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6b2:	d308      	bcc.n	800d6c6 <find_volume+0x10a>
 800d6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b6:	899b      	ldrh	r3, [r3, #12]
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6bc:	899b      	ldrh	r3, [r3, #12]
 800d6be:	3b01      	subs	r3, #1
 800d6c0:	4013      	ands	r3, r2
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d001      	beq.n	800d6ca <find_volume+0x10e>
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e1f1      	b.n	800daae <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d6ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6d2:	f7ff ff1d 	bl	800d510 <check_fs>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d6dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6e0:	2b02      	cmp	r3, #2
 800d6e2:	d149      	bne.n	800d778 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	643b      	str	r3, [r7, #64]	; 0x40
 800d6e8:	e01e      	b.n	800d728 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6f2:	011b      	lsls	r3, r3, #4
 800d6f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d6f8:	4413      	add	r3, r2
 800d6fa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fe:	3304      	adds	r3, #4
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d006      	beq.n	800d714 <find_volume+0x158>
 800d706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d708:	3308      	adds	r3, #8
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fd ff06 	bl	800b51c <ld_dword>
 800d710:	4602      	mov	r2, r0
 800d712:	e000      	b.n	800d716 <find_volume+0x15a>
 800d714:	2200      	movs	r2, #0
 800d716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	3358      	adds	r3, #88	; 0x58
 800d71c:	443b      	add	r3, r7
 800d71e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d724:	3301      	adds	r3, #1
 800d726:	643b      	str	r3, [r7, #64]	; 0x40
 800d728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d72a:	2b03      	cmp	r3, #3
 800d72c:	d9dd      	bls.n	800d6ea <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d72e:	2300      	movs	r3, #0
 800d730:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <find_volume+0x182>
 800d738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d73a:	3b01      	subs	r3, #1
 800d73c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	3358      	adds	r3, #88	; 0x58
 800d744:	443b      	add	r3, r7
 800d746:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d74a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d74c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d005      	beq.n	800d75e <find_volume+0x1a2>
 800d752:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d754:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d756:	f7ff fedb 	bl	800d510 <check_fs>
 800d75a:	4603      	mov	r3, r0
 800d75c:	e000      	b.n	800d760 <find_volume+0x1a4>
 800d75e:	2303      	movs	r3, #3
 800d760:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d764:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d905      	bls.n	800d778 <find_volume+0x1bc>
 800d76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d76e:	3301      	adds	r3, #1
 800d770:	643b      	str	r3, [r7, #64]	; 0x40
 800d772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d774:	2b03      	cmp	r3, #3
 800d776:	d9e2      	bls.n	800d73e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d778:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d77c:	2b04      	cmp	r3, #4
 800d77e:	d101      	bne.n	800d784 <find_volume+0x1c8>
 800d780:	2301      	movs	r3, #1
 800d782:	e194      	b.n	800daae <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d784:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d901      	bls.n	800d790 <find_volume+0x1d4>
 800d78c:	230d      	movs	r3, #13
 800d78e:	e18e      	b.n	800daae <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d792:	3338      	adds	r3, #56	; 0x38
 800d794:	330b      	adds	r3, #11
 800d796:	4618      	mov	r0, r3
 800d798:	f7fd fea8 	bl	800b4ec <ld_word>
 800d79c:	4603      	mov	r3, r0
 800d79e:	461a      	mov	r2, r3
 800d7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a2:	899b      	ldrh	r3, [r3, #12]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d001      	beq.n	800d7ac <find_volume+0x1f0>
 800d7a8:	230d      	movs	r3, #13
 800d7aa:	e180      	b.n	800daae <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ae:	3338      	adds	r3, #56	; 0x38
 800d7b0:	3316      	adds	r3, #22
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fd fe9a 	bl	800b4ec <ld_word>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d106      	bne.n	800d7d0 <find_volume+0x214>
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c4:	3338      	adds	r3, #56	; 0x38
 800d7c6:	3324      	adds	r3, #36	; 0x24
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7fd fea7 	bl	800b51c <ld_dword>
 800d7ce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d7d4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800d7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e2:	789b      	ldrb	r3, [r3, #2]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d005      	beq.n	800d7f4 <find_volume+0x238>
 800d7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ea:	789b      	ldrb	r3, [r3, #2]
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d001      	beq.n	800d7f4 <find_volume+0x238>
 800d7f0:	230d      	movs	r3, #13
 800d7f2:	e15c      	b.n	800daae <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f6:	789b      	ldrb	r3, [r3, #2]
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7fc:	fb02 f303 	mul.w	r3, r2, r3
 800d800:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d808:	b29a      	uxth	r2, r3
 800d80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d810:	895b      	ldrh	r3, [r3, #10]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d008      	beq.n	800d828 <find_volume+0x26c>
 800d816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d818:	895b      	ldrh	r3, [r3, #10]
 800d81a:	461a      	mov	r2, r3
 800d81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81e:	895b      	ldrh	r3, [r3, #10]
 800d820:	3b01      	subs	r3, #1
 800d822:	4013      	ands	r3, r2
 800d824:	2b00      	cmp	r3, #0
 800d826:	d001      	beq.n	800d82c <find_volume+0x270>
 800d828:	230d      	movs	r3, #13
 800d82a:	e140      	b.n	800daae <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82e:	3338      	adds	r3, #56	; 0x38
 800d830:	3311      	adds	r3, #17
 800d832:	4618      	mov	r0, r3
 800d834:	f7fd fe5a 	bl	800b4ec <ld_word>
 800d838:	4603      	mov	r3, r0
 800d83a:	461a      	mov	r2, r3
 800d83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d842:	891b      	ldrh	r3, [r3, #8]
 800d844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d846:	8992      	ldrh	r2, [r2, #12]
 800d848:	0952      	lsrs	r2, r2, #5
 800d84a:	b292      	uxth	r2, r2
 800d84c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d850:	fb01 f202 	mul.w	r2, r1, r2
 800d854:	1a9b      	subs	r3, r3, r2
 800d856:	b29b      	uxth	r3, r3
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d003      	beq.n	800d864 <find_volume+0x2a8>
 800d85c:	230d      	movs	r3, #13
 800d85e:	e126      	b.n	800daae <find_volume+0x4f2>
 800d860:	20003910 	.word	0x20003910

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d866:	3338      	adds	r3, #56	; 0x38
 800d868:	3313      	adds	r3, #19
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fd fe3e 	bl	800b4ec <ld_word>
 800d870:	4603      	mov	r3, r0
 800d872:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d876:	2b00      	cmp	r3, #0
 800d878:	d106      	bne.n	800d888 <find_volume+0x2cc>
 800d87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87c:	3338      	adds	r3, #56	; 0x38
 800d87e:	3320      	adds	r3, #32
 800d880:	4618      	mov	r0, r3
 800d882:	f7fd fe4b 	bl	800b51c <ld_dword>
 800d886:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88a:	3338      	adds	r3, #56	; 0x38
 800d88c:	330e      	adds	r3, #14
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fd fe2c 	bl	800b4ec <ld_word>
 800d894:	4603      	mov	r3, r0
 800d896:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d898:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d101      	bne.n	800d8a2 <find_volume+0x2e6>
 800d89e:	230d      	movs	r3, #13
 800d8a0:	e105      	b.n	800daae <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d8a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d8a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8a6:	4413      	add	r3, r2
 800d8a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8aa:	8911      	ldrh	r1, [r2, #8]
 800d8ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8ae:	8992      	ldrh	r2, [r2, #12]
 800d8b0:	0952      	lsrs	r2, r2, #5
 800d8b2:	b292      	uxth	r2, r2
 800d8b4:	fbb1 f2f2 	udiv	r2, r1, r2
 800d8b8:	b292      	uxth	r2, r2
 800d8ba:	4413      	add	r3, r2
 800d8bc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d8be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d201      	bcs.n	800d8ca <find_volume+0x30e>
 800d8c6:	230d      	movs	r3, #13
 800d8c8:	e0f1      	b.n	800daae <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d8ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ce:	1ad3      	subs	r3, r2, r3
 800d8d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8d2:	8952      	ldrh	r2, [r2, #10]
 800d8d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d101      	bne.n	800d8e4 <find_volume+0x328>
 800d8e0:	230d      	movs	r3, #13
 800d8e2:	e0e4      	b.n	800daae <find_volume+0x4f2>
		fmt = FS_FAT32;
 800d8e4:	2303      	movs	r3, #3
 800d8e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d802      	bhi.n	800d8fa <find_volume+0x33e>
 800d8f4:	2302      	movs	r3, #2
 800d8f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d900:	4293      	cmp	r3, r2
 800d902:	d802      	bhi.n	800d90a <find_volume+0x34e>
 800d904:	2301      	movs	r3, #1
 800d906:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90c:	1c9a      	adds	r2, r3, #2
 800d90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d910:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d914:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d916:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d918:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d91a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d91c:	441a      	add	r2, r3
 800d91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d920:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d922:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d926:	441a      	add	r2, r3
 800d928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d92c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d930:	2b03      	cmp	r3, #3
 800d932:	d11e      	bne.n	800d972 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d936:	3338      	adds	r3, #56	; 0x38
 800d938:	332a      	adds	r3, #42	; 0x2a
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fd fdd6 	bl	800b4ec <ld_word>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d001      	beq.n	800d94a <find_volume+0x38e>
 800d946:	230d      	movs	r3, #13
 800d948:	e0b1      	b.n	800daae <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94c:	891b      	ldrh	r3, [r3, #8]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <find_volume+0x39a>
 800d952:	230d      	movs	r3, #13
 800d954:	e0ab      	b.n	800daae <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d958:	3338      	adds	r3, #56	; 0x38
 800d95a:	332c      	adds	r3, #44	; 0x2c
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7fd fddd 	bl	800b51c <ld_dword>
 800d962:	4602      	mov	r2, r0
 800d964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d966:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96a:	69db      	ldr	r3, [r3, #28]
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	647b      	str	r3, [r7, #68]	; 0x44
 800d970:	e01f      	b.n	800d9b2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d974:	891b      	ldrh	r3, [r3, #8]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d101      	bne.n	800d97e <find_volume+0x3c2>
 800d97a:	230d      	movs	r3, #13
 800d97c:	e097      	b.n	800daae <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d984:	441a      	add	r2, r3
 800d986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d988:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d98a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d103      	bne.n	800d99a <find_volume+0x3de>
 800d992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d994:	69db      	ldr	r3, [r3, #28]
 800d996:	005b      	lsls	r3, r3, #1
 800d998:	e00a      	b.n	800d9b0 <find_volume+0x3f4>
 800d99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99c:	69da      	ldr	r2, [r3, #28]
 800d99e:	4613      	mov	r3, r2
 800d9a0:	005b      	lsls	r3, r3, #1
 800d9a2:	4413      	add	r3, r2
 800d9a4:	085a      	lsrs	r2, r3, #1
 800d9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a8:	69db      	ldr	r3, [r3, #28]
 800d9aa:	f003 0301 	and.w	r3, r3, #1
 800d9ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d9b0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b4:	6a1a      	ldr	r2, [r3, #32]
 800d9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b8:	899b      	ldrh	r3, [r3, #12]
 800d9ba:	4619      	mov	r1, r3
 800d9bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9be:	440b      	add	r3, r1
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9c4:	8989      	ldrh	r1, [r1, #12]
 800d9c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d201      	bcs.n	800d9d2 <find_volume+0x416>
 800d9ce:	230d      	movs	r3, #13
 800d9d0:	e06d      	b.n	800daae <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9d8:	619a      	str	r2, [r3, #24]
 800d9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9dc:	699a      	ldr	r2, [r3, #24]
 800d9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e4:	2280      	movs	r2, #128	; 0x80
 800d9e6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d9e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9ec:	2b03      	cmp	r3, #3
 800d9ee:	d149      	bne.n	800da84 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f2:	3338      	adds	r3, #56	; 0x38
 800d9f4:	3330      	adds	r3, #48	; 0x30
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fd fd78 	bl	800b4ec <ld_word>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d140      	bne.n	800da84 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800da02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da04:	3301      	adds	r3, #1
 800da06:	4619      	mov	r1, r3
 800da08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da0a:	f7fe f81f 	bl	800ba4c <move_window>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d137      	bne.n	800da84 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800da14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da16:	2200      	movs	r2, #0
 800da18:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800da1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1c:	3338      	adds	r3, #56	; 0x38
 800da1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800da22:	4618      	mov	r0, r3
 800da24:	f7fd fd62 	bl	800b4ec <ld_word>
 800da28:	4603      	mov	r3, r0
 800da2a:	461a      	mov	r2, r3
 800da2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800da30:	429a      	cmp	r2, r3
 800da32:	d127      	bne.n	800da84 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800da34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da36:	3338      	adds	r3, #56	; 0x38
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fd fd6f 	bl	800b51c <ld_dword>
 800da3e:	4603      	mov	r3, r0
 800da40:	4a1d      	ldr	r2, [pc, #116]	; (800dab8 <find_volume+0x4fc>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d11e      	bne.n	800da84 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800da46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da48:	3338      	adds	r3, #56	; 0x38
 800da4a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800da4e:	4618      	mov	r0, r3
 800da50:	f7fd fd64 	bl	800b51c <ld_dword>
 800da54:	4603      	mov	r3, r0
 800da56:	4a19      	ldr	r2, [pc, #100]	; (800dabc <find_volume+0x500>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d113      	bne.n	800da84 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800da5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5e:	3338      	adds	r3, #56	; 0x38
 800da60:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800da64:	4618      	mov	r0, r3
 800da66:	f7fd fd59 	bl	800b51c <ld_dword>
 800da6a:	4602      	mov	r2, r0
 800da6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800da70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da72:	3338      	adds	r3, #56	; 0x38
 800da74:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800da78:	4618      	mov	r0, r3
 800da7a:	f7fd fd4f 	bl	800b51c <ld_dword>
 800da7e:	4602      	mov	r2, r0
 800da80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da82:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800da84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da86:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800da8a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800da8c:	4b0c      	ldr	r3, [pc, #48]	; (800dac0 <find_volume+0x504>)
 800da8e:	881b      	ldrh	r3, [r3, #0]
 800da90:	3301      	adds	r3, #1
 800da92:	b29a      	uxth	r2, r3
 800da94:	4b0a      	ldr	r3, [pc, #40]	; (800dac0 <find_volume+0x504>)
 800da96:	801a      	strh	r2, [r3, #0]
 800da98:	4b09      	ldr	r3, [pc, #36]	; (800dac0 <find_volume+0x504>)
 800da9a:	881a      	ldrh	r2, [r3, #0]
 800da9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800daa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa2:	4a08      	ldr	r2, [pc, #32]	; (800dac4 <find_volume+0x508>)
 800daa4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800daa6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800daa8:	f7fd ff68 	bl	800b97c <clear_lock>
#endif
	return FR_OK;
 800daac:	2300      	movs	r3, #0
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3758      	adds	r7, #88	; 0x58
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	41615252 	.word	0x41615252
 800dabc:	61417272 	.word	0x61417272
 800dac0:	20003914 	.word	0x20003914
 800dac4:	20003938 	.word	0x20003938

0800dac8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dad2:	2309      	movs	r3, #9
 800dad4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d01c      	beq.n	800db16 <validate+0x4e>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d018      	beq.n	800db16 <validate+0x4e>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d013      	beq.n	800db16 <validate+0x4e>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	889a      	ldrh	r2, [r3, #4]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	88db      	ldrh	r3, [r3, #6]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d10c      	bne.n	800db16 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	785b      	ldrb	r3, [r3, #1]
 800db02:	4618      	mov	r0, r3
 800db04:	f7fd fc54 	bl	800b3b0 <disk_status>
 800db08:	4603      	mov	r3, r0
 800db0a:	f003 0301 	and.w	r3, r3, #1
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d101      	bne.n	800db16 <validate+0x4e>
			res = FR_OK;
 800db12:	2300      	movs	r3, #0
 800db14:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800db16:	7bfb      	ldrb	r3, [r7, #15]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d102      	bne.n	800db22 <validate+0x5a>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	e000      	b.n	800db24 <validate+0x5c>
 800db22:	2300      	movs	r3, #0
 800db24:	683a      	ldr	r2, [r7, #0]
 800db26:	6013      	str	r3, [r2, #0]
	return res;
 800db28:	7bfb      	ldrb	r3, [r7, #15]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
	...

0800db34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b088      	sub	sp, #32
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	4613      	mov	r3, r2
 800db40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800db46:	f107 0310 	add.w	r3, r7, #16
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7ff fc9c 	bl	800d488 <get_ldnumber>
 800db50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	2b00      	cmp	r3, #0
 800db56:	da01      	bge.n	800db5c <f_mount+0x28>
 800db58:	230b      	movs	r3, #11
 800db5a:	e02b      	b.n	800dbb4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800db5c:	4a17      	ldr	r2, [pc, #92]	; (800dbbc <f_mount+0x88>)
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d005      	beq.n	800db78 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800db6c:	69b8      	ldr	r0, [r7, #24]
 800db6e:	f7fd ff05 	bl	800b97c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800db72:	69bb      	ldr	r3, [r7, #24]
 800db74:	2200      	movs	r2, #0
 800db76:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d002      	beq.n	800db84 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2200      	movs	r2, #0
 800db82:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800db84:	68fa      	ldr	r2, [r7, #12]
 800db86:	490d      	ldr	r1, [pc, #52]	; (800dbbc <f_mount+0x88>)
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d002      	beq.n	800db9a <f_mount+0x66>
 800db94:	79fb      	ldrb	r3, [r7, #7]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d001      	beq.n	800db9e <f_mount+0x6a>
 800db9a:	2300      	movs	r3, #0
 800db9c:	e00a      	b.n	800dbb4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800db9e:	f107 010c 	add.w	r1, r7, #12
 800dba2:	f107 0308 	add.w	r3, r7, #8
 800dba6:	2200      	movs	r2, #0
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7ff fd07 	bl	800d5bc <find_volume>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3720      	adds	r7, #32
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	20003910 	.word	0x20003910

0800dbc0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b09a      	sub	sp, #104	; 0x68
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	4613      	mov	r3, r2
 800dbcc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d101      	bne.n	800dbd8 <f_open+0x18>
 800dbd4:	2309      	movs	r3, #9
 800dbd6:	e1bb      	b.n	800df50 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dbd8:	79fb      	ldrb	r3, [r7, #7]
 800dbda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbde:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800dbe0:	79fa      	ldrb	r2, [r7, #7]
 800dbe2:	f107 0114 	add.w	r1, r7, #20
 800dbe6:	f107 0308 	add.w	r3, r7, #8
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7ff fce6 	bl	800d5bc <find_volume>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800dbf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f040 819f 	bne.w	800df3e <f_open+0x37e>
		dj.obj.fs = fs;
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dc04:	68ba      	ldr	r2, [r7, #8]
 800dc06:	f107 0318 	add.w	r3, r7, #24
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7ff fbc5 	bl	800d39c <follow_path>
 800dc12:	4603      	mov	r3, r0
 800dc14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dc18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d11a      	bne.n	800dc56 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dc20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dc24:	b25b      	sxtb	r3, r3
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	da03      	bge.n	800dc32 <f_open+0x72>
				res = FR_INVALID_NAME;
 800dc2a:	2306      	movs	r3, #6
 800dc2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dc30:	e011      	b.n	800dc56 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dc32:	79fb      	ldrb	r3, [r7, #7]
 800dc34:	f023 0301 	bic.w	r3, r3, #1
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	bf14      	ite	ne
 800dc3c:	2301      	movne	r3, #1
 800dc3e:	2300      	moveq	r3, #0
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	461a      	mov	r2, r3
 800dc44:	f107 0318 	add.w	r3, r7, #24
 800dc48:	4611      	mov	r1, r2
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7fd fd4e 	bl	800b6ec <chk_lock>
 800dc50:	4603      	mov	r3, r0
 800dc52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dc56:	79fb      	ldrb	r3, [r7, #7]
 800dc58:	f003 031c 	and.w	r3, r3, #28
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d07f      	beq.n	800dd60 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dc60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d017      	beq.n	800dc98 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dc68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc6c:	2b04      	cmp	r3, #4
 800dc6e:	d10e      	bne.n	800dc8e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dc70:	f7fd fd98 	bl	800b7a4 <enq_lock>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d006      	beq.n	800dc88 <f_open+0xc8>
 800dc7a:	f107 0318 	add.w	r3, r7, #24
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fe fffe 	bl	800cc80 <dir_register>
 800dc84:	4603      	mov	r3, r0
 800dc86:	e000      	b.n	800dc8a <f_open+0xca>
 800dc88:	2312      	movs	r3, #18
 800dc8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dc8e:	79fb      	ldrb	r3, [r7, #7]
 800dc90:	f043 0308 	orr.w	r3, r3, #8
 800dc94:	71fb      	strb	r3, [r7, #7]
 800dc96:	e010      	b.n	800dcba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dc98:	7fbb      	ldrb	r3, [r7, #30]
 800dc9a:	f003 0311 	and.w	r3, r3, #17
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d003      	beq.n	800dcaa <f_open+0xea>
					res = FR_DENIED;
 800dca2:	2307      	movs	r3, #7
 800dca4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dca8:	e007      	b.n	800dcba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dcaa:	79fb      	ldrb	r3, [r7, #7]
 800dcac:	f003 0304 	and.w	r3, r3, #4
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d002      	beq.n	800dcba <f_open+0xfa>
 800dcb4:	2308      	movs	r3, #8
 800dcb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dcba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d168      	bne.n	800dd94 <f_open+0x1d4>
 800dcc2:	79fb      	ldrb	r3, [r7, #7]
 800dcc4:	f003 0308 	and.w	r3, r3, #8
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d063      	beq.n	800dd94 <f_open+0x1d4>
				dw = GET_FATTIME();
 800dccc:	f7fb fa78 	bl	80091c0 <get_fattime>
 800dcd0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd4:	330e      	adds	r3, #14
 800dcd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7fd fc5d 	bl	800b598 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce0:	3316      	adds	r3, #22
 800dce2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7fd fc57 	bl	800b598 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcec:	330b      	adds	r3, #11
 800dcee:	2220      	movs	r2, #32
 800dcf0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7fe fc2f 	bl	800c55c <ld_clust>
 800dcfe:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dd04:	2200      	movs	r2, #0
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7fe fc47 	bl	800c59a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0e:	331c      	adds	r3, #28
 800dd10:	2100      	movs	r1, #0
 800dd12:	4618      	mov	r0, r3
 800dd14:	f7fd fc40 	bl	800b598 <st_dword>
					fs->wflag = 1;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dd1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d037      	beq.n	800dd94 <f_open+0x1d4>
						dw = fs->winsect;
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd28:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800dd2a:	f107 0318 	add.w	r3, r7, #24
 800dd2e:	2200      	movs	r2, #0
 800dd30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fe f937 	bl	800bfa6 <remove_chain>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800dd3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d126      	bne.n	800dd94 <f_open+0x1d4>
							res = move_window(fs, dw);
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fd fe7e 	bl	800ba4c <move_window>
 800dd50:	4603      	mov	r3, r0
 800dd52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd5a:	3a01      	subs	r2, #1
 800dd5c:	615a      	str	r2, [r3, #20]
 800dd5e:	e019      	b.n	800dd94 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dd60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d115      	bne.n	800dd94 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dd68:	7fbb      	ldrb	r3, [r7, #30]
 800dd6a:	f003 0310 	and.w	r3, r3, #16
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d003      	beq.n	800dd7a <f_open+0x1ba>
					res = FR_NO_FILE;
 800dd72:	2304      	movs	r3, #4
 800dd74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dd78:	e00c      	b.n	800dd94 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dd7a:	79fb      	ldrb	r3, [r7, #7]
 800dd7c:	f003 0302 	and.w	r3, r3, #2
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d007      	beq.n	800dd94 <f_open+0x1d4>
 800dd84:	7fbb      	ldrb	r3, [r7, #30]
 800dd86:	f003 0301 	and.w	r3, r3, #1
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d002      	beq.n	800dd94 <f_open+0x1d4>
						res = FR_DENIED;
 800dd8e:	2307      	movs	r3, #7
 800dd90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800dd94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d128      	bne.n	800ddee <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dd9c:	79fb      	ldrb	r3, [r7, #7]
 800dd9e:	f003 0308 	and.w	r3, r3, #8
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d003      	beq.n	800ddae <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dda6:	79fb      	ldrb	r3, [r7, #7]
 800dda8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ddb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ddbc:	79fb      	ldrb	r3, [r7, #7]
 800ddbe:	f023 0301 	bic.w	r3, r3, #1
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	bf14      	ite	ne
 800ddc6:	2301      	movne	r3, #1
 800ddc8:	2300      	moveq	r3, #0
 800ddca:	b2db      	uxtb	r3, r3
 800ddcc:	461a      	mov	r2, r3
 800ddce:	f107 0318 	add.w	r3, r7, #24
 800ddd2:	4611      	mov	r1, r2
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7fd fd07 	bl	800b7e8 <inc_lock>
 800ddda:	4602      	mov	r2, r0
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	691b      	ldr	r3, [r3, #16]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d102      	bne.n	800ddee <f_open+0x22e>
 800dde8:	2302      	movs	r3, #2
 800ddea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ddee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	f040 80a3 	bne.w	800df3e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fe fbac 	bl	800c55c <ld_clust>
 800de04:	4602      	mov	r2, r0
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800de0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0c:	331c      	adds	r3, #28
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fd fb84 	bl	800b51c <ld_dword>
 800de14:	4602      	mov	r2, r0
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2200      	movs	r2, #0
 800de1e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800de20:	697a      	ldr	r2, [r7, #20]
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	88da      	ldrh	r2, [r3, #6]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	79fa      	ldrb	r2, [r7, #7]
 800de32:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2200      	movs	r2, #0
 800de38:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2200      	movs	r2, #0
 800de3e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2200      	movs	r2, #0
 800de44:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	3330      	adds	r3, #48	; 0x30
 800de4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800de4e:	2100      	movs	r1, #0
 800de50:	4618      	mov	r0, r3
 800de52:	f7fd fbee 	bl	800b632 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800de56:	79fb      	ldrb	r3, [r7, #7]
 800de58:	f003 0320 	and.w	r3, r3, #32
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d06e      	beq.n	800df3e <f_open+0x37e>
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d06a      	beq.n	800df3e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	68da      	ldr	r2, [r3, #12]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	895b      	ldrh	r3, [r3, #10]
 800de74:	461a      	mov	r2, r3
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	899b      	ldrh	r3, [r3, #12]
 800de7a:	fb02 f303 	mul.w	r3, r2, r3
 800de7e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	689b      	ldr	r3, [r3, #8]
 800de84:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de8c:	e016      	b.n	800debc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800de92:	4618      	mov	r0, r3
 800de94:	f7fd fe97 	bl	800bbc6 <get_fat>
 800de98:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800de9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d802      	bhi.n	800dea6 <f_open+0x2e6>
 800dea0:	2302      	movs	r3, #2
 800dea2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800deac:	d102      	bne.n	800deb4 <f_open+0x2f4>
 800deae:	2301      	movs	r3, #1
 800deb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800deb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800deb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deb8:	1ad3      	subs	r3, r2, r3
 800deba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800debc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d103      	bne.n	800decc <f_open+0x30c>
 800dec4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dec8:	429a      	cmp	r2, r3
 800deca:	d8e0      	bhi.n	800de8e <f_open+0x2ce>
				}
				fp->clust = clst;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ded0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ded2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d131      	bne.n	800df3e <f_open+0x37e>
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	899b      	ldrh	r3, [r3, #12]
 800dede:	461a      	mov	r2, r3
 800dee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dee2:	fbb3 f1f2 	udiv	r1, r3, r2
 800dee6:	fb01 f202 	mul.w	r2, r1, r2
 800deea:	1a9b      	subs	r3, r3, r2
 800deec:	2b00      	cmp	r3, #0
 800deee:	d026      	beq.n	800df3e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800def4:	4618      	mov	r0, r3
 800def6:	f7fd fe47 	bl	800bb88 <clust2sect>
 800defa:	64f8      	str	r0, [r7, #76]	; 0x4c
 800defc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800defe:	2b00      	cmp	r3, #0
 800df00:	d103      	bne.n	800df0a <f_open+0x34a>
						res = FR_INT_ERR;
 800df02:	2302      	movs	r3, #2
 800df04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800df08:	e019      	b.n	800df3e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	899b      	ldrh	r3, [r3, #12]
 800df0e:	461a      	mov	r2, r3
 800df10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df12:	fbb3 f2f2 	udiv	r2, r3, r2
 800df16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df18:	441a      	add	r2, r3
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	7858      	ldrb	r0, [r3, #1]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	6a1a      	ldr	r2, [r3, #32]
 800df2c:	2301      	movs	r3, #1
 800df2e:	f7fd fa7f 	bl	800b430 <disk_read>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d002      	beq.n	800df3e <f_open+0x37e>
 800df38:	2301      	movs	r3, #1
 800df3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800df3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df42:	2b00      	cmp	r3, #0
 800df44:	d002      	beq.n	800df4c <f_open+0x38c>
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2200      	movs	r2, #0
 800df4a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800df4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800df50:	4618      	mov	r0, r3
 800df52:	3768      	adds	r7, #104	; 0x68
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08e      	sub	sp, #56	; 0x38
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	607a      	str	r2, [r7, #4]
 800df64:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	2200      	movs	r2, #0
 800df6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f107 0214 	add.w	r2, r7, #20
 800df76:	4611      	mov	r1, r2
 800df78:	4618      	mov	r0, r3
 800df7a:	f7ff fda5 	bl	800dac8 <validate>
 800df7e:	4603      	mov	r3, r0
 800df80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800df84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d107      	bne.n	800df9c <f_read+0x44>
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	7d5b      	ldrb	r3, [r3, #21]
 800df90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800df94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d002      	beq.n	800dfa2 <f_read+0x4a>
 800df9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dfa0:	e135      	b.n	800e20e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	7d1b      	ldrb	r3, [r3, #20]
 800dfa6:	f003 0301 	and.w	r3, r3, #1
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d101      	bne.n	800dfb2 <f_read+0x5a>
 800dfae:	2307      	movs	r3, #7
 800dfb0:	e12d      	b.n	800e20e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	68da      	ldr	r2, [r3, #12]
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	699b      	ldr	r3, [r3, #24]
 800dfba:	1ad3      	subs	r3, r2, r3
 800dfbc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	6a3b      	ldr	r3, [r7, #32]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	f240 811e 	bls.w	800e204 <f_read+0x2ac>
 800dfc8:	6a3b      	ldr	r3, [r7, #32]
 800dfca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800dfcc:	e11a      	b.n	800e204 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	699b      	ldr	r3, [r3, #24]
 800dfd2:	697a      	ldr	r2, [r7, #20]
 800dfd4:	8992      	ldrh	r2, [r2, #12]
 800dfd6:	fbb3 f1f2 	udiv	r1, r3, r2
 800dfda:	fb01 f202 	mul.w	r2, r1, r2
 800dfde:	1a9b      	subs	r3, r3, r2
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f040 80d5 	bne.w	800e190 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	699b      	ldr	r3, [r3, #24]
 800dfea:	697a      	ldr	r2, [r7, #20]
 800dfec:	8992      	ldrh	r2, [r2, #12]
 800dfee:	fbb3 f3f2 	udiv	r3, r3, r2
 800dff2:	697a      	ldr	r2, [r7, #20]
 800dff4:	8952      	ldrh	r2, [r2, #10]
 800dff6:	3a01      	subs	r2, #1
 800dff8:	4013      	ands	r3, r2
 800dffa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d12f      	bne.n	800e062 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	699b      	ldr	r3, [r3, #24]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d103      	bne.n	800e012 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	689b      	ldr	r3, [r3, #8]
 800e00e:	633b      	str	r3, [r7, #48]	; 0x30
 800e010:	e013      	b.n	800e03a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e016:	2b00      	cmp	r3, #0
 800e018:	d007      	beq.n	800e02a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	699b      	ldr	r3, [r3, #24]
 800e01e:	4619      	mov	r1, r3
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f7fe f8bd 	bl	800c1a0 <clmt_clust>
 800e026:	6338      	str	r0, [r7, #48]	; 0x30
 800e028:	e007      	b.n	800e03a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e02a:	68fa      	ldr	r2, [r7, #12]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	69db      	ldr	r3, [r3, #28]
 800e030:	4619      	mov	r1, r3
 800e032:	4610      	mov	r0, r2
 800e034:	f7fd fdc7 	bl	800bbc6 <get_fat>
 800e038:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d804      	bhi.n	800e04a <f_read+0xf2>
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	2202      	movs	r2, #2
 800e044:	755a      	strb	r2, [r3, #21]
 800e046:	2302      	movs	r3, #2
 800e048:	e0e1      	b.n	800e20e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e050:	d104      	bne.n	800e05c <f_read+0x104>
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2201      	movs	r2, #1
 800e056:	755a      	strb	r2, [r3, #21]
 800e058:	2301      	movs	r3, #1
 800e05a:	e0d8      	b.n	800e20e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e060:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e062:	697a      	ldr	r2, [r7, #20]
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	69db      	ldr	r3, [r3, #28]
 800e068:	4619      	mov	r1, r3
 800e06a:	4610      	mov	r0, r2
 800e06c:	f7fd fd8c 	bl	800bb88 <clust2sect>
 800e070:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e072:	69bb      	ldr	r3, [r7, #24]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d104      	bne.n	800e082 <f_read+0x12a>
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2202      	movs	r2, #2
 800e07c:	755a      	strb	r2, [r3, #21]
 800e07e:	2302      	movs	r3, #2
 800e080:	e0c5      	b.n	800e20e <f_read+0x2b6>
			sect += csect;
 800e082:	69ba      	ldr	r2, [r7, #24]
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	4413      	add	r3, r2
 800e088:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	899b      	ldrh	r3, [r3, #12]
 800e08e:	461a      	mov	r2, r3
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	fbb3 f3f2 	udiv	r3, r3, r2
 800e096:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d041      	beq.n	800e122 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e09e:	69fa      	ldr	r2, [r7, #28]
 800e0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a2:	4413      	add	r3, r2
 800e0a4:	697a      	ldr	r2, [r7, #20]
 800e0a6:	8952      	ldrh	r2, [r2, #10]
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d905      	bls.n	800e0b8 <f_read+0x160>
					cc = fs->csize - csect;
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	895b      	ldrh	r3, [r3, #10]
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	1ad3      	subs	r3, r2, r3
 800e0b6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	7858      	ldrb	r0, [r3, #1]
 800e0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0be:	69ba      	ldr	r2, [r7, #24]
 800e0c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0c2:	f7fd f9b5 	bl	800b430 <disk_read>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d004      	beq.n	800e0d6 <f_read+0x17e>
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	755a      	strb	r2, [r3, #21]
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	e09b      	b.n	800e20e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	7d1b      	ldrb	r3, [r3, #20]
 800e0da:	b25b      	sxtb	r3, r3
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	da18      	bge.n	800e112 <f_read+0x1ba>
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	6a1a      	ldr	r2, [r3, #32]
 800e0e4:	69bb      	ldr	r3, [r7, #24]
 800e0e6:	1ad3      	subs	r3, r2, r3
 800e0e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d911      	bls.n	800e112 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	6a1a      	ldr	r2, [r3, #32]
 800e0f2:	69bb      	ldr	r3, [r7, #24]
 800e0f4:	1ad3      	subs	r3, r2, r3
 800e0f6:	697a      	ldr	r2, [r7, #20]
 800e0f8:	8992      	ldrh	r2, [r2, #12]
 800e0fa:	fb02 f303 	mul.w	r3, r2, r3
 800e0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e100:	18d0      	adds	r0, r2, r3
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	899b      	ldrh	r3, [r3, #12]
 800e10c:	461a      	mov	r2, r3
 800e10e:	f7fd fa6f 	bl	800b5f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	899b      	ldrh	r3, [r3, #12]
 800e116:	461a      	mov	r2, r3
 800e118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11a:	fb02 f303 	mul.w	r3, r2, r3
 800e11e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e120:	e05c      	b.n	800e1dc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	6a1b      	ldr	r3, [r3, #32]
 800e126:	69ba      	ldr	r2, [r7, #24]
 800e128:	429a      	cmp	r2, r3
 800e12a:	d02e      	beq.n	800e18a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	7d1b      	ldrb	r3, [r3, #20]
 800e130:	b25b      	sxtb	r3, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	da18      	bge.n	800e168 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	7858      	ldrb	r0, [r3, #1]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6a1a      	ldr	r2, [r3, #32]
 800e144:	2301      	movs	r3, #1
 800e146:	f7fd f993 	bl	800b470 <disk_write>
 800e14a:	4603      	mov	r3, r0
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d004      	beq.n	800e15a <f_read+0x202>
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	2201      	movs	r2, #1
 800e154:	755a      	strb	r2, [r3, #21]
 800e156:	2301      	movs	r3, #1
 800e158:	e059      	b.n	800e20e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	7d1b      	ldrb	r3, [r3, #20]
 800e15e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e162:	b2da      	uxtb	r2, r3
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	7858      	ldrb	r0, [r3, #1]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e172:	2301      	movs	r3, #1
 800e174:	69ba      	ldr	r2, [r7, #24]
 800e176:	f7fd f95b 	bl	800b430 <disk_read>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d004      	beq.n	800e18a <f_read+0x232>
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2201      	movs	r2, #1
 800e184:	755a      	strb	r2, [r3, #21]
 800e186:	2301      	movs	r3, #1
 800e188:	e041      	b.n	800e20e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	69ba      	ldr	r2, [r7, #24]
 800e18e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	899b      	ldrh	r3, [r3, #12]
 800e194:	4618      	mov	r0, r3
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	699b      	ldr	r3, [r3, #24]
 800e19a:	697a      	ldr	r2, [r7, #20]
 800e19c:	8992      	ldrh	r2, [r2, #12]
 800e19e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e1a2:	fb01 f202 	mul.w	r2, r1, r2
 800e1a6:	1a9b      	subs	r3, r3, r2
 800e1a8:	1ac3      	subs	r3, r0, r3
 800e1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e1ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d901      	bls.n	800e1b8 <f_read+0x260>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	699b      	ldr	r3, [r3, #24]
 800e1c2:	697a      	ldr	r2, [r7, #20]
 800e1c4:	8992      	ldrh	r2, [r2, #12]
 800e1c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800e1ca:	fb00 f202 	mul.w	r2, r0, r2
 800e1ce:	1a9b      	subs	r3, r3, r2
 800e1d0:	440b      	add	r3, r1
 800e1d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1d8:	f7fd fa0a 	bl	800b5f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e0:	4413      	add	r3, r2
 800e1e2:	627b      	str	r3, [r7, #36]	; 0x24
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	699a      	ldr	r2, [r3, #24]
 800e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ea:	441a      	add	r2, r3
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	619a      	str	r2, [r3, #24]
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	441a      	add	r2, r3
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	601a      	str	r2, [r3, #0]
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2b00      	cmp	r3, #0
 800e208:	f47f aee1 	bne.w	800dfce <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e20c:	2300      	movs	r3, #0
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3738      	adds	r7, #56	; 0x38
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b08c      	sub	sp, #48	; 0x30
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	60f8      	str	r0, [r7, #12]
 800e21e:	60b9      	str	r1, [r7, #8]
 800e220:	607a      	str	r2, [r7, #4]
 800e222:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	2200      	movs	r2, #0
 800e22c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f107 0210 	add.w	r2, r7, #16
 800e234:	4611      	mov	r1, r2
 800e236:	4618      	mov	r0, r3
 800e238:	f7ff fc46 	bl	800dac8 <validate>
 800e23c:	4603      	mov	r3, r0
 800e23e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e246:	2b00      	cmp	r3, #0
 800e248:	d107      	bne.n	800e25a <f_write+0x44>
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	7d5b      	ldrb	r3, [r3, #21]
 800e24e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e256:	2b00      	cmp	r3, #0
 800e258:	d002      	beq.n	800e260 <f_write+0x4a>
 800e25a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e25e:	e16a      	b.n	800e536 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	7d1b      	ldrb	r3, [r3, #20]
 800e264:	f003 0302 	and.w	r3, r3, #2
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d101      	bne.n	800e270 <f_write+0x5a>
 800e26c:	2307      	movs	r3, #7
 800e26e:	e162      	b.n	800e536 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	699a      	ldr	r2, [r3, #24]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	441a      	add	r2, r3
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	699b      	ldr	r3, [r3, #24]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	f080 814c 	bcs.w	800e51a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	699b      	ldr	r3, [r3, #24]
 800e286:	43db      	mvns	r3, r3
 800e288:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e28a:	e146      	b.n	800e51a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	699b      	ldr	r3, [r3, #24]
 800e290:	693a      	ldr	r2, [r7, #16]
 800e292:	8992      	ldrh	r2, [r2, #12]
 800e294:	fbb3 f1f2 	udiv	r1, r3, r2
 800e298:	fb01 f202 	mul.w	r2, r1, r2
 800e29c:	1a9b      	subs	r3, r3, r2
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f040 80f1 	bne.w	800e486 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	699b      	ldr	r3, [r3, #24]
 800e2a8:	693a      	ldr	r2, [r7, #16]
 800e2aa:	8992      	ldrh	r2, [r2, #12]
 800e2ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2b0:	693a      	ldr	r2, [r7, #16]
 800e2b2:	8952      	ldrh	r2, [r2, #10]
 800e2b4:	3a01      	subs	r2, #1
 800e2b6:	4013      	ands	r3, r2
 800e2b8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d143      	bne.n	800e348 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	699b      	ldr	r3, [r3, #24]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10c      	bne.n	800e2e2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d11a      	bne.n	800e30a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2100      	movs	r1, #0
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7fd fec9 	bl	800c070 <create_chain>
 800e2de:	62b8      	str	r0, [r7, #40]	; 0x28
 800e2e0:	e013      	b.n	800e30a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d007      	beq.n	800e2fa <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	699b      	ldr	r3, [r3, #24]
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f7fd ff55 	bl	800c1a0 <clmt_clust>
 800e2f6:	62b8      	str	r0, [r7, #40]	; 0x28
 800e2f8:	e007      	b.n	800e30a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	69db      	ldr	r3, [r3, #28]
 800e300:	4619      	mov	r1, r3
 800e302:	4610      	mov	r0, r2
 800e304:	f7fd feb4 	bl	800c070 <create_chain>
 800e308:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	f000 8109 	beq.w	800e524 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e314:	2b01      	cmp	r3, #1
 800e316:	d104      	bne.n	800e322 <f_write+0x10c>
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2202      	movs	r2, #2
 800e31c:	755a      	strb	r2, [r3, #21]
 800e31e:	2302      	movs	r3, #2
 800e320:	e109      	b.n	800e536 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e328:	d104      	bne.n	800e334 <f_write+0x11e>
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2201      	movs	r2, #1
 800e32e:	755a      	strb	r2, [r3, #21]
 800e330:	2301      	movs	r3, #1
 800e332:	e100      	b.n	800e536 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e338:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d102      	bne.n	800e348 <f_write+0x132>
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e346:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	7d1b      	ldrb	r3, [r3, #20]
 800e34c:	b25b      	sxtb	r3, r3
 800e34e:	2b00      	cmp	r3, #0
 800e350:	da18      	bge.n	800e384 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	7858      	ldrb	r0, [r3, #1]
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	6a1a      	ldr	r2, [r3, #32]
 800e360:	2301      	movs	r3, #1
 800e362:	f7fd f885 	bl	800b470 <disk_write>
 800e366:	4603      	mov	r3, r0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d004      	beq.n	800e376 <f_write+0x160>
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2201      	movs	r2, #1
 800e370:	755a      	strb	r2, [r3, #21]
 800e372:	2301      	movs	r3, #1
 800e374:	e0df      	b.n	800e536 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	7d1b      	ldrb	r3, [r3, #20]
 800e37a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e37e:	b2da      	uxtb	r2, r3
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e384:	693a      	ldr	r2, [r7, #16]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	69db      	ldr	r3, [r3, #28]
 800e38a:	4619      	mov	r1, r3
 800e38c:	4610      	mov	r0, r2
 800e38e:	f7fd fbfb 	bl	800bb88 <clust2sect>
 800e392:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d104      	bne.n	800e3a4 <f_write+0x18e>
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2202      	movs	r2, #2
 800e39e:	755a      	strb	r2, [r3, #21]
 800e3a0:	2302      	movs	r3, #2
 800e3a2:	e0c8      	b.n	800e536 <f_write+0x320>
			sect += csect;
 800e3a4:	697a      	ldr	r2, [r7, #20]
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	899b      	ldrh	r3, [r3, #12]
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3b8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e3ba:	6a3b      	ldr	r3, [r7, #32]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d043      	beq.n	800e448 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e3c0:	69ba      	ldr	r2, [r7, #24]
 800e3c2:	6a3b      	ldr	r3, [r7, #32]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	693a      	ldr	r2, [r7, #16]
 800e3c8:	8952      	ldrh	r2, [r2, #10]
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d905      	bls.n	800e3da <f_write+0x1c4>
					cc = fs->csize - csect;
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	895b      	ldrh	r3, [r3, #10]
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	69bb      	ldr	r3, [r7, #24]
 800e3d6:	1ad3      	subs	r3, r2, r3
 800e3d8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	7858      	ldrb	r0, [r3, #1]
 800e3de:	6a3b      	ldr	r3, [r7, #32]
 800e3e0:	697a      	ldr	r2, [r7, #20]
 800e3e2:	69f9      	ldr	r1, [r7, #28]
 800e3e4:	f7fd f844 	bl	800b470 <disk_write>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d004      	beq.n	800e3f8 <f_write+0x1e2>
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	755a      	strb	r2, [r3, #21]
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e09e      	b.n	800e536 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	6a1a      	ldr	r2, [r3, #32]
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	1ad3      	subs	r3, r2, r3
 800e400:	6a3a      	ldr	r2, [r7, #32]
 800e402:	429a      	cmp	r2, r3
 800e404:	d918      	bls.n	800e438 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	6a1a      	ldr	r2, [r3, #32]
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	693a      	ldr	r2, [r7, #16]
 800e416:	8992      	ldrh	r2, [r2, #12]
 800e418:	fb02 f303 	mul.w	r3, r2, r3
 800e41c:	69fa      	ldr	r2, [r7, #28]
 800e41e:	18d1      	adds	r1, r2, r3
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	899b      	ldrh	r3, [r3, #12]
 800e424:	461a      	mov	r2, r3
 800e426:	f7fd f8e3 	bl	800b5f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	7d1b      	ldrb	r3, [r3, #20]
 800e42e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e432:	b2da      	uxtb	r2, r3
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	899b      	ldrh	r3, [r3, #12]
 800e43c:	461a      	mov	r2, r3
 800e43e:	6a3b      	ldr	r3, [r7, #32]
 800e440:	fb02 f303 	mul.w	r3, r2, r3
 800e444:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e446:	e04b      	b.n	800e4e0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6a1b      	ldr	r3, [r3, #32]
 800e44c:	697a      	ldr	r2, [r7, #20]
 800e44e:	429a      	cmp	r2, r3
 800e450:	d016      	beq.n	800e480 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	699a      	ldr	r2, [r3, #24]
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d210      	bcs.n	800e480 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	7858      	ldrb	r0, [r3, #1]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e468:	2301      	movs	r3, #1
 800e46a:	697a      	ldr	r2, [r7, #20]
 800e46c:	f7fc ffe0 	bl	800b430 <disk_read>
 800e470:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e472:	2b00      	cmp	r3, #0
 800e474:	d004      	beq.n	800e480 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2201      	movs	r2, #1
 800e47a:	755a      	strb	r2, [r3, #21]
 800e47c:	2301      	movs	r3, #1
 800e47e:	e05a      	b.n	800e536 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	697a      	ldr	r2, [r7, #20]
 800e484:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	899b      	ldrh	r3, [r3, #12]
 800e48a:	4618      	mov	r0, r3
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	699b      	ldr	r3, [r3, #24]
 800e490:	693a      	ldr	r2, [r7, #16]
 800e492:	8992      	ldrh	r2, [r2, #12]
 800e494:	fbb3 f1f2 	udiv	r1, r3, r2
 800e498:	fb01 f202 	mul.w	r2, r1, r2
 800e49c:	1a9b      	subs	r3, r3, r2
 800e49e:	1ac3      	subs	r3, r0, r3
 800e4a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e4a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d901      	bls.n	800e4ae <f_write+0x298>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	699b      	ldr	r3, [r3, #24]
 800e4b8:	693a      	ldr	r2, [r7, #16]
 800e4ba:	8992      	ldrh	r2, [r2, #12]
 800e4bc:	fbb3 f0f2 	udiv	r0, r3, r2
 800e4c0:	fb00 f202 	mul.w	r2, r0, r2
 800e4c4:	1a9b      	subs	r3, r3, r2
 800e4c6:	440b      	add	r3, r1
 800e4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4ca:	69f9      	ldr	r1, [r7, #28]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fd f88f 	bl	800b5f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	7d1b      	ldrb	r3, [r3, #20]
 800e4d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e4da:	b2da      	uxtb	r2, r3
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e4e0:	69fa      	ldr	r2, [r7, #28]
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e4:	4413      	add	r3, r2
 800e4e6:	61fb      	str	r3, [r7, #28]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	699a      	ldr	r2, [r3, #24]
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ee:	441a      	add	r2, r3
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	619a      	str	r2, [r3, #24]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	68da      	ldr	r2, [r3, #12]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	699b      	ldr	r3, [r3, #24]
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	bf38      	it	cc
 800e500:	461a      	movcc	r2, r3
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	60da      	str	r2, [r3, #12]
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50c:	441a      	add	r2, r3
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	601a      	str	r2, [r3, #0]
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e516:	1ad3      	subs	r3, r2, r3
 800e518:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	f47f aeb5 	bne.w	800e28c <f_write+0x76>
 800e522:	e000      	b.n	800e526 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e524:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	7d1b      	ldrb	r3, [r3, #20]
 800e52a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e52e:	b2da      	uxtb	r2, r3
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e534:	2300      	movs	r3, #0
}
 800e536:	4618      	mov	r0, r3
 800e538:	3730      	adds	r7, #48	; 0x30
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e53e:	b580      	push	{r7, lr}
 800e540:	b086      	sub	sp, #24
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f107 0208 	add.w	r2, r7, #8
 800e54c:	4611      	mov	r1, r2
 800e54e:	4618      	mov	r0, r3
 800e550:	f7ff faba 	bl	800dac8 <validate>
 800e554:	4603      	mov	r3, r0
 800e556:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e558:	7dfb      	ldrb	r3, [r7, #23]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d168      	bne.n	800e630 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	7d1b      	ldrb	r3, [r3, #20]
 800e562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e566:	2b00      	cmp	r3, #0
 800e568:	d062      	beq.n	800e630 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	7d1b      	ldrb	r3, [r3, #20]
 800e56e:	b25b      	sxtb	r3, r3
 800e570:	2b00      	cmp	r3, #0
 800e572:	da15      	bge.n	800e5a0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	7858      	ldrb	r0, [r3, #1]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6a1a      	ldr	r2, [r3, #32]
 800e582:	2301      	movs	r3, #1
 800e584:	f7fc ff74 	bl	800b470 <disk_write>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d001      	beq.n	800e592 <f_sync+0x54>
 800e58e:	2301      	movs	r3, #1
 800e590:	e04f      	b.n	800e632 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	7d1b      	ldrb	r3, [r3, #20]
 800e596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e59a:	b2da      	uxtb	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e5a0:	f7fa fe0e 	bl	80091c0 <get_fattime>
 800e5a4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e5a6:	68ba      	ldr	r2, [r7, #8]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	f7fd fa4c 	bl	800ba4c <move_window>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e5b8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d138      	bne.n	800e630 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5c2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	330b      	adds	r3, #11
 800e5c8:	781a      	ldrb	r2, [r3, #0]
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	330b      	adds	r3, #11
 800e5ce:	f042 0220 	orr.w	r2, r2, #32
 800e5d2:	b2d2      	uxtb	r2, r2
 800e5d4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6818      	ldr	r0, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	689b      	ldr	r3, [r3, #8]
 800e5de:	461a      	mov	r2, r3
 800e5e0:	68f9      	ldr	r1, [r7, #12]
 800e5e2:	f7fd ffda 	bl	800c59a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f103 021c 	add.w	r2, r3, #28
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	4610      	mov	r0, r2
 800e5f4:	f7fc ffd0 	bl	800b598 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	3316      	adds	r3, #22
 800e5fc:	6939      	ldr	r1, [r7, #16]
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fc ffca 	bl	800b598 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	3312      	adds	r3, #18
 800e608:	2100      	movs	r1, #0
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fc ffa9 	bl	800b562 <st_word>
					fs->wflag = 1;
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	2201      	movs	r2, #1
 800e614:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fd fa45 	bl	800baa8 <sync_fs>
 800e61e:	4603      	mov	r3, r0
 800e620:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	7d1b      	ldrb	r3, [r3, #20]
 800e626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e62a:	b2da      	uxtb	r2, r3
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e630:	7dfb      	ldrb	r3, [r7, #23]
}
 800e632:	4618      	mov	r0, r3
 800e634:	3718      	adds	r7, #24
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b084      	sub	sp, #16
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f7ff ff7b 	bl	800e53e <f_sync>
 800e648:	4603      	mov	r3, r0
 800e64a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e64c:	7bfb      	ldrb	r3, [r7, #15]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d118      	bne.n	800e684 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f107 0208 	add.w	r2, r7, #8
 800e658:	4611      	mov	r1, r2
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7ff fa34 	bl	800dac8 <validate>
 800e660:	4603      	mov	r3, r0
 800e662:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e664:	7bfb      	ldrb	r3, [r7, #15]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d10c      	bne.n	800e684 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	691b      	ldr	r3, [r3, #16]
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fd f948 	bl	800b904 <dec_lock>
 800e674:	4603      	mov	r3, r0
 800e676:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e678:	7bfb      	ldrb	r3, [r7, #15]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d102      	bne.n	800e684 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2200      	movs	r2, #0
 800e682:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e684:	7bfb      	ldrb	r3, [r7, #15]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3710      	adds	r7, #16
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}

0800e68e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b090      	sub	sp, #64	; 0x40
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
 800e696:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f107 0208 	add.w	r2, r7, #8
 800e69e:	4611      	mov	r1, r2
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7ff fa11 	bl	800dac8 <validate>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e6ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d103      	bne.n	800e6bc <f_lseek+0x2e>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	7d5b      	ldrb	r3, [r3, #21]
 800e6b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e6bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d002      	beq.n	800e6ca <f_lseek+0x3c>
 800e6c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e6c8:	e201      	b.n	800eace <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	f000 80d9 	beq.w	800e886 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6da:	d15a      	bne.n	800e792 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e4:	1d1a      	adds	r2, r3, #4
 800e6e6:	627a      	str	r2, [r7, #36]	; 0x24
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	617b      	str	r3, [r7, #20]
 800e6ec:	2302      	movs	r3, #2
 800e6ee:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	689b      	ldr	r3, [r3, #8]
 800e6f4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d03a      	beq.n	800e772 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6fe:	613b      	str	r3, [r7, #16]
 800e700:	2300      	movs	r3, #0
 800e702:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e706:	3302      	adds	r3, #2
 800e708:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70c:	60fb      	str	r3, [r7, #12]
 800e70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e710:	3301      	adds	r3, #1
 800e712:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e718:	4618      	mov	r0, r3
 800e71a:	f7fd fa54 	bl	800bbc6 <get_fat>
 800e71e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e722:	2b01      	cmp	r3, #1
 800e724:	d804      	bhi.n	800e730 <f_lseek+0xa2>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2202      	movs	r2, #2
 800e72a:	755a      	strb	r2, [r3, #21]
 800e72c:	2302      	movs	r3, #2
 800e72e:	e1ce      	b.n	800eace <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e736:	d104      	bne.n	800e742 <f_lseek+0xb4>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2201      	movs	r2, #1
 800e73c:	755a      	strb	r2, [r3, #21]
 800e73e:	2301      	movs	r3, #1
 800e740:	e1c5      	b.n	800eace <f_lseek+0x440>
					} while (cl == pcl + 1);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	3301      	adds	r3, #1
 800e746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e748:	429a      	cmp	r2, r3
 800e74a:	d0de      	beq.n	800e70a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e74c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	429a      	cmp	r2, r3
 800e752:	d809      	bhi.n	800e768 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e756:	1d1a      	adds	r2, r3, #4
 800e758:	627a      	str	r2, [r7, #36]	; 0x24
 800e75a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e75c:	601a      	str	r2, [r3, #0]
 800e75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e760:	1d1a      	adds	r2, r3, #4
 800e762:	627a      	str	r2, [r7, #36]	; 0x24
 800e764:	693a      	ldr	r2, [r7, #16]
 800e766:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	69db      	ldr	r3, [r3, #28]
 800e76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e76e:	429a      	cmp	r2, r3
 800e770:	d3c4      	bcc.n	800e6fc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e778:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e77a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	429a      	cmp	r2, r3
 800e780:	d803      	bhi.n	800e78a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e784:	2200      	movs	r2, #0
 800e786:	601a      	str	r2, [r3, #0]
 800e788:	e19f      	b.n	800eaca <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e78a:	2311      	movs	r3, #17
 800e78c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e790:	e19b      	b.n	800eaca <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	683a      	ldr	r2, [r7, #0]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d902      	bls.n	800e7a2 <f_lseek+0x114>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	683a      	ldr	r2, [r7, #0]
 800e7a6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	f000 818d 	beq.w	800eaca <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	3b01      	subs	r3, #1
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7fd fcf2 	bl	800c1a0 <clmt_clust>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e7c2:	68ba      	ldr	r2, [r7, #8]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	69db      	ldr	r3, [r3, #28]
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	4610      	mov	r0, r2
 800e7cc:	f7fd f9dc 	bl	800bb88 <clust2sect>
 800e7d0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e7d2:	69bb      	ldr	r3, [r7, #24]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d104      	bne.n	800e7e2 <f_lseek+0x154>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2202      	movs	r2, #2
 800e7dc:	755a      	strb	r2, [r3, #21]
 800e7de:	2302      	movs	r3, #2
 800e7e0:	e175      	b.n	800eace <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	68ba      	ldr	r2, [r7, #8]
 800e7e8:	8992      	ldrh	r2, [r2, #12]
 800e7ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7ee:	68ba      	ldr	r2, [r7, #8]
 800e7f0:	8952      	ldrh	r2, [r2, #10]
 800e7f2:	3a01      	subs	r2, #1
 800e7f4:	4013      	ands	r3, r2
 800e7f6:	69ba      	ldr	r2, [r7, #24]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	699b      	ldr	r3, [r3, #24]
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	8992      	ldrh	r2, [r2, #12]
 800e804:	fbb3 f1f2 	udiv	r1, r3, r2
 800e808:	fb01 f202 	mul.w	r2, r1, r2
 800e80c:	1a9b      	subs	r3, r3, r2
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f000 815b 	beq.w	800eaca <f_lseek+0x43c>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6a1b      	ldr	r3, [r3, #32]
 800e818:	69ba      	ldr	r2, [r7, #24]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	f000 8155 	beq.w	800eaca <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	7d1b      	ldrb	r3, [r3, #20]
 800e824:	b25b      	sxtb	r3, r3
 800e826:	2b00      	cmp	r3, #0
 800e828:	da18      	bge.n	800e85c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	7858      	ldrb	r0, [r3, #1]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6a1a      	ldr	r2, [r3, #32]
 800e838:	2301      	movs	r3, #1
 800e83a:	f7fc fe19 	bl	800b470 <disk_write>
 800e83e:	4603      	mov	r3, r0
 800e840:	2b00      	cmp	r3, #0
 800e842:	d004      	beq.n	800e84e <f_lseek+0x1c0>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2201      	movs	r2, #1
 800e848:	755a      	strb	r2, [r3, #21]
 800e84a:	2301      	movs	r3, #1
 800e84c:	e13f      	b.n	800eace <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	7d1b      	ldrb	r3, [r3, #20]
 800e852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e856:	b2da      	uxtb	r2, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	7858      	ldrb	r0, [r3, #1]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e866:	2301      	movs	r3, #1
 800e868:	69ba      	ldr	r2, [r7, #24]
 800e86a:	f7fc fde1 	bl	800b430 <disk_read>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d004      	beq.n	800e87e <f_lseek+0x1f0>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2201      	movs	r2, #1
 800e878:	755a      	strb	r2, [r3, #21]
 800e87a:	2301      	movs	r3, #1
 800e87c:	e127      	b.n	800eace <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	69ba      	ldr	r2, [r7, #24]
 800e882:	621a      	str	r2, [r3, #32]
 800e884:	e121      	b.n	800eaca <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	68db      	ldr	r3, [r3, #12]
 800e88a:	683a      	ldr	r2, [r7, #0]
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d908      	bls.n	800e8a2 <f_lseek+0x214>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	7d1b      	ldrb	r3, [r3, #20]
 800e894:	f003 0302 	and.w	r3, r3, #2
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d102      	bne.n	800e8a2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	699b      	ldr	r3, [r3, #24]
 800e8a6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	637b      	str	r3, [r7, #52]	; 0x34
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8b0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	f000 80b5 	beq.w	800ea24 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	895b      	ldrh	r3, [r3, #10]
 800e8be:	461a      	mov	r2, r3
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	899b      	ldrh	r3, [r3, #12]
 800e8c4:	fb02 f303 	mul.w	r3, r2, r3
 800e8c8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e8ca:	6a3b      	ldr	r3, [r7, #32]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d01b      	beq.n	800e908 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	1e5a      	subs	r2, r3, #1
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	fbb2 f2f3 	udiv	r2, r2, r3
 800e8da:	6a3b      	ldr	r3, [r7, #32]
 800e8dc:	1e59      	subs	r1, r3, #1
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d30f      	bcc.n	800e908 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e8e8:	6a3b      	ldr	r3, [r7, #32]
 800e8ea:	1e5a      	subs	r2, r3, #1
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	425b      	negs	r3, r3
 800e8f0:	401a      	ands	r2, r3
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	699b      	ldr	r3, [r3, #24]
 800e8fa:	683a      	ldr	r2, [r7, #0]
 800e8fc:	1ad3      	subs	r3, r2, r3
 800e8fe:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	69db      	ldr	r3, [r3, #28]
 800e904:	63bb      	str	r3, [r7, #56]	; 0x38
 800e906:	e022      	b.n	800e94e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	689b      	ldr	r3, [r3, #8]
 800e90c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e910:	2b00      	cmp	r3, #0
 800e912:	d119      	bne.n	800e948 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2100      	movs	r1, #0
 800e918:	4618      	mov	r0, r3
 800e91a:	f7fd fba9 	bl	800c070 <create_chain>
 800e91e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e922:	2b01      	cmp	r3, #1
 800e924:	d104      	bne.n	800e930 <f_lseek+0x2a2>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2202      	movs	r2, #2
 800e92a:	755a      	strb	r2, [r3, #21]
 800e92c:	2302      	movs	r3, #2
 800e92e:	e0ce      	b.n	800eace <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e936:	d104      	bne.n	800e942 <f_lseek+0x2b4>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2201      	movs	r2, #1
 800e93c:	755a      	strb	r2, [r3, #21]
 800e93e:	2301      	movs	r3, #1
 800e940:	e0c5      	b.n	800eace <f_lseek+0x440>
					fp->obj.sclust = clst;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e946:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e94c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e950:	2b00      	cmp	r3, #0
 800e952:	d067      	beq.n	800ea24 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800e954:	e03a      	b.n	800e9cc <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800e956:	683a      	ldr	r2, [r7, #0]
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	1ad3      	subs	r3, r2, r3
 800e95c:	603b      	str	r3, [r7, #0]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	699a      	ldr	r2, [r3, #24]
 800e962:	69fb      	ldr	r3, [r7, #28]
 800e964:	441a      	add	r2, r3
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	7d1b      	ldrb	r3, [r3, #20]
 800e96e:	f003 0302 	and.w	r3, r3, #2
 800e972:	2b00      	cmp	r3, #0
 800e974:	d00b      	beq.n	800e98e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7fd fb78 	bl	800c070 <create_chain>
 800e980:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e984:	2b00      	cmp	r3, #0
 800e986:	d108      	bne.n	800e99a <f_lseek+0x30c>
							ofs = 0; break;
 800e988:	2300      	movs	r3, #0
 800e98a:	603b      	str	r3, [r7, #0]
 800e98c:	e022      	b.n	800e9d4 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e992:	4618      	mov	r0, r3
 800e994:	f7fd f917 	bl	800bbc6 <get_fat>
 800e998:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9a0:	d104      	bne.n	800e9ac <f_lseek+0x31e>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	755a      	strb	r2, [r3, #21]
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e090      	b.n	800eace <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d904      	bls.n	800e9bc <f_lseek+0x32e>
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	69db      	ldr	r3, [r3, #28]
 800e9b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d304      	bcc.n	800e9c6 <f_lseek+0x338>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2202      	movs	r2, #2
 800e9c0:	755a      	strb	r2, [r3, #21]
 800e9c2:	2302      	movs	r3, #2
 800e9c4:	e083      	b.n	800eace <f_lseek+0x440>
					fp->clust = clst;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9ca:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e9cc:	683a      	ldr	r2, [r7, #0]
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d8c0      	bhi.n	800e956 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	699a      	ldr	r2, [r3, #24]
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	441a      	add	r2, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	899b      	ldrh	r3, [r3, #12]
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e9ec:	fb01 f202 	mul.w	r2, r1, r2
 800e9f0:	1a9b      	subs	r3, r3, r2
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d016      	beq.n	800ea24 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fd f8c4 	bl	800bb88 <clust2sect>
 800ea00:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ea02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d104      	bne.n	800ea12 <f_lseek+0x384>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2202      	movs	r2, #2
 800ea0c:	755a      	strb	r2, [r3, #21]
 800ea0e:	2302      	movs	r3, #2
 800ea10:	e05d      	b.n	800eace <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	899b      	ldrh	r3, [r3, #12]
 800ea16:	461a      	mov	r2, r3
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea20:	4413      	add	r3, r2
 800ea22:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	699a      	ldr	r2, [r3, #24]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	68db      	ldr	r3, [r3, #12]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d90a      	bls.n	800ea46 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	699a      	ldr	r2, [r3, #24]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	7d1b      	ldrb	r3, [r3, #20]
 800ea3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea40:	b2da      	uxtb	r2, r3
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	699b      	ldr	r3, [r3, #24]
 800ea4a:	68ba      	ldr	r2, [r7, #8]
 800ea4c:	8992      	ldrh	r2, [r2, #12]
 800ea4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea52:	fb01 f202 	mul.w	r2, r1, r2
 800ea56:	1a9b      	subs	r3, r3, r2
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d036      	beq.n	800eaca <f_lseek+0x43c>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6a1b      	ldr	r3, [r3, #32]
 800ea60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d031      	beq.n	800eaca <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	7d1b      	ldrb	r3, [r3, #20]
 800ea6a:	b25b      	sxtb	r3, r3
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	da18      	bge.n	800eaa2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	7858      	ldrb	r0, [r3, #1]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6a1a      	ldr	r2, [r3, #32]
 800ea7e:	2301      	movs	r3, #1
 800ea80:	f7fc fcf6 	bl	800b470 <disk_write>
 800ea84:	4603      	mov	r3, r0
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d004      	beq.n	800ea94 <f_lseek+0x406>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	755a      	strb	r2, [r3, #21]
 800ea90:	2301      	movs	r3, #1
 800ea92:	e01c      	b.n	800eace <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	7d1b      	ldrb	r3, [r3, #20]
 800ea98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea9c:	b2da      	uxtb	r2, r3
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	7858      	ldrb	r0, [r3, #1]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eaac:	2301      	movs	r3, #1
 800eaae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eab0:	f7fc fcbe 	bl	800b430 <disk_read>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d004      	beq.n	800eac4 <f_lseek+0x436>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2201      	movs	r2, #1
 800eabe:	755a      	strb	r2, [r3, #21]
 800eac0:	2301      	movs	r3, #1
 800eac2:	e004      	b.n	800eace <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eac8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800eaca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3740      	adds	r7, #64	; 0x40
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}

0800ead6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ead6:	b580      	push	{r7, lr}
 800ead8:	b086      	sub	sp, #24
 800eada:	af00      	add	r7, sp, #0
 800eadc:	6078      	str	r0, [r7, #4]
 800eade:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d101      	bne.n	800eaea <f_opendir+0x14>
 800eae6:	2309      	movs	r3, #9
 800eae8:	e064      	b.n	800ebb4 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800eaee:	f107 010c 	add.w	r1, r7, #12
 800eaf2:	463b      	mov	r3, r7
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7fe fd60 	bl	800d5bc <find_volume>
 800eafc:	4603      	mov	r3, r0
 800eafe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb00:	7dfb      	ldrb	r3, [r7, #23]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d14f      	bne.n	800eba6 <f_opendir+0xd0>
		obj->fs = fs;
 800eb06:	68fa      	ldr	r2, [r7, #12]
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	4619      	mov	r1, r3
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7fe fc43 	bl	800d39c <follow_path>
 800eb16:	4603      	mov	r3, r0
 800eb18:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800eb1a:	7dfb      	ldrb	r3, [r7, #23]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d13d      	bne.n	800eb9c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb26:	b25b      	sxtb	r3, r3
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	db12      	blt.n	800eb52 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	799b      	ldrb	r3, [r3, #6]
 800eb30:	f003 0310 	and.w	r3, r3, #16
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00a      	beq.n	800eb4e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800eb38:	68fa      	ldr	r2, [r7, #12]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6a1b      	ldr	r3, [r3, #32]
 800eb3e:	4619      	mov	r1, r3
 800eb40:	4610      	mov	r0, r2
 800eb42:	f7fd fd0b 	bl	800c55c <ld_clust>
 800eb46:	4602      	mov	r2, r0
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	609a      	str	r2, [r3, #8]
 800eb4c:	e001      	b.n	800eb52 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800eb4e:	2305      	movs	r3, #5
 800eb50:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800eb52:	7dfb      	ldrb	r3, [r7, #23]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d121      	bne.n	800eb9c <f_opendir+0xc6>
				obj->id = fs->id;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	88da      	ldrh	r2, [r3, #6]
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800eb60:	2100      	movs	r1, #0
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f7fd fb54 	bl	800c210 <dir_sdi>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800eb6c:	7dfb      	ldrb	r3, [r7, #23]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d114      	bne.n	800eb9c <f_opendir+0xc6>
					if (obj->sclust) {
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00d      	beq.n	800eb96 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7fc fe33 	bl	800b7e8 <inc_lock>
 800eb82:	4602      	mov	r2, r0
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d105      	bne.n	800eb9c <f_opendir+0xc6>
 800eb90:	2312      	movs	r3, #18
 800eb92:	75fb      	strb	r3, [r7, #23]
 800eb94:	e002      	b.n	800eb9c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800eb9c:	7dfb      	ldrb	r3, [r7, #23]
 800eb9e:	2b04      	cmp	r3, #4
 800eba0:	d101      	bne.n	800eba6 <f_opendir+0xd0>
 800eba2:	2305      	movs	r3, #5
 800eba4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800eba6:	7dfb      	ldrb	r3, [r7, #23]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d002      	beq.n	800ebb2 <f_opendir+0xdc>
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ebb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3718      	adds	r7, #24
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f107 0208 	add.w	r2, r7, #8
 800ebca:	4611      	mov	r1, r2
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7fe ff7b 	bl	800dac8 <validate>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d110      	bne.n	800ebfe <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	691b      	ldr	r3, [r3, #16]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d006      	beq.n	800ebf2 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	691b      	ldr	r3, [r3, #16]
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7fc fe8b 	bl	800b904 <dec_lock>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800ebf2:	7bfb      	ldrb	r3, [r7, #15]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d102      	bne.n	800ebfe <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800ebfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3710      	adds	r7, #16
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f107 0208 	add.w	r2, r7, #8
 800ec18:	4611      	mov	r1, r2
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7fe ff54 	bl	800dac8 <validate>
 800ec20:	4603      	mov	r3, r0
 800ec22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ec24:	7bfb      	ldrb	r3, [r7, #15]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d126      	bne.n	800ec78 <f_readdir+0x70>
		if (!fno) {
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d106      	bne.n	800ec3e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ec30:	2100      	movs	r1, #0
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7fd faec 	bl	800c210 <dir_sdi>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	73fb      	strb	r3, [r7, #15]
 800ec3c:	e01c      	b.n	800ec78 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800ec3e:	2100      	movs	r1, #0
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f7fd feb6 	bl	800c9b2 <dir_read>
 800ec46:	4603      	mov	r3, r0
 800ec48:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ec4a:	7bfb      	ldrb	r3, [r7, #15]
 800ec4c:	2b04      	cmp	r3, #4
 800ec4e:	d101      	bne.n	800ec54 <f_readdir+0x4c>
 800ec50:	2300      	movs	r3, #0
 800ec52:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ec54:	7bfb      	ldrb	r3, [r7, #15]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d10e      	bne.n	800ec78 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ec5a:	6839      	ldr	r1, [r7, #0]
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7fe f907 	bl	800ce70 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ec62:	2100      	movs	r1, #0
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f7fd fb5c 	bl	800c322 <dir_next>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ec6e:	7bfb      	ldrb	r3, [r7, #15]
 800ec70:	2b04      	cmp	r3, #4
 800ec72:	d101      	bne.n	800ec78 <f_readdir+0x70>
 800ec74:	2300      	movs	r3, #0
 800ec76:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ec78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b092      	sub	sp, #72	; 0x48
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	60f8      	str	r0, [r7, #12]
 800ec8a:	60b9      	str	r1, [r7, #8]
 800ec8c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800ec8e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ec92:	f107 030c 	add.w	r3, r7, #12
 800ec96:	2200      	movs	r2, #0
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7fe fc8f 	bl	800d5bc <find_volume>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800eca4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	f040 8099 	bne.w	800ede0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800ecae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800ecb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb6:	699a      	ldr	r2, [r3, #24]
 800ecb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecba:	69db      	ldr	r3, [r3, #28]
 800ecbc:	3b02      	subs	r3, #2
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d804      	bhi.n	800eccc <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800ecc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc4:	699a      	ldr	r2, [r3, #24]
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	601a      	str	r2, [r3, #0]
 800ecca:	e089      	b.n	800ede0 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800eccc:	2300      	movs	r3, #0
 800ecce:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ecd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d128      	bne.n	800ed2a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ecd8:	2302      	movs	r3, #2
 800ecda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecde:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ece0:	f107 0314 	add.w	r3, r7, #20
 800ece4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fc ff6d 	bl	800bbc6 <get_fat>
 800ecec:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ecee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecf4:	d103      	bne.n	800ecfe <f_getfree+0x7c>
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ecfc:	e063      	b.n	800edc6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ecfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d103      	bne.n	800ed0c <f_getfree+0x8a>
 800ed04:	2302      	movs	r3, #2
 800ed06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ed0a:	e05c      	b.n	800edc6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ed0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d102      	bne.n	800ed18 <f_getfree+0x96>
 800ed12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed14:	3301      	adds	r3, #1
 800ed16:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800ed18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed20:	69db      	ldr	r3, [r3, #28]
 800ed22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d3db      	bcc.n	800ece0 <f_getfree+0x5e>
 800ed28:	e04d      	b.n	800edc6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ed2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2c:	69db      	ldr	r3, [r3, #28]
 800ed2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed34:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800ed36:	2300      	movs	r3, #0
 800ed38:	637b      	str	r3, [r7, #52]	; 0x34
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800ed3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d113      	bne.n	800ed6c <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ed44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed48:	1c5a      	adds	r2, r3, #1
 800ed4a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	f7fc fe7d 	bl	800ba4c <move_window>
 800ed52:	4603      	mov	r3, r0
 800ed54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800ed58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d131      	bne.n	800edc4 <f_getfree+0x142>
							p = fs->win;
 800ed60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed62:	3338      	adds	r3, #56	; 0x38
 800ed64:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800ed66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed68:	899b      	ldrh	r3, [r3, #12]
 800ed6a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ed6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	2b02      	cmp	r3, #2
 800ed72:	d10f      	bne.n	800ed94 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ed74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed76:	f7fc fbb9 	bl	800b4ec <ld_word>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d102      	bne.n	800ed86 <f_getfree+0x104>
 800ed80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed82:	3301      	adds	r3, #1
 800ed84:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	3302      	adds	r3, #2
 800ed8a:	633b      	str	r3, [r7, #48]	; 0x30
 800ed8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed8e:	3b02      	subs	r3, #2
 800ed90:	637b      	str	r3, [r7, #52]	; 0x34
 800ed92:	e010      	b.n	800edb6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ed94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed96:	f7fc fbc1 	bl	800b51c <ld_dword>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d102      	bne.n	800edaa <f_getfree+0x128>
 800eda4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eda6:	3301      	adds	r3, #1
 800eda8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800edaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edac:	3304      	adds	r3, #4
 800edae:	633b      	str	r3, [r7, #48]	; 0x30
 800edb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edb2:	3b04      	subs	r3, #4
 800edb4:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800edb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edb8:	3b01      	subs	r3, #1
 800edba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1bd      	bne.n	800ed3e <f_getfree+0xbc>
 800edc2:	e000      	b.n	800edc6 <f_getfree+0x144>
							if (res != FR_OK) break;
 800edc4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800edca:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800edcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800edd0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800edd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd4:	791a      	ldrb	r2, [r3, #4]
 800edd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd8:	f042 0201 	orr.w	r2, r2, #1
 800eddc:	b2d2      	uxtb	r2, r2
 800edde:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ede0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3748      	adds	r7, #72	; 0x48
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800edec:	b480      	push	{r7}
 800edee:	b087      	sub	sp, #28
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	4613      	mov	r3, r2
 800edf8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800edfa:	2301      	movs	r3, #1
 800edfc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800edfe:	2300      	movs	r3, #0
 800ee00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ee02:	4b1f      	ldr	r3, [pc, #124]	; (800ee80 <FATFS_LinkDriverEx+0x94>)
 800ee04:	7a5b      	ldrb	r3, [r3, #9]
 800ee06:	b2db      	uxtb	r3, r3
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d131      	bne.n	800ee70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ee0c:	4b1c      	ldr	r3, [pc, #112]	; (800ee80 <FATFS_LinkDriverEx+0x94>)
 800ee0e:	7a5b      	ldrb	r3, [r3, #9]
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	461a      	mov	r2, r3
 800ee14:	4b1a      	ldr	r3, [pc, #104]	; (800ee80 <FATFS_LinkDriverEx+0x94>)
 800ee16:	2100      	movs	r1, #0
 800ee18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ee1a:	4b19      	ldr	r3, [pc, #100]	; (800ee80 <FATFS_LinkDriverEx+0x94>)
 800ee1c:	7a5b      	ldrb	r3, [r3, #9]
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	4a17      	ldr	r2, [pc, #92]	; (800ee80 <FATFS_LinkDriverEx+0x94>)
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	4413      	add	r3, r2
 800ee26:	68fa      	ldr	r2, [r7, #12]
 800ee28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ee2a:	4b15      	ldr	r3, [pc, #84]	; (800ee80 <FATFS_LinkDriverEx+0x94>)
 800ee2c:	7a5b      	ldrb	r3, [r3, #9]
 800ee2e:	b2db      	uxtb	r3, r3
 800ee30:	461a      	mov	r2, r3
 800ee32:	4b13      	ldr	r3, [pc, #76]	; (800ee80 <FATFS_LinkDriverEx+0x94>)
 800ee34:	4413      	add	r3, r2
 800ee36:	79fa      	ldrb	r2, [r7, #7]
 800ee38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ee3a:	4b11      	ldr	r3, [pc, #68]	; (800ee80 <FATFS_LinkDriverEx+0x94>)
 800ee3c:	7a5b      	ldrb	r3, [r3, #9]
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	1c5a      	adds	r2, r3, #1
 800ee42:	b2d1      	uxtb	r1, r2
 800ee44:	4a0e      	ldr	r2, [pc, #56]	; (800ee80 <FATFS_LinkDriverEx+0x94>)
 800ee46:	7251      	strb	r1, [r2, #9]
 800ee48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ee4a:	7dbb      	ldrb	r3, [r7, #22]
 800ee4c:	3330      	adds	r3, #48	; 0x30
 800ee4e:	b2da      	uxtb	r2, r3
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	3301      	adds	r3, #1
 800ee58:	223a      	movs	r2, #58	; 0x3a
 800ee5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	3302      	adds	r3, #2
 800ee60:	222f      	movs	r2, #47	; 0x2f
 800ee62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	3303      	adds	r3, #3
 800ee68:	2200      	movs	r2, #0
 800ee6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ee70:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	371c      	adds	r7, #28
 800ee76:	46bd      	mov	sp, r7
 800ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7c:	4770      	bx	lr
 800ee7e:	bf00      	nop
 800ee80:	20003b38 	.word	0x20003b38

0800ee84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ee8e:	2200      	movs	r2, #0
 800ee90:	6839      	ldr	r1, [r7, #0]
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f7ff ffaa 	bl	800edec <FATFS_LinkDriverEx>
 800ee98:	4603      	mov	r3, r0
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3708      	adds	r7, #8
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
	...

0800eea4 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b085      	sub	sp, #20
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	460b      	mov	r3, r1
 800eeae:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800eeb8:	4b15      	ldr	r3, [pc, #84]	; (800ef10 <FATFS_UnLinkDriverEx+0x6c>)
 800eeba:	7a5b      	ldrb	r3, [r3, #9]
 800eebc:	b2db      	uxtb	r3, r3
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d01e      	beq.n	800ef00 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	3b30      	subs	r3, #48	; 0x30
 800eec8:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800eeca:	7bbb      	ldrb	r3, [r7, #14]
 800eecc:	4a10      	ldr	r2, [pc, #64]	; (800ef10 <FATFS_UnLinkDriverEx+0x6c>)
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	4413      	add	r3, r2
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d013      	beq.n	800ef00 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800eed8:	7bbb      	ldrb	r3, [r7, #14]
 800eeda:	4a0d      	ldr	r2, [pc, #52]	; (800ef10 <FATFS_UnLinkDriverEx+0x6c>)
 800eedc:	009b      	lsls	r3, r3, #2
 800eede:	4413      	add	r3, r2
 800eee0:	2200      	movs	r2, #0
 800eee2:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800eee4:	7bbb      	ldrb	r3, [r7, #14]
 800eee6:	4a0a      	ldr	r2, [pc, #40]	; (800ef10 <FATFS_UnLinkDriverEx+0x6c>)
 800eee8:	4413      	add	r3, r2
 800eeea:	2200      	movs	r2, #0
 800eeec:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800eeee:	4b08      	ldr	r3, [pc, #32]	; (800ef10 <FATFS_UnLinkDriverEx+0x6c>)
 800eef0:	7a5b      	ldrb	r3, [r3, #9]
 800eef2:	b2db      	uxtb	r3, r3
 800eef4:	3b01      	subs	r3, #1
 800eef6:	b2da      	uxtb	r2, r3
 800eef8:	4b05      	ldr	r3, [pc, #20]	; (800ef10 <FATFS_UnLinkDriverEx+0x6c>)
 800eefa:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800eefc:	2300      	movs	r3, #0
 800eefe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ef00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3714      	adds	r7, #20
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr
 800ef0e:	bf00      	nop
 800ef10:	20003b38 	.word	0x20003b38

0800ef14 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800ef1c:	2100      	movs	r1, #0
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f7ff ffc0 	bl	800eea4 <FATFS_UnLinkDriverEx>
 800ef24:	4603      	mov	r3, r0
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3708      	adds	r7, #8
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
	...

0800ef30 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ef30:	b480      	push	{r7}
 800ef32:	b085      	sub	sp, #20
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	4603      	mov	r3, r0
 800ef38:	6039      	str	r1, [r7, #0]
 800ef3a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ef3c:	88fb      	ldrh	r3, [r7, #6]
 800ef3e:	2b7f      	cmp	r3, #127	; 0x7f
 800ef40:	d802      	bhi.n	800ef48 <ff_convert+0x18>
		c = chr;
 800ef42:	88fb      	ldrh	r3, [r7, #6]
 800ef44:	81fb      	strh	r3, [r7, #14]
 800ef46:	e025      	b.n	800ef94 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d00b      	beq.n	800ef66 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ef4e:	88fb      	ldrh	r3, [r7, #6]
 800ef50:	2bff      	cmp	r3, #255	; 0xff
 800ef52:	d805      	bhi.n	800ef60 <ff_convert+0x30>
 800ef54:	88fb      	ldrh	r3, [r7, #6]
 800ef56:	3b80      	subs	r3, #128	; 0x80
 800ef58:	4a12      	ldr	r2, [pc, #72]	; (800efa4 <ff_convert+0x74>)
 800ef5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef5e:	e000      	b.n	800ef62 <ff_convert+0x32>
 800ef60:	2300      	movs	r3, #0
 800ef62:	81fb      	strh	r3, [r7, #14]
 800ef64:	e016      	b.n	800ef94 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ef66:	2300      	movs	r3, #0
 800ef68:	81fb      	strh	r3, [r7, #14]
 800ef6a:	e009      	b.n	800ef80 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ef6c:	89fb      	ldrh	r3, [r7, #14]
 800ef6e:	4a0d      	ldr	r2, [pc, #52]	; (800efa4 <ff_convert+0x74>)
 800ef70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef74:	88fa      	ldrh	r2, [r7, #6]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d006      	beq.n	800ef88 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ef7a:	89fb      	ldrh	r3, [r7, #14]
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	81fb      	strh	r3, [r7, #14]
 800ef80:	89fb      	ldrh	r3, [r7, #14]
 800ef82:	2b7f      	cmp	r3, #127	; 0x7f
 800ef84:	d9f2      	bls.n	800ef6c <ff_convert+0x3c>
 800ef86:	e000      	b.n	800ef8a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ef88:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ef8a:	89fb      	ldrh	r3, [r7, #14]
 800ef8c:	3380      	adds	r3, #128	; 0x80
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	b2db      	uxtb	r3, r3
 800ef92:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ef94:	89fb      	ldrh	r3, [r7, #14]
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3714      	adds	r7, #20
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	08010290 	.word	0x08010290

0800efa8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b087      	sub	sp, #28
 800efac:	af00      	add	r7, sp, #0
 800efae:	4603      	mov	r3, r0
 800efb0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800efb2:	88fb      	ldrh	r3, [r7, #6]
 800efb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efb8:	d201      	bcs.n	800efbe <ff_wtoupper+0x16>
 800efba:	4b3e      	ldr	r3, [pc, #248]	; (800f0b4 <ff_wtoupper+0x10c>)
 800efbc:	e000      	b.n	800efc0 <ff_wtoupper+0x18>
 800efbe:	4b3e      	ldr	r3, [pc, #248]	; (800f0b8 <ff_wtoupper+0x110>)
 800efc0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	1c9a      	adds	r2, r3, #2
 800efc6:	617a      	str	r2, [r7, #20]
 800efc8:	881b      	ldrh	r3, [r3, #0]
 800efca:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800efcc:	8a7b      	ldrh	r3, [r7, #18]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d068      	beq.n	800f0a4 <ff_wtoupper+0xfc>
 800efd2:	88fa      	ldrh	r2, [r7, #6]
 800efd4:	8a7b      	ldrh	r3, [r7, #18]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d364      	bcc.n	800f0a4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	1c9a      	adds	r2, r3, #2
 800efde:	617a      	str	r2, [r7, #20]
 800efe0:	881b      	ldrh	r3, [r3, #0]
 800efe2:	823b      	strh	r3, [r7, #16]
 800efe4:	8a3b      	ldrh	r3, [r7, #16]
 800efe6:	0a1b      	lsrs	r3, r3, #8
 800efe8:	81fb      	strh	r3, [r7, #14]
 800efea:	8a3b      	ldrh	r3, [r7, #16]
 800efec:	b2db      	uxtb	r3, r3
 800efee:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800eff0:	88fa      	ldrh	r2, [r7, #6]
 800eff2:	8a79      	ldrh	r1, [r7, #18]
 800eff4:	8a3b      	ldrh	r3, [r7, #16]
 800eff6:	440b      	add	r3, r1
 800eff8:	429a      	cmp	r2, r3
 800effa:	da49      	bge.n	800f090 <ff_wtoupper+0xe8>
			switch (cmd) {
 800effc:	89fb      	ldrh	r3, [r7, #14]
 800effe:	2b08      	cmp	r3, #8
 800f000:	d84f      	bhi.n	800f0a2 <ff_wtoupper+0xfa>
 800f002:	a201      	add	r2, pc, #4	; (adr r2, 800f008 <ff_wtoupper+0x60>)
 800f004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f008:	0800f02d 	.word	0x0800f02d
 800f00c:	0800f03f 	.word	0x0800f03f
 800f010:	0800f055 	.word	0x0800f055
 800f014:	0800f05d 	.word	0x0800f05d
 800f018:	0800f065 	.word	0x0800f065
 800f01c:	0800f06d 	.word	0x0800f06d
 800f020:	0800f075 	.word	0x0800f075
 800f024:	0800f07d 	.word	0x0800f07d
 800f028:	0800f085 	.word	0x0800f085
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f02c:	88fa      	ldrh	r2, [r7, #6]
 800f02e:	8a7b      	ldrh	r3, [r7, #18]
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	005b      	lsls	r3, r3, #1
 800f034:	697a      	ldr	r2, [r7, #20]
 800f036:	4413      	add	r3, r2
 800f038:	881b      	ldrh	r3, [r3, #0]
 800f03a:	80fb      	strh	r3, [r7, #6]
 800f03c:	e027      	b.n	800f08e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f03e:	88fa      	ldrh	r2, [r7, #6]
 800f040:	8a7b      	ldrh	r3, [r7, #18]
 800f042:	1ad3      	subs	r3, r2, r3
 800f044:	b29b      	uxth	r3, r3
 800f046:	f003 0301 	and.w	r3, r3, #1
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	88fa      	ldrh	r2, [r7, #6]
 800f04e:	1ad3      	subs	r3, r2, r3
 800f050:	80fb      	strh	r3, [r7, #6]
 800f052:	e01c      	b.n	800f08e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f054:	88fb      	ldrh	r3, [r7, #6]
 800f056:	3b10      	subs	r3, #16
 800f058:	80fb      	strh	r3, [r7, #6]
 800f05a:	e018      	b.n	800f08e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f05c:	88fb      	ldrh	r3, [r7, #6]
 800f05e:	3b20      	subs	r3, #32
 800f060:	80fb      	strh	r3, [r7, #6]
 800f062:	e014      	b.n	800f08e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f064:	88fb      	ldrh	r3, [r7, #6]
 800f066:	3b30      	subs	r3, #48	; 0x30
 800f068:	80fb      	strh	r3, [r7, #6]
 800f06a:	e010      	b.n	800f08e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f06c:	88fb      	ldrh	r3, [r7, #6]
 800f06e:	3b1a      	subs	r3, #26
 800f070:	80fb      	strh	r3, [r7, #6]
 800f072:	e00c      	b.n	800f08e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f074:	88fb      	ldrh	r3, [r7, #6]
 800f076:	3308      	adds	r3, #8
 800f078:	80fb      	strh	r3, [r7, #6]
 800f07a:	e008      	b.n	800f08e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f07c:	88fb      	ldrh	r3, [r7, #6]
 800f07e:	3b50      	subs	r3, #80	; 0x50
 800f080:	80fb      	strh	r3, [r7, #6]
 800f082:	e004      	b.n	800f08e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f084:	88fb      	ldrh	r3, [r7, #6]
 800f086:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f08a:	80fb      	strh	r3, [r7, #6]
 800f08c:	bf00      	nop
			}
			break;
 800f08e:	e008      	b.n	800f0a2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f090:	89fb      	ldrh	r3, [r7, #14]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d195      	bne.n	800efc2 <ff_wtoupper+0x1a>
 800f096:	8a3b      	ldrh	r3, [r7, #16]
 800f098:	005b      	lsls	r3, r3, #1
 800f09a:	697a      	ldr	r2, [r7, #20]
 800f09c:	4413      	add	r3, r2
 800f09e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f0a0:	e78f      	b.n	800efc2 <ff_wtoupper+0x1a>
			break;
 800f0a2:	bf00      	nop
	}

	return chr;
 800f0a4:	88fb      	ldrh	r3, [r7, #6]
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	371c      	adds	r7, #28
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b0:	4770      	bx	lr
 800f0b2:	bf00      	nop
 800f0b4:	08010390 	.word	0x08010390
 800f0b8:	08010584 	.word	0x08010584

0800f0bc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f0c0:	2201      	movs	r2, #1
 800f0c2:	490e      	ldr	r1, [pc, #56]	; (800f0fc <MX_USB_HOST_Init+0x40>)
 800f0c4:	480e      	ldr	r0, [pc, #56]	; (800f100 <MX_USB_HOST_Init+0x44>)
 800f0c6:	f7fa fd21 	bl	8009b0c <USBH_Init>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d001      	beq.n	800f0d4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f0d0:	f7f2 f970 	bl	80013b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f0d4:	490b      	ldr	r1, [pc, #44]	; (800f104 <MX_USB_HOST_Init+0x48>)
 800f0d6:	480a      	ldr	r0, [pc, #40]	; (800f100 <MX_USB_HOST_Init+0x44>)
 800f0d8:	f7fa fda6 	bl	8009c28 <USBH_RegisterClass>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d001      	beq.n	800f0e6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f0e2:	f7f2 f967 	bl	80013b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f0e6:	4806      	ldr	r0, [pc, #24]	; (800f100 <MX_USB_HOST_Init+0x44>)
 800f0e8:	f7fa fe2a 	bl	8009d40 <USBH_Start>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d001      	beq.n	800f0f6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f0f2:	f7f2 f95f 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f0f6:	bf00      	nop
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	0800f11d 	.word	0x0800f11d
 800f100:	20003b44 	.word	0x20003b44
 800f104:	20000020 	.word	0x20000020

0800f108 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f10c:	4802      	ldr	r0, [pc, #8]	; (800f118 <MX_USB_HOST_Process+0x10>)
 800f10e:	f7fa fe27 	bl	8009d60 <USBH_Process>
}
 800f112:	bf00      	nop
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	20003b44 	.word	0x20003b44

0800f11c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b083      	sub	sp, #12
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	460b      	mov	r3, r1
 800f126:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f128:	78fb      	ldrb	r3, [r7, #3]
 800f12a:	3b01      	subs	r3, #1
 800f12c:	2b04      	cmp	r3, #4
 800f12e:	d819      	bhi.n	800f164 <USBH_UserProcess+0x48>
 800f130:	a201      	add	r2, pc, #4	; (adr r2, 800f138 <USBH_UserProcess+0x1c>)
 800f132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f136:	bf00      	nop
 800f138:	0800f165 	.word	0x0800f165
 800f13c:	0800f155 	.word	0x0800f155
 800f140:	0800f165 	.word	0x0800f165
 800f144:	0800f15d 	.word	0x0800f15d
 800f148:	0800f14d 	.word	0x0800f14d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f14c:	4b09      	ldr	r3, [pc, #36]	; (800f174 <USBH_UserProcess+0x58>)
 800f14e:	2203      	movs	r2, #3
 800f150:	701a      	strb	r2, [r3, #0]
  break;
 800f152:	e008      	b.n	800f166 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f154:	4b07      	ldr	r3, [pc, #28]	; (800f174 <USBH_UserProcess+0x58>)
 800f156:	2202      	movs	r2, #2
 800f158:	701a      	strb	r2, [r3, #0]
  break;
 800f15a:	e004      	b.n	800f166 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f15c:	4b05      	ldr	r3, [pc, #20]	; (800f174 <USBH_UserProcess+0x58>)
 800f15e:	2201      	movs	r2, #1
 800f160:	701a      	strb	r2, [r3, #0]
  break;
 800f162:	e000      	b.n	800f166 <USBH_UserProcess+0x4a>

  default:
  break;
 800f164:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f166:	bf00      	nop
 800f168:	370c      	adds	r7, #12
 800f16a:	46bd      	mov	sp, r7
 800f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f170:	4770      	bx	lr
 800f172:	bf00      	nop
 800f174:	20003f1c 	.word	0x20003f1c

0800f178 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b08a      	sub	sp, #40	; 0x28
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f180:	f107 0314 	add.w	r3, r7, #20
 800f184:	2200      	movs	r2, #0
 800f186:	601a      	str	r2, [r3, #0]
 800f188:	605a      	str	r2, [r3, #4]
 800f18a:	609a      	str	r2, [r3, #8]
 800f18c:	60da      	str	r2, [r3, #12]
 800f18e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f198:	d147      	bne.n	800f22a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f19a:	2300      	movs	r3, #0
 800f19c:	613b      	str	r3, [r7, #16]
 800f19e:	4b25      	ldr	r3, [pc, #148]	; (800f234 <HAL_HCD_MspInit+0xbc>)
 800f1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1a2:	4a24      	ldr	r2, [pc, #144]	; (800f234 <HAL_HCD_MspInit+0xbc>)
 800f1a4:	f043 0301 	orr.w	r3, r3, #1
 800f1a8:	6313      	str	r3, [r2, #48]	; 0x30
 800f1aa:	4b22      	ldr	r3, [pc, #136]	; (800f234 <HAL_HCD_MspInit+0xbc>)
 800f1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ae:	f003 0301 	and.w	r3, r3, #1
 800f1b2:	613b      	str	r3, [r7, #16]
 800f1b4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800f1b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800f1c4:	f107 0314 	add.w	r3, r7, #20
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	481b      	ldr	r0, [pc, #108]	; (800f238 <HAL_HCD_MspInit+0xc0>)
 800f1cc:	f7f3 ff16 	bl	8002ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800f1d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f1d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1d6:	2302      	movs	r3, #2
 800f1d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f1e2:	230a      	movs	r3, #10
 800f1e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f1e6:	f107 0314 	add.w	r3, r7, #20
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	4812      	ldr	r0, [pc, #72]	; (800f238 <HAL_HCD_MspInit+0xc0>)
 800f1ee:	f7f3 ff05 	bl	8002ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f1f2:	4b10      	ldr	r3, [pc, #64]	; (800f234 <HAL_HCD_MspInit+0xbc>)
 800f1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1f6:	4a0f      	ldr	r2, [pc, #60]	; (800f234 <HAL_HCD_MspInit+0xbc>)
 800f1f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1fc:	6353      	str	r3, [r2, #52]	; 0x34
 800f1fe:	2300      	movs	r3, #0
 800f200:	60fb      	str	r3, [r7, #12]
 800f202:	4b0c      	ldr	r3, [pc, #48]	; (800f234 <HAL_HCD_MspInit+0xbc>)
 800f204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f206:	4a0b      	ldr	r2, [pc, #44]	; (800f234 <HAL_HCD_MspInit+0xbc>)
 800f208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f20c:	6453      	str	r3, [r2, #68]	; 0x44
 800f20e:	4b09      	ldr	r3, [pc, #36]	; (800f234 <HAL_HCD_MspInit+0xbc>)
 800f210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f216:	60fb      	str	r3, [r7, #12]
 800f218:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f21a:	2200      	movs	r2, #0
 800f21c:	2100      	movs	r1, #0
 800f21e:	2043      	movs	r0, #67	; 0x43
 800f220:	f7f3 fab3 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f224:	2043      	movs	r0, #67	; 0x43
 800f226:	f7f3 facc 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f22a:	bf00      	nop
 800f22c:	3728      	adds	r7, #40	; 0x28
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	40023800 	.word	0x40023800
 800f238:	40020000 	.word	0x40020000

0800f23c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fb f967 	bl	800a51e <USBH_LL_IncTimer>
}
 800f250:	bf00      	nop
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f266:	4618      	mov	r0, r3
 800f268:	f7fb f99f 	bl	800a5aa <USBH_LL_Connect>
}
 800f26c:	bf00      	nop
 800f26e:	3708      	adds	r7, #8
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f282:	4618      	mov	r0, r3
 800f284:	f7fb f9a8 	bl	800a5d8 <USBH_LL_Disconnect>
}
 800f288:	bf00      	nop
 800f28a:	3708      	adds	r7, #8
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	460b      	mov	r3, r1
 800f29a:	70fb      	strb	r3, [r7, #3]
 800f29c:	4613      	mov	r3, r2
 800f29e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f2a0:	bf00      	nop
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fb f959 	bl	800a572 <USBH_LL_PortEnabled>
}
 800f2c0:	bf00      	nop
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7fb f959 	bl	800a58e <USBH_LL_PortDisabled>
}
 800f2dc:	bf00      	nop
 800f2de:	3708      	adds	r7, #8
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d12a      	bne.n	800f34c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f2f6:	4a18      	ldr	r2, [pc, #96]	; (800f358 <USBH_LL_Init+0x74>)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4a15      	ldr	r2, [pc, #84]	; (800f358 <USBH_LL_Init+0x74>)
 800f302:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f306:	4b14      	ldr	r3, [pc, #80]	; (800f358 <USBH_LL_Init+0x74>)
 800f308:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f30c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f30e:	4b12      	ldr	r3, [pc, #72]	; (800f358 <USBH_LL_Init+0x74>)
 800f310:	2208      	movs	r2, #8
 800f312:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f314:	4b10      	ldr	r3, [pc, #64]	; (800f358 <USBH_LL_Init+0x74>)
 800f316:	2201      	movs	r2, #1
 800f318:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f31a:	4b0f      	ldr	r3, [pc, #60]	; (800f358 <USBH_LL_Init+0x74>)
 800f31c:	2200      	movs	r2, #0
 800f31e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f320:	4b0d      	ldr	r3, [pc, #52]	; (800f358 <USBH_LL_Init+0x74>)
 800f322:	2202      	movs	r2, #2
 800f324:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f326:	4b0c      	ldr	r3, [pc, #48]	; (800f358 <USBH_LL_Init+0x74>)
 800f328:	2200      	movs	r2, #0
 800f32a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f32c:	480a      	ldr	r0, [pc, #40]	; (800f358 <USBH_LL_Init+0x74>)
 800f32e:	f7f4 f81a 	bl	8003366 <HAL_HCD_Init>
 800f332:	4603      	mov	r3, r0
 800f334:	2b00      	cmp	r3, #0
 800f336:	d001      	beq.n	800f33c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f338:	f7f2 f83c 	bl	80013b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f33c:	4806      	ldr	r0, [pc, #24]	; (800f358 <USBH_LL_Init+0x74>)
 800f33e:	f7f4 fbfe 	bl	8003b3e <HAL_HCD_GetCurrentFrame>
 800f342:	4603      	mov	r3, r0
 800f344:	4619      	mov	r1, r3
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f7fb f8da 	bl	800a500 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f34c:	2300      	movs	r3, #0
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3708      	adds	r7, #8
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
 800f356:	bf00      	nop
 800f358:	20003f20 	.word	0x20003f20

0800f35c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b084      	sub	sp, #16
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f364:	2300      	movs	r3, #0
 800f366:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f368:	2300      	movs	r3, #0
 800f36a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f372:	4618      	mov	r0, r3
 800f374:	f7f4 fb6d 	bl	8003a52 <HAL_HCD_Start>
 800f378:	4603      	mov	r3, r0
 800f37a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f37c:	7bfb      	ldrb	r3, [r7, #15]
 800f37e:	4618      	mov	r0, r3
 800f380:	f000 f95c 	bl	800f63c <USBH_Get_USB_Status>
 800f384:	4603      	mov	r3, r0
 800f386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f388:	7bbb      	ldrb	r3, [r7, #14]
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3710      	adds	r7, #16
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}

0800f392 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f392:	b580      	push	{r7, lr}
 800f394:	b084      	sub	sp, #16
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f39a:	2300      	movs	r3, #0
 800f39c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7f4 fb75 	bl	8003a98 <HAL_HCD_Stop>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f3b2:	7bfb      	ldrb	r3, [r7, #15]
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f000 f941 	bl	800f63c <USBH_Get_USB_Status>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3be:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3710      	adds	r7, #16
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7f4 fbbd 	bl	8003b5a <HAL_HCD_GetCurrentSpeed>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	2b02      	cmp	r3, #2
 800f3e4:	d00c      	beq.n	800f400 <USBH_LL_GetSpeed+0x38>
 800f3e6:	2b02      	cmp	r3, #2
 800f3e8:	d80d      	bhi.n	800f406 <USBH_LL_GetSpeed+0x3e>
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d002      	beq.n	800f3f4 <USBH_LL_GetSpeed+0x2c>
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	d003      	beq.n	800f3fa <USBH_LL_GetSpeed+0x32>
 800f3f2:	e008      	b.n	800f406 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f3f8:	e008      	b.n	800f40c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	73fb      	strb	r3, [r7, #15]
    break;
 800f3fe:	e005      	b.n	800f40c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f400:	2302      	movs	r3, #2
 800f402:	73fb      	strb	r3, [r7, #15]
    break;
 800f404:	e002      	b.n	800f40c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f406:	2301      	movs	r3, #1
 800f408:	73fb      	strb	r3, [r7, #15]
    break;
 800f40a:	bf00      	nop
  }
  return  speed;
 800f40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3710      	adds	r7, #16
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}

0800f416 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f416:	b580      	push	{r7, lr}
 800f418:	b084      	sub	sp, #16
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f41e:	2300      	movs	r3, #0
 800f420:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f422:	2300      	movs	r3, #0
 800f424:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7f4 fb50 	bl	8003ad2 <HAL_HCD_ResetPort>
 800f432:	4603      	mov	r3, r0
 800f434:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f436:	7bfb      	ldrb	r3, [r7, #15]
 800f438:	4618      	mov	r0, r3
 800f43a:	f000 f8ff 	bl	800f63c <USBH_Get_USB_Status>
 800f43e:	4603      	mov	r3, r0
 800f440:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f442:	7bbb      	ldrb	r3, [r7, #14]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3710      	adds	r7, #16
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	460b      	mov	r3, r1
 800f456:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f45e:	78fa      	ldrb	r2, [r7, #3]
 800f460:	4611      	mov	r1, r2
 800f462:	4618      	mov	r0, r3
 800f464:	f7f4 fb57 	bl	8003b16 <HAL_HCD_HC_GetXferCount>
 800f468:	4603      	mov	r3, r0
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3708      	adds	r7, #8
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f472:	b590      	push	{r4, r7, lr}
 800f474:	b089      	sub	sp, #36	; 0x24
 800f476:	af04      	add	r7, sp, #16
 800f478:	6078      	str	r0, [r7, #4]
 800f47a:	4608      	mov	r0, r1
 800f47c:	4611      	mov	r1, r2
 800f47e:	461a      	mov	r2, r3
 800f480:	4603      	mov	r3, r0
 800f482:	70fb      	strb	r3, [r7, #3]
 800f484:	460b      	mov	r3, r1
 800f486:	70bb      	strb	r3, [r7, #2]
 800f488:	4613      	mov	r3, r2
 800f48a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f48c:	2300      	movs	r3, #0
 800f48e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f490:	2300      	movs	r3, #0
 800f492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f49a:	787c      	ldrb	r4, [r7, #1]
 800f49c:	78ba      	ldrb	r2, [r7, #2]
 800f49e:	78f9      	ldrb	r1, [r7, #3]
 800f4a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f4a2:	9302      	str	r3, [sp, #8]
 800f4a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f4a8:	9301      	str	r3, [sp, #4]
 800f4aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4ae:	9300      	str	r3, [sp, #0]
 800f4b0:	4623      	mov	r3, r4
 800f4b2:	f7f3 ffba 	bl	800342a <HAL_HCD_HC_Init>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f4ba:	7bfb      	ldrb	r3, [r7, #15]
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f000 f8bd 	bl	800f63c <USBH_Get_USB_Status>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3714      	adds	r7, #20
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd90      	pop	{r4, r7, pc}

0800f4d0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	460b      	mov	r3, r1
 800f4da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f4ea:	78fa      	ldrb	r2, [r7, #3]
 800f4ec:	4611      	mov	r1, r2
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7f4 f82a 	bl	8003548 <HAL_HCD_HC_Halt>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f4f8:	7bfb      	ldrb	r3, [r7, #15]
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f000 f89e 	bl	800f63c <USBH_Get_USB_Status>
 800f500:	4603      	mov	r3, r0
 800f502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f504:	7bbb      	ldrb	r3, [r7, #14]
}
 800f506:	4618      	mov	r0, r3
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}

0800f50e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f50e:	b590      	push	{r4, r7, lr}
 800f510:	b089      	sub	sp, #36	; 0x24
 800f512:	af04      	add	r7, sp, #16
 800f514:	6078      	str	r0, [r7, #4]
 800f516:	4608      	mov	r0, r1
 800f518:	4611      	mov	r1, r2
 800f51a:	461a      	mov	r2, r3
 800f51c:	4603      	mov	r3, r0
 800f51e:	70fb      	strb	r3, [r7, #3]
 800f520:	460b      	mov	r3, r1
 800f522:	70bb      	strb	r3, [r7, #2]
 800f524:	4613      	mov	r3, r2
 800f526:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f528:	2300      	movs	r3, #0
 800f52a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f52c:	2300      	movs	r3, #0
 800f52e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f536:	787c      	ldrb	r4, [r7, #1]
 800f538:	78ba      	ldrb	r2, [r7, #2]
 800f53a:	78f9      	ldrb	r1, [r7, #3]
 800f53c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f540:	9303      	str	r3, [sp, #12]
 800f542:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f544:	9302      	str	r3, [sp, #8]
 800f546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f548:	9301      	str	r3, [sp, #4]
 800f54a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f54e:	9300      	str	r3, [sp, #0]
 800f550:	4623      	mov	r3, r4
 800f552:	f7f4 f81d 	bl	8003590 <HAL_HCD_HC_SubmitRequest>
 800f556:	4603      	mov	r3, r0
 800f558:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f55a:	7bfb      	ldrb	r3, [r7, #15]
 800f55c:	4618      	mov	r0, r3
 800f55e:	f000 f86d 	bl	800f63c <USBH_Get_USB_Status>
 800f562:	4603      	mov	r3, r0
 800f564:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f566:	7bbb      	ldrb	r3, [r7, #14]
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3714      	adds	r7, #20
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd90      	pop	{r4, r7, pc}

0800f570 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	460b      	mov	r3, r1
 800f57a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f582:	78fa      	ldrb	r2, [r7, #3]
 800f584:	4611      	mov	r1, r2
 800f586:	4618      	mov	r0, r3
 800f588:	f7f4 fab1 	bl	8003aee <HAL_HCD_HC_GetURBState>
 800f58c:	4603      	mov	r3, r0
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3708      	adds	r7, #8
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}

0800f596 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f596:	b580      	push	{r7, lr}
 800f598:	b082      	sub	sp, #8
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
 800f59e:	460b      	mov	r3, r1
 800f5a0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	d103      	bne.n	800f5b4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f5ac:	78fb      	ldrb	r3, [r7, #3]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f000 f870 	bl	800f694 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f5b4:	20c8      	movs	r0, #200	; 0xc8
 800f5b6:	f7f2 ffe9 	bl	800258c <HAL_Delay>
  return USBH_OK;
 800f5ba:	2300      	movs	r3, #0
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3708      	adds	r7, #8
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b085      	sub	sp, #20
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	460b      	mov	r3, r1
 800f5ce:	70fb      	strb	r3, [r7, #3]
 800f5d0:	4613      	mov	r3, r2
 800f5d2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f5da:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f5dc:	78fb      	ldrb	r3, [r7, #3]
 800f5de:	68fa      	ldr	r2, [r7, #12]
 800f5e0:	212c      	movs	r1, #44	; 0x2c
 800f5e2:	fb01 f303 	mul.w	r3, r1, r3
 800f5e6:	4413      	add	r3, r2
 800f5e8:	333b      	adds	r3, #59	; 0x3b
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d009      	beq.n	800f604 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f5f0:	78fb      	ldrb	r3, [r7, #3]
 800f5f2:	68fa      	ldr	r2, [r7, #12]
 800f5f4:	212c      	movs	r1, #44	; 0x2c
 800f5f6:	fb01 f303 	mul.w	r3, r1, r3
 800f5fa:	4413      	add	r3, r2
 800f5fc:	3354      	adds	r3, #84	; 0x54
 800f5fe:	78ba      	ldrb	r2, [r7, #2]
 800f600:	701a      	strb	r2, [r3, #0]
 800f602:	e008      	b.n	800f616 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f604:	78fb      	ldrb	r3, [r7, #3]
 800f606:	68fa      	ldr	r2, [r7, #12]
 800f608:	212c      	movs	r1, #44	; 0x2c
 800f60a:	fb01 f303 	mul.w	r3, r1, r3
 800f60e:	4413      	add	r3, r2
 800f610:	3355      	adds	r3, #85	; 0x55
 800f612:	78ba      	ldrb	r2, [r7, #2]
 800f614:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f616:	2300      	movs	r3, #0
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3714      	adds	r7, #20
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr

0800f624 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b082      	sub	sp, #8
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f7f2 ffad 	bl	800258c <HAL_Delay>
}
 800f632:	bf00      	nop
 800f634:	3708      	adds	r7, #8
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
	...

0800f63c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f63c:	b480      	push	{r7}
 800f63e:	b085      	sub	sp, #20
 800f640:	af00      	add	r7, sp, #0
 800f642:	4603      	mov	r3, r0
 800f644:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f646:	2300      	movs	r3, #0
 800f648:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f64a:	79fb      	ldrb	r3, [r7, #7]
 800f64c:	2b03      	cmp	r3, #3
 800f64e:	d817      	bhi.n	800f680 <USBH_Get_USB_Status+0x44>
 800f650:	a201      	add	r2, pc, #4	; (adr r2, 800f658 <USBH_Get_USB_Status+0x1c>)
 800f652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f656:	bf00      	nop
 800f658:	0800f669 	.word	0x0800f669
 800f65c:	0800f66f 	.word	0x0800f66f
 800f660:	0800f675 	.word	0x0800f675
 800f664:	0800f67b 	.word	0x0800f67b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f668:	2300      	movs	r3, #0
 800f66a:	73fb      	strb	r3, [r7, #15]
    break;
 800f66c:	e00b      	b.n	800f686 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f66e:	2302      	movs	r3, #2
 800f670:	73fb      	strb	r3, [r7, #15]
    break;
 800f672:	e008      	b.n	800f686 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f674:	2301      	movs	r3, #1
 800f676:	73fb      	strb	r3, [r7, #15]
    break;
 800f678:	e005      	b.n	800f686 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f67a:	2302      	movs	r3, #2
 800f67c:	73fb      	strb	r3, [r7, #15]
    break;
 800f67e:	e002      	b.n	800f686 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f680:	2302      	movs	r3, #2
 800f682:	73fb      	strb	r3, [r7, #15]
    break;
 800f684:	bf00      	nop
  }
  return usb_status;
 800f686:	7bfb      	ldrb	r3, [r7, #15]
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3714      	adds	r7, #20
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	4603      	mov	r3, r0
 800f69c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f69e:	79fb      	ldrb	r3, [r7, #7]
 800f6a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f6a2:	79fb      	ldrb	r3, [r7, #7]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d102      	bne.n	800f6ae <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	73fb      	strb	r3, [r7, #15]
 800f6ac:	e001      	b.n	800f6b2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f6b2:	7bfb      	ldrb	r3, [r7, #15]
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	2101      	movs	r1, #1
 800f6b8:	4803      	ldr	r0, [pc, #12]	; (800f6c8 <MX_DriverVbusFS+0x34>)
 800f6ba:	f7f3 fe3b 	bl	8003334 <HAL_GPIO_WritePin>
}
 800f6be:	bf00      	nop
 800f6c0:	3710      	adds	r7, #16
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	40020800 	.word	0x40020800

0800f6cc <__errno>:
 800f6cc:	4b01      	ldr	r3, [pc, #4]	; (800f6d4 <__errno+0x8>)
 800f6ce:	6818      	ldr	r0, [r3, #0]
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	20000040 	.word	0x20000040

0800f6d8 <__libc_init_array>:
 800f6d8:	b570      	push	{r4, r5, r6, lr}
 800f6da:	4d0d      	ldr	r5, [pc, #52]	; (800f710 <__libc_init_array+0x38>)
 800f6dc:	4c0d      	ldr	r4, [pc, #52]	; (800f714 <__libc_init_array+0x3c>)
 800f6de:	1b64      	subs	r4, r4, r5
 800f6e0:	10a4      	asrs	r4, r4, #2
 800f6e2:	2600      	movs	r6, #0
 800f6e4:	42a6      	cmp	r6, r4
 800f6e6:	d109      	bne.n	800f6fc <__libc_init_array+0x24>
 800f6e8:	4d0b      	ldr	r5, [pc, #44]	; (800f718 <__libc_init_array+0x40>)
 800f6ea:	4c0c      	ldr	r4, [pc, #48]	; (800f71c <__libc_init_array+0x44>)
 800f6ec:	f000 fcae 	bl	801004c <_init>
 800f6f0:	1b64      	subs	r4, r4, r5
 800f6f2:	10a4      	asrs	r4, r4, #2
 800f6f4:	2600      	movs	r6, #0
 800f6f6:	42a6      	cmp	r6, r4
 800f6f8:	d105      	bne.n	800f706 <__libc_init_array+0x2e>
 800f6fa:	bd70      	pop	{r4, r5, r6, pc}
 800f6fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f700:	4798      	blx	r3
 800f702:	3601      	adds	r6, #1
 800f704:	e7ee      	b.n	800f6e4 <__libc_init_array+0xc>
 800f706:	f855 3b04 	ldr.w	r3, [r5], #4
 800f70a:	4798      	blx	r3
 800f70c:	3601      	adds	r6, #1
 800f70e:	e7f2      	b.n	800f6f6 <__libc_init_array+0x1e>
 800f710:	0801067c 	.word	0x0801067c
 800f714:	0801067c 	.word	0x0801067c
 800f718:	0801067c 	.word	0x0801067c
 800f71c:	08010680 	.word	0x08010680

0800f720 <malloc>:
 800f720:	4b02      	ldr	r3, [pc, #8]	; (800f72c <malloc+0xc>)
 800f722:	4601      	mov	r1, r0
 800f724:	6818      	ldr	r0, [r3, #0]
 800f726:	f000 b87f 	b.w	800f828 <_malloc_r>
 800f72a:	bf00      	nop
 800f72c:	20000040 	.word	0x20000040

0800f730 <free>:
 800f730:	4b02      	ldr	r3, [pc, #8]	; (800f73c <free+0xc>)
 800f732:	4601      	mov	r1, r0
 800f734:	6818      	ldr	r0, [r3, #0]
 800f736:	f000 b80b 	b.w	800f750 <_free_r>
 800f73a:	bf00      	nop
 800f73c:	20000040 	.word	0x20000040

0800f740 <memset>:
 800f740:	4402      	add	r2, r0
 800f742:	4603      	mov	r3, r0
 800f744:	4293      	cmp	r3, r2
 800f746:	d100      	bne.n	800f74a <memset+0xa>
 800f748:	4770      	bx	lr
 800f74a:	f803 1b01 	strb.w	r1, [r3], #1
 800f74e:	e7f9      	b.n	800f744 <memset+0x4>

0800f750 <_free_r>:
 800f750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f752:	2900      	cmp	r1, #0
 800f754:	d044      	beq.n	800f7e0 <_free_r+0x90>
 800f756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f75a:	9001      	str	r0, [sp, #4]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	f1a1 0404 	sub.w	r4, r1, #4
 800f762:	bfb8      	it	lt
 800f764:	18e4      	addlt	r4, r4, r3
 800f766:	f000 f913 	bl	800f990 <__malloc_lock>
 800f76a:	4a1e      	ldr	r2, [pc, #120]	; (800f7e4 <_free_r+0x94>)
 800f76c:	9801      	ldr	r0, [sp, #4]
 800f76e:	6813      	ldr	r3, [r2, #0]
 800f770:	b933      	cbnz	r3, 800f780 <_free_r+0x30>
 800f772:	6063      	str	r3, [r4, #4]
 800f774:	6014      	str	r4, [r2, #0]
 800f776:	b003      	add	sp, #12
 800f778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f77c:	f000 b90e 	b.w	800f99c <__malloc_unlock>
 800f780:	42a3      	cmp	r3, r4
 800f782:	d908      	bls.n	800f796 <_free_r+0x46>
 800f784:	6825      	ldr	r5, [r4, #0]
 800f786:	1961      	adds	r1, r4, r5
 800f788:	428b      	cmp	r3, r1
 800f78a:	bf01      	itttt	eq
 800f78c:	6819      	ldreq	r1, [r3, #0]
 800f78e:	685b      	ldreq	r3, [r3, #4]
 800f790:	1949      	addeq	r1, r1, r5
 800f792:	6021      	streq	r1, [r4, #0]
 800f794:	e7ed      	b.n	800f772 <_free_r+0x22>
 800f796:	461a      	mov	r2, r3
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	b10b      	cbz	r3, 800f7a0 <_free_r+0x50>
 800f79c:	42a3      	cmp	r3, r4
 800f79e:	d9fa      	bls.n	800f796 <_free_r+0x46>
 800f7a0:	6811      	ldr	r1, [r2, #0]
 800f7a2:	1855      	adds	r5, r2, r1
 800f7a4:	42a5      	cmp	r5, r4
 800f7a6:	d10b      	bne.n	800f7c0 <_free_r+0x70>
 800f7a8:	6824      	ldr	r4, [r4, #0]
 800f7aa:	4421      	add	r1, r4
 800f7ac:	1854      	adds	r4, r2, r1
 800f7ae:	42a3      	cmp	r3, r4
 800f7b0:	6011      	str	r1, [r2, #0]
 800f7b2:	d1e0      	bne.n	800f776 <_free_r+0x26>
 800f7b4:	681c      	ldr	r4, [r3, #0]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	6053      	str	r3, [r2, #4]
 800f7ba:	4421      	add	r1, r4
 800f7bc:	6011      	str	r1, [r2, #0]
 800f7be:	e7da      	b.n	800f776 <_free_r+0x26>
 800f7c0:	d902      	bls.n	800f7c8 <_free_r+0x78>
 800f7c2:	230c      	movs	r3, #12
 800f7c4:	6003      	str	r3, [r0, #0]
 800f7c6:	e7d6      	b.n	800f776 <_free_r+0x26>
 800f7c8:	6825      	ldr	r5, [r4, #0]
 800f7ca:	1961      	adds	r1, r4, r5
 800f7cc:	428b      	cmp	r3, r1
 800f7ce:	bf04      	itt	eq
 800f7d0:	6819      	ldreq	r1, [r3, #0]
 800f7d2:	685b      	ldreq	r3, [r3, #4]
 800f7d4:	6063      	str	r3, [r4, #4]
 800f7d6:	bf04      	itt	eq
 800f7d8:	1949      	addeq	r1, r1, r5
 800f7da:	6021      	streq	r1, [r4, #0]
 800f7dc:	6054      	str	r4, [r2, #4]
 800f7de:	e7ca      	b.n	800f776 <_free_r+0x26>
 800f7e0:	b003      	add	sp, #12
 800f7e2:	bd30      	pop	{r4, r5, pc}
 800f7e4:	20004224 	.word	0x20004224

0800f7e8 <sbrk_aligned>:
 800f7e8:	b570      	push	{r4, r5, r6, lr}
 800f7ea:	4e0e      	ldr	r6, [pc, #56]	; (800f824 <sbrk_aligned+0x3c>)
 800f7ec:	460c      	mov	r4, r1
 800f7ee:	6831      	ldr	r1, [r6, #0]
 800f7f0:	4605      	mov	r5, r0
 800f7f2:	b911      	cbnz	r1, 800f7fa <sbrk_aligned+0x12>
 800f7f4:	f000 f88c 	bl	800f910 <_sbrk_r>
 800f7f8:	6030      	str	r0, [r6, #0]
 800f7fa:	4621      	mov	r1, r4
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	f000 f887 	bl	800f910 <_sbrk_r>
 800f802:	1c43      	adds	r3, r0, #1
 800f804:	d00a      	beq.n	800f81c <sbrk_aligned+0x34>
 800f806:	1cc4      	adds	r4, r0, #3
 800f808:	f024 0403 	bic.w	r4, r4, #3
 800f80c:	42a0      	cmp	r0, r4
 800f80e:	d007      	beq.n	800f820 <sbrk_aligned+0x38>
 800f810:	1a21      	subs	r1, r4, r0
 800f812:	4628      	mov	r0, r5
 800f814:	f000 f87c 	bl	800f910 <_sbrk_r>
 800f818:	3001      	adds	r0, #1
 800f81a:	d101      	bne.n	800f820 <sbrk_aligned+0x38>
 800f81c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f820:	4620      	mov	r0, r4
 800f822:	bd70      	pop	{r4, r5, r6, pc}
 800f824:	20004228 	.word	0x20004228

0800f828 <_malloc_r>:
 800f828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f82c:	1ccd      	adds	r5, r1, #3
 800f82e:	f025 0503 	bic.w	r5, r5, #3
 800f832:	3508      	adds	r5, #8
 800f834:	2d0c      	cmp	r5, #12
 800f836:	bf38      	it	cc
 800f838:	250c      	movcc	r5, #12
 800f83a:	2d00      	cmp	r5, #0
 800f83c:	4607      	mov	r7, r0
 800f83e:	db01      	blt.n	800f844 <_malloc_r+0x1c>
 800f840:	42a9      	cmp	r1, r5
 800f842:	d905      	bls.n	800f850 <_malloc_r+0x28>
 800f844:	230c      	movs	r3, #12
 800f846:	603b      	str	r3, [r7, #0]
 800f848:	2600      	movs	r6, #0
 800f84a:	4630      	mov	r0, r6
 800f84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f850:	4e2e      	ldr	r6, [pc, #184]	; (800f90c <_malloc_r+0xe4>)
 800f852:	f000 f89d 	bl	800f990 <__malloc_lock>
 800f856:	6833      	ldr	r3, [r6, #0]
 800f858:	461c      	mov	r4, r3
 800f85a:	bb34      	cbnz	r4, 800f8aa <_malloc_r+0x82>
 800f85c:	4629      	mov	r1, r5
 800f85e:	4638      	mov	r0, r7
 800f860:	f7ff ffc2 	bl	800f7e8 <sbrk_aligned>
 800f864:	1c43      	adds	r3, r0, #1
 800f866:	4604      	mov	r4, r0
 800f868:	d14d      	bne.n	800f906 <_malloc_r+0xde>
 800f86a:	6834      	ldr	r4, [r6, #0]
 800f86c:	4626      	mov	r6, r4
 800f86e:	2e00      	cmp	r6, #0
 800f870:	d140      	bne.n	800f8f4 <_malloc_r+0xcc>
 800f872:	6823      	ldr	r3, [r4, #0]
 800f874:	4631      	mov	r1, r6
 800f876:	4638      	mov	r0, r7
 800f878:	eb04 0803 	add.w	r8, r4, r3
 800f87c:	f000 f848 	bl	800f910 <_sbrk_r>
 800f880:	4580      	cmp	r8, r0
 800f882:	d13a      	bne.n	800f8fa <_malloc_r+0xd2>
 800f884:	6821      	ldr	r1, [r4, #0]
 800f886:	3503      	adds	r5, #3
 800f888:	1a6d      	subs	r5, r5, r1
 800f88a:	f025 0503 	bic.w	r5, r5, #3
 800f88e:	3508      	adds	r5, #8
 800f890:	2d0c      	cmp	r5, #12
 800f892:	bf38      	it	cc
 800f894:	250c      	movcc	r5, #12
 800f896:	4629      	mov	r1, r5
 800f898:	4638      	mov	r0, r7
 800f89a:	f7ff ffa5 	bl	800f7e8 <sbrk_aligned>
 800f89e:	3001      	adds	r0, #1
 800f8a0:	d02b      	beq.n	800f8fa <_malloc_r+0xd2>
 800f8a2:	6823      	ldr	r3, [r4, #0]
 800f8a4:	442b      	add	r3, r5
 800f8a6:	6023      	str	r3, [r4, #0]
 800f8a8:	e00e      	b.n	800f8c8 <_malloc_r+0xa0>
 800f8aa:	6822      	ldr	r2, [r4, #0]
 800f8ac:	1b52      	subs	r2, r2, r5
 800f8ae:	d41e      	bmi.n	800f8ee <_malloc_r+0xc6>
 800f8b0:	2a0b      	cmp	r2, #11
 800f8b2:	d916      	bls.n	800f8e2 <_malloc_r+0xba>
 800f8b4:	1961      	adds	r1, r4, r5
 800f8b6:	42a3      	cmp	r3, r4
 800f8b8:	6025      	str	r5, [r4, #0]
 800f8ba:	bf18      	it	ne
 800f8bc:	6059      	strne	r1, [r3, #4]
 800f8be:	6863      	ldr	r3, [r4, #4]
 800f8c0:	bf08      	it	eq
 800f8c2:	6031      	streq	r1, [r6, #0]
 800f8c4:	5162      	str	r2, [r4, r5]
 800f8c6:	604b      	str	r3, [r1, #4]
 800f8c8:	4638      	mov	r0, r7
 800f8ca:	f104 060b 	add.w	r6, r4, #11
 800f8ce:	f000 f865 	bl	800f99c <__malloc_unlock>
 800f8d2:	f026 0607 	bic.w	r6, r6, #7
 800f8d6:	1d23      	adds	r3, r4, #4
 800f8d8:	1af2      	subs	r2, r6, r3
 800f8da:	d0b6      	beq.n	800f84a <_malloc_r+0x22>
 800f8dc:	1b9b      	subs	r3, r3, r6
 800f8de:	50a3      	str	r3, [r4, r2]
 800f8e0:	e7b3      	b.n	800f84a <_malloc_r+0x22>
 800f8e2:	6862      	ldr	r2, [r4, #4]
 800f8e4:	42a3      	cmp	r3, r4
 800f8e6:	bf0c      	ite	eq
 800f8e8:	6032      	streq	r2, [r6, #0]
 800f8ea:	605a      	strne	r2, [r3, #4]
 800f8ec:	e7ec      	b.n	800f8c8 <_malloc_r+0xa0>
 800f8ee:	4623      	mov	r3, r4
 800f8f0:	6864      	ldr	r4, [r4, #4]
 800f8f2:	e7b2      	b.n	800f85a <_malloc_r+0x32>
 800f8f4:	4634      	mov	r4, r6
 800f8f6:	6876      	ldr	r6, [r6, #4]
 800f8f8:	e7b9      	b.n	800f86e <_malloc_r+0x46>
 800f8fa:	230c      	movs	r3, #12
 800f8fc:	603b      	str	r3, [r7, #0]
 800f8fe:	4638      	mov	r0, r7
 800f900:	f000 f84c 	bl	800f99c <__malloc_unlock>
 800f904:	e7a1      	b.n	800f84a <_malloc_r+0x22>
 800f906:	6025      	str	r5, [r4, #0]
 800f908:	e7de      	b.n	800f8c8 <_malloc_r+0xa0>
 800f90a:	bf00      	nop
 800f90c:	20004224 	.word	0x20004224

0800f910 <_sbrk_r>:
 800f910:	b538      	push	{r3, r4, r5, lr}
 800f912:	4d06      	ldr	r5, [pc, #24]	; (800f92c <_sbrk_r+0x1c>)
 800f914:	2300      	movs	r3, #0
 800f916:	4604      	mov	r4, r0
 800f918:	4608      	mov	r0, r1
 800f91a:	602b      	str	r3, [r5, #0]
 800f91c:	f7f2 f880 	bl	8001a20 <_sbrk>
 800f920:	1c43      	adds	r3, r0, #1
 800f922:	d102      	bne.n	800f92a <_sbrk_r+0x1a>
 800f924:	682b      	ldr	r3, [r5, #0]
 800f926:	b103      	cbz	r3, 800f92a <_sbrk_r+0x1a>
 800f928:	6023      	str	r3, [r4, #0]
 800f92a:	bd38      	pop	{r3, r4, r5, pc}
 800f92c:	2000422c 	.word	0x2000422c

0800f930 <siprintf>:
 800f930:	b40e      	push	{r1, r2, r3}
 800f932:	b500      	push	{lr}
 800f934:	b09c      	sub	sp, #112	; 0x70
 800f936:	ab1d      	add	r3, sp, #116	; 0x74
 800f938:	9002      	str	r0, [sp, #8]
 800f93a:	9006      	str	r0, [sp, #24]
 800f93c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f940:	4809      	ldr	r0, [pc, #36]	; (800f968 <siprintf+0x38>)
 800f942:	9107      	str	r1, [sp, #28]
 800f944:	9104      	str	r1, [sp, #16]
 800f946:	4909      	ldr	r1, [pc, #36]	; (800f96c <siprintf+0x3c>)
 800f948:	f853 2b04 	ldr.w	r2, [r3], #4
 800f94c:	9105      	str	r1, [sp, #20]
 800f94e:	6800      	ldr	r0, [r0, #0]
 800f950:	9301      	str	r3, [sp, #4]
 800f952:	a902      	add	r1, sp, #8
 800f954:	f000 f884 	bl	800fa60 <_svfiprintf_r>
 800f958:	9b02      	ldr	r3, [sp, #8]
 800f95a:	2200      	movs	r2, #0
 800f95c:	701a      	strb	r2, [r3, #0]
 800f95e:	b01c      	add	sp, #112	; 0x70
 800f960:	f85d eb04 	ldr.w	lr, [sp], #4
 800f964:	b003      	add	sp, #12
 800f966:	4770      	bx	lr
 800f968:	20000040 	.word	0x20000040
 800f96c:	ffff0208 	.word	0xffff0208

0800f970 <strcat>:
 800f970:	b510      	push	{r4, lr}
 800f972:	4602      	mov	r2, r0
 800f974:	7814      	ldrb	r4, [r2, #0]
 800f976:	4613      	mov	r3, r2
 800f978:	3201      	adds	r2, #1
 800f97a:	2c00      	cmp	r4, #0
 800f97c:	d1fa      	bne.n	800f974 <strcat+0x4>
 800f97e:	3b01      	subs	r3, #1
 800f980:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f984:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f988:	2a00      	cmp	r2, #0
 800f98a:	d1f9      	bne.n	800f980 <strcat+0x10>
 800f98c:	bd10      	pop	{r4, pc}
	...

0800f990 <__malloc_lock>:
 800f990:	4801      	ldr	r0, [pc, #4]	; (800f998 <__malloc_lock+0x8>)
 800f992:	f000 baf9 	b.w	800ff88 <__retarget_lock_acquire_recursive>
 800f996:	bf00      	nop
 800f998:	20004230 	.word	0x20004230

0800f99c <__malloc_unlock>:
 800f99c:	4801      	ldr	r0, [pc, #4]	; (800f9a4 <__malloc_unlock+0x8>)
 800f99e:	f000 baf4 	b.w	800ff8a <__retarget_lock_release_recursive>
 800f9a2:	bf00      	nop
 800f9a4:	20004230 	.word	0x20004230

0800f9a8 <__ssputs_r>:
 800f9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9ac:	688e      	ldr	r6, [r1, #8]
 800f9ae:	429e      	cmp	r6, r3
 800f9b0:	4682      	mov	sl, r0
 800f9b2:	460c      	mov	r4, r1
 800f9b4:	4690      	mov	r8, r2
 800f9b6:	461f      	mov	r7, r3
 800f9b8:	d838      	bhi.n	800fa2c <__ssputs_r+0x84>
 800f9ba:	898a      	ldrh	r2, [r1, #12]
 800f9bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f9c0:	d032      	beq.n	800fa28 <__ssputs_r+0x80>
 800f9c2:	6825      	ldr	r5, [r4, #0]
 800f9c4:	6909      	ldr	r1, [r1, #16]
 800f9c6:	eba5 0901 	sub.w	r9, r5, r1
 800f9ca:	6965      	ldr	r5, [r4, #20]
 800f9cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f9d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	444b      	add	r3, r9
 800f9d8:	106d      	asrs	r5, r5, #1
 800f9da:	429d      	cmp	r5, r3
 800f9dc:	bf38      	it	cc
 800f9de:	461d      	movcc	r5, r3
 800f9e0:	0553      	lsls	r3, r2, #21
 800f9e2:	d531      	bpl.n	800fa48 <__ssputs_r+0xa0>
 800f9e4:	4629      	mov	r1, r5
 800f9e6:	f7ff ff1f 	bl	800f828 <_malloc_r>
 800f9ea:	4606      	mov	r6, r0
 800f9ec:	b950      	cbnz	r0, 800fa04 <__ssputs_r+0x5c>
 800f9ee:	230c      	movs	r3, #12
 800f9f0:	f8ca 3000 	str.w	r3, [sl]
 800f9f4:	89a3      	ldrh	r3, [r4, #12]
 800f9f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9fa:	81a3      	strh	r3, [r4, #12]
 800f9fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa04:	6921      	ldr	r1, [r4, #16]
 800fa06:	464a      	mov	r2, r9
 800fa08:	f000 fac0 	bl	800ff8c <memcpy>
 800fa0c:	89a3      	ldrh	r3, [r4, #12]
 800fa0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fa12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa16:	81a3      	strh	r3, [r4, #12]
 800fa18:	6126      	str	r6, [r4, #16]
 800fa1a:	6165      	str	r5, [r4, #20]
 800fa1c:	444e      	add	r6, r9
 800fa1e:	eba5 0509 	sub.w	r5, r5, r9
 800fa22:	6026      	str	r6, [r4, #0]
 800fa24:	60a5      	str	r5, [r4, #8]
 800fa26:	463e      	mov	r6, r7
 800fa28:	42be      	cmp	r6, r7
 800fa2a:	d900      	bls.n	800fa2e <__ssputs_r+0x86>
 800fa2c:	463e      	mov	r6, r7
 800fa2e:	6820      	ldr	r0, [r4, #0]
 800fa30:	4632      	mov	r2, r6
 800fa32:	4641      	mov	r1, r8
 800fa34:	f000 fab8 	bl	800ffa8 <memmove>
 800fa38:	68a3      	ldr	r3, [r4, #8]
 800fa3a:	1b9b      	subs	r3, r3, r6
 800fa3c:	60a3      	str	r3, [r4, #8]
 800fa3e:	6823      	ldr	r3, [r4, #0]
 800fa40:	4433      	add	r3, r6
 800fa42:	6023      	str	r3, [r4, #0]
 800fa44:	2000      	movs	r0, #0
 800fa46:	e7db      	b.n	800fa00 <__ssputs_r+0x58>
 800fa48:	462a      	mov	r2, r5
 800fa4a:	f000 fac7 	bl	800ffdc <_realloc_r>
 800fa4e:	4606      	mov	r6, r0
 800fa50:	2800      	cmp	r0, #0
 800fa52:	d1e1      	bne.n	800fa18 <__ssputs_r+0x70>
 800fa54:	6921      	ldr	r1, [r4, #16]
 800fa56:	4650      	mov	r0, sl
 800fa58:	f7ff fe7a 	bl	800f750 <_free_r>
 800fa5c:	e7c7      	b.n	800f9ee <__ssputs_r+0x46>
	...

0800fa60 <_svfiprintf_r>:
 800fa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa64:	4698      	mov	r8, r3
 800fa66:	898b      	ldrh	r3, [r1, #12]
 800fa68:	061b      	lsls	r3, r3, #24
 800fa6a:	b09d      	sub	sp, #116	; 0x74
 800fa6c:	4607      	mov	r7, r0
 800fa6e:	460d      	mov	r5, r1
 800fa70:	4614      	mov	r4, r2
 800fa72:	d50e      	bpl.n	800fa92 <_svfiprintf_r+0x32>
 800fa74:	690b      	ldr	r3, [r1, #16]
 800fa76:	b963      	cbnz	r3, 800fa92 <_svfiprintf_r+0x32>
 800fa78:	2140      	movs	r1, #64	; 0x40
 800fa7a:	f7ff fed5 	bl	800f828 <_malloc_r>
 800fa7e:	6028      	str	r0, [r5, #0]
 800fa80:	6128      	str	r0, [r5, #16]
 800fa82:	b920      	cbnz	r0, 800fa8e <_svfiprintf_r+0x2e>
 800fa84:	230c      	movs	r3, #12
 800fa86:	603b      	str	r3, [r7, #0]
 800fa88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa8c:	e0d1      	b.n	800fc32 <_svfiprintf_r+0x1d2>
 800fa8e:	2340      	movs	r3, #64	; 0x40
 800fa90:	616b      	str	r3, [r5, #20]
 800fa92:	2300      	movs	r3, #0
 800fa94:	9309      	str	r3, [sp, #36]	; 0x24
 800fa96:	2320      	movs	r3, #32
 800fa98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800faa0:	2330      	movs	r3, #48	; 0x30
 800faa2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fc4c <_svfiprintf_r+0x1ec>
 800faa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800faaa:	f04f 0901 	mov.w	r9, #1
 800faae:	4623      	mov	r3, r4
 800fab0:	469a      	mov	sl, r3
 800fab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fab6:	b10a      	cbz	r2, 800fabc <_svfiprintf_r+0x5c>
 800fab8:	2a25      	cmp	r2, #37	; 0x25
 800faba:	d1f9      	bne.n	800fab0 <_svfiprintf_r+0x50>
 800fabc:	ebba 0b04 	subs.w	fp, sl, r4
 800fac0:	d00b      	beq.n	800fada <_svfiprintf_r+0x7a>
 800fac2:	465b      	mov	r3, fp
 800fac4:	4622      	mov	r2, r4
 800fac6:	4629      	mov	r1, r5
 800fac8:	4638      	mov	r0, r7
 800faca:	f7ff ff6d 	bl	800f9a8 <__ssputs_r>
 800face:	3001      	adds	r0, #1
 800fad0:	f000 80aa 	beq.w	800fc28 <_svfiprintf_r+0x1c8>
 800fad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fad6:	445a      	add	r2, fp
 800fad8:	9209      	str	r2, [sp, #36]	; 0x24
 800fada:	f89a 3000 	ldrb.w	r3, [sl]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	f000 80a2 	beq.w	800fc28 <_svfiprintf_r+0x1c8>
 800fae4:	2300      	movs	r3, #0
 800fae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800faea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800faee:	f10a 0a01 	add.w	sl, sl, #1
 800faf2:	9304      	str	r3, [sp, #16]
 800faf4:	9307      	str	r3, [sp, #28]
 800faf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fafa:	931a      	str	r3, [sp, #104]	; 0x68
 800fafc:	4654      	mov	r4, sl
 800fafe:	2205      	movs	r2, #5
 800fb00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb04:	4851      	ldr	r0, [pc, #324]	; (800fc4c <_svfiprintf_r+0x1ec>)
 800fb06:	f7f0 fb6b 	bl	80001e0 <memchr>
 800fb0a:	9a04      	ldr	r2, [sp, #16]
 800fb0c:	b9d8      	cbnz	r0, 800fb46 <_svfiprintf_r+0xe6>
 800fb0e:	06d0      	lsls	r0, r2, #27
 800fb10:	bf44      	itt	mi
 800fb12:	2320      	movmi	r3, #32
 800fb14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb18:	0711      	lsls	r1, r2, #28
 800fb1a:	bf44      	itt	mi
 800fb1c:	232b      	movmi	r3, #43	; 0x2b
 800fb1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb22:	f89a 3000 	ldrb.w	r3, [sl]
 800fb26:	2b2a      	cmp	r3, #42	; 0x2a
 800fb28:	d015      	beq.n	800fb56 <_svfiprintf_r+0xf6>
 800fb2a:	9a07      	ldr	r2, [sp, #28]
 800fb2c:	4654      	mov	r4, sl
 800fb2e:	2000      	movs	r0, #0
 800fb30:	f04f 0c0a 	mov.w	ip, #10
 800fb34:	4621      	mov	r1, r4
 800fb36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb3a:	3b30      	subs	r3, #48	; 0x30
 800fb3c:	2b09      	cmp	r3, #9
 800fb3e:	d94e      	bls.n	800fbde <_svfiprintf_r+0x17e>
 800fb40:	b1b0      	cbz	r0, 800fb70 <_svfiprintf_r+0x110>
 800fb42:	9207      	str	r2, [sp, #28]
 800fb44:	e014      	b.n	800fb70 <_svfiprintf_r+0x110>
 800fb46:	eba0 0308 	sub.w	r3, r0, r8
 800fb4a:	fa09 f303 	lsl.w	r3, r9, r3
 800fb4e:	4313      	orrs	r3, r2
 800fb50:	9304      	str	r3, [sp, #16]
 800fb52:	46a2      	mov	sl, r4
 800fb54:	e7d2      	b.n	800fafc <_svfiprintf_r+0x9c>
 800fb56:	9b03      	ldr	r3, [sp, #12]
 800fb58:	1d19      	adds	r1, r3, #4
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	9103      	str	r1, [sp, #12]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	bfbb      	ittet	lt
 800fb62:	425b      	neglt	r3, r3
 800fb64:	f042 0202 	orrlt.w	r2, r2, #2
 800fb68:	9307      	strge	r3, [sp, #28]
 800fb6a:	9307      	strlt	r3, [sp, #28]
 800fb6c:	bfb8      	it	lt
 800fb6e:	9204      	strlt	r2, [sp, #16]
 800fb70:	7823      	ldrb	r3, [r4, #0]
 800fb72:	2b2e      	cmp	r3, #46	; 0x2e
 800fb74:	d10c      	bne.n	800fb90 <_svfiprintf_r+0x130>
 800fb76:	7863      	ldrb	r3, [r4, #1]
 800fb78:	2b2a      	cmp	r3, #42	; 0x2a
 800fb7a:	d135      	bne.n	800fbe8 <_svfiprintf_r+0x188>
 800fb7c:	9b03      	ldr	r3, [sp, #12]
 800fb7e:	1d1a      	adds	r2, r3, #4
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	9203      	str	r2, [sp, #12]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	bfb8      	it	lt
 800fb88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fb8c:	3402      	adds	r4, #2
 800fb8e:	9305      	str	r3, [sp, #20]
 800fb90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fc5c <_svfiprintf_r+0x1fc>
 800fb94:	7821      	ldrb	r1, [r4, #0]
 800fb96:	2203      	movs	r2, #3
 800fb98:	4650      	mov	r0, sl
 800fb9a:	f7f0 fb21 	bl	80001e0 <memchr>
 800fb9e:	b140      	cbz	r0, 800fbb2 <_svfiprintf_r+0x152>
 800fba0:	2340      	movs	r3, #64	; 0x40
 800fba2:	eba0 000a 	sub.w	r0, r0, sl
 800fba6:	fa03 f000 	lsl.w	r0, r3, r0
 800fbaa:	9b04      	ldr	r3, [sp, #16]
 800fbac:	4303      	orrs	r3, r0
 800fbae:	3401      	adds	r4, #1
 800fbb0:	9304      	str	r3, [sp, #16]
 800fbb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbb6:	4826      	ldr	r0, [pc, #152]	; (800fc50 <_svfiprintf_r+0x1f0>)
 800fbb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbbc:	2206      	movs	r2, #6
 800fbbe:	f7f0 fb0f 	bl	80001e0 <memchr>
 800fbc2:	2800      	cmp	r0, #0
 800fbc4:	d038      	beq.n	800fc38 <_svfiprintf_r+0x1d8>
 800fbc6:	4b23      	ldr	r3, [pc, #140]	; (800fc54 <_svfiprintf_r+0x1f4>)
 800fbc8:	bb1b      	cbnz	r3, 800fc12 <_svfiprintf_r+0x1b2>
 800fbca:	9b03      	ldr	r3, [sp, #12]
 800fbcc:	3307      	adds	r3, #7
 800fbce:	f023 0307 	bic.w	r3, r3, #7
 800fbd2:	3308      	adds	r3, #8
 800fbd4:	9303      	str	r3, [sp, #12]
 800fbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbd8:	4433      	add	r3, r6
 800fbda:	9309      	str	r3, [sp, #36]	; 0x24
 800fbdc:	e767      	b.n	800faae <_svfiprintf_r+0x4e>
 800fbde:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbe2:	460c      	mov	r4, r1
 800fbe4:	2001      	movs	r0, #1
 800fbe6:	e7a5      	b.n	800fb34 <_svfiprintf_r+0xd4>
 800fbe8:	2300      	movs	r3, #0
 800fbea:	3401      	adds	r4, #1
 800fbec:	9305      	str	r3, [sp, #20]
 800fbee:	4619      	mov	r1, r3
 800fbf0:	f04f 0c0a 	mov.w	ip, #10
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbfa:	3a30      	subs	r2, #48	; 0x30
 800fbfc:	2a09      	cmp	r2, #9
 800fbfe:	d903      	bls.n	800fc08 <_svfiprintf_r+0x1a8>
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d0c5      	beq.n	800fb90 <_svfiprintf_r+0x130>
 800fc04:	9105      	str	r1, [sp, #20]
 800fc06:	e7c3      	b.n	800fb90 <_svfiprintf_r+0x130>
 800fc08:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc0c:	4604      	mov	r4, r0
 800fc0e:	2301      	movs	r3, #1
 800fc10:	e7f0      	b.n	800fbf4 <_svfiprintf_r+0x194>
 800fc12:	ab03      	add	r3, sp, #12
 800fc14:	9300      	str	r3, [sp, #0]
 800fc16:	462a      	mov	r2, r5
 800fc18:	4b0f      	ldr	r3, [pc, #60]	; (800fc58 <_svfiprintf_r+0x1f8>)
 800fc1a:	a904      	add	r1, sp, #16
 800fc1c:	4638      	mov	r0, r7
 800fc1e:	f3af 8000 	nop.w
 800fc22:	1c42      	adds	r2, r0, #1
 800fc24:	4606      	mov	r6, r0
 800fc26:	d1d6      	bne.n	800fbd6 <_svfiprintf_r+0x176>
 800fc28:	89ab      	ldrh	r3, [r5, #12]
 800fc2a:	065b      	lsls	r3, r3, #25
 800fc2c:	f53f af2c 	bmi.w	800fa88 <_svfiprintf_r+0x28>
 800fc30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc32:	b01d      	add	sp, #116	; 0x74
 800fc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc38:	ab03      	add	r3, sp, #12
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	462a      	mov	r2, r5
 800fc3e:	4b06      	ldr	r3, [pc, #24]	; (800fc58 <_svfiprintf_r+0x1f8>)
 800fc40:	a904      	add	r1, sp, #16
 800fc42:	4638      	mov	r0, r7
 800fc44:	f000 f87a 	bl	800fd3c <_printf_i>
 800fc48:	e7eb      	b.n	800fc22 <_svfiprintf_r+0x1c2>
 800fc4a:	bf00      	nop
 800fc4c:	08010640 	.word	0x08010640
 800fc50:	0801064a 	.word	0x0801064a
 800fc54:	00000000 	.word	0x00000000
 800fc58:	0800f9a9 	.word	0x0800f9a9
 800fc5c:	08010646 	.word	0x08010646

0800fc60 <_printf_common>:
 800fc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc64:	4616      	mov	r6, r2
 800fc66:	4699      	mov	r9, r3
 800fc68:	688a      	ldr	r2, [r1, #8]
 800fc6a:	690b      	ldr	r3, [r1, #16]
 800fc6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc70:	4293      	cmp	r3, r2
 800fc72:	bfb8      	it	lt
 800fc74:	4613      	movlt	r3, r2
 800fc76:	6033      	str	r3, [r6, #0]
 800fc78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc7c:	4607      	mov	r7, r0
 800fc7e:	460c      	mov	r4, r1
 800fc80:	b10a      	cbz	r2, 800fc86 <_printf_common+0x26>
 800fc82:	3301      	adds	r3, #1
 800fc84:	6033      	str	r3, [r6, #0]
 800fc86:	6823      	ldr	r3, [r4, #0]
 800fc88:	0699      	lsls	r1, r3, #26
 800fc8a:	bf42      	ittt	mi
 800fc8c:	6833      	ldrmi	r3, [r6, #0]
 800fc8e:	3302      	addmi	r3, #2
 800fc90:	6033      	strmi	r3, [r6, #0]
 800fc92:	6825      	ldr	r5, [r4, #0]
 800fc94:	f015 0506 	ands.w	r5, r5, #6
 800fc98:	d106      	bne.n	800fca8 <_printf_common+0x48>
 800fc9a:	f104 0a19 	add.w	sl, r4, #25
 800fc9e:	68e3      	ldr	r3, [r4, #12]
 800fca0:	6832      	ldr	r2, [r6, #0]
 800fca2:	1a9b      	subs	r3, r3, r2
 800fca4:	42ab      	cmp	r3, r5
 800fca6:	dc26      	bgt.n	800fcf6 <_printf_common+0x96>
 800fca8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fcac:	1e13      	subs	r3, r2, #0
 800fcae:	6822      	ldr	r2, [r4, #0]
 800fcb0:	bf18      	it	ne
 800fcb2:	2301      	movne	r3, #1
 800fcb4:	0692      	lsls	r2, r2, #26
 800fcb6:	d42b      	bmi.n	800fd10 <_printf_common+0xb0>
 800fcb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fcbc:	4649      	mov	r1, r9
 800fcbe:	4638      	mov	r0, r7
 800fcc0:	47c0      	blx	r8
 800fcc2:	3001      	adds	r0, #1
 800fcc4:	d01e      	beq.n	800fd04 <_printf_common+0xa4>
 800fcc6:	6823      	ldr	r3, [r4, #0]
 800fcc8:	68e5      	ldr	r5, [r4, #12]
 800fcca:	6832      	ldr	r2, [r6, #0]
 800fccc:	f003 0306 	and.w	r3, r3, #6
 800fcd0:	2b04      	cmp	r3, #4
 800fcd2:	bf08      	it	eq
 800fcd4:	1aad      	subeq	r5, r5, r2
 800fcd6:	68a3      	ldr	r3, [r4, #8]
 800fcd8:	6922      	ldr	r2, [r4, #16]
 800fcda:	bf0c      	ite	eq
 800fcdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fce0:	2500      	movne	r5, #0
 800fce2:	4293      	cmp	r3, r2
 800fce4:	bfc4      	itt	gt
 800fce6:	1a9b      	subgt	r3, r3, r2
 800fce8:	18ed      	addgt	r5, r5, r3
 800fcea:	2600      	movs	r6, #0
 800fcec:	341a      	adds	r4, #26
 800fcee:	42b5      	cmp	r5, r6
 800fcf0:	d11a      	bne.n	800fd28 <_printf_common+0xc8>
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	e008      	b.n	800fd08 <_printf_common+0xa8>
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	4652      	mov	r2, sl
 800fcfa:	4649      	mov	r1, r9
 800fcfc:	4638      	mov	r0, r7
 800fcfe:	47c0      	blx	r8
 800fd00:	3001      	adds	r0, #1
 800fd02:	d103      	bne.n	800fd0c <_printf_common+0xac>
 800fd04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd0c:	3501      	adds	r5, #1
 800fd0e:	e7c6      	b.n	800fc9e <_printf_common+0x3e>
 800fd10:	18e1      	adds	r1, r4, r3
 800fd12:	1c5a      	adds	r2, r3, #1
 800fd14:	2030      	movs	r0, #48	; 0x30
 800fd16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd1a:	4422      	add	r2, r4
 800fd1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd24:	3302      	adds	r3, #2
 800fd26:	e7c7      	b.n	800fcb8 <_printf_common+0x58>
 800fd28:	2301      	movs	r3, #1
 800fd2a:	4622      	mov	r2, r4
 800fd2c:	4649      	mov	r1, r9
 800fd2e:	4638      	mov	r0, r7
 800fd30:	47c0      	blx	r8
 800fd32:	3001      	adds	r0, #1
 800fd34:	d0e6      	beq.n	800fd04 <_printf_common+0xa4>
 800fd36:	3601      	adds	r6, #1
 800fd38:	e7d9      	b.n	800fcee <_printf_common+0x8e>
	...

0800fd3c <_printf_i>:
 800fd3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd40:	7e0f      	ldrb	r7, [r1, #24]
 800fd42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd44:	2f78      	cmp	r7, #120	; 0x78
 800fd46:	4691      	mov	r9, r2
 800fd48:	4680      	mov	r8, r0
 800fd4a:	460c      	mov	r4, r1
 800fd4c:	469a      	mov	sl, r3
 800fd4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fd52:	d807      	bhi.n	800fd64 <_printf_i+0x28>
 800fd54:	2f62      	cmp	r7, #98	; 0x62
 800fd56:	d80a      	bhi.n	800fd6e <_printf_i+0x32>
 800fd58:	2f00      	cmp	r7, #0
 800fd5a:	f000 80d8 	beq.w	800ff0e <_printf_i+0x1d2>
 800fd5e:	2f58      	cmp	r7, #88	; 0x58
 800fd60:	f000 80a3 	beq.w	800feaa <_printf_i+0x16e>
 800fd64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd6c:	e03a      	b.n	800fde4 <_printf_i+0xa8>
 800fd6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd72:	2b15      	cmp	r3, #21
 800fd74:	d8f6      	bhi.n	800fd64 <_printf_i+0x28>
 800fd76:	a101      	add	r1, pc, #4	; (adr r1, 800fd7c <_printf_i+0x40>)
 800fd78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd7c:	0800fdd5 	.word	0x0800fdd5
 800fd80:	0800fde9 	.word	0x0800fde9
 800fd84:	0800fd65 	.word	0x0800fd65
 800fd88:	0800fd65 	.word	0x0800fd65
 800fd8c:	0800fd65 	.word	0x0800fd65
 800fd90:	0800fd65 	.word	0x0800fd65
 800fd94:	0800fde9 	.word	0x0800fde9
 800fd98:	0800fd65 	.word	0x0800fd65
 800fd9c:	0800fd65 	.word	0x0800fd65
 800fda0:	0800fd65 	.word	0x0800fd65
 800fda4:	0800fd65 	.word	0x0800fd65
 800fda8:	0800fef5 	.word	0x0800fef5
 800fdac:	0800fe19 	.word	0x0800fe19
 800fdb0:	0800fed7 	.word	0x0800fed7
 800fdb4:	0800fd65 	.word	0x0800fd65
 800fdb8:	0800fd65 	.word	0x0800fd65
 800fdbc:	0800ff17 	.word	0x0800ff17
 800fdc0:	0800fd65 	.word	0x0800fd65
 800fdc4:	0800fe19 	.word	0x0800fe19
 800fdc8:	0800fd65 	.word	0x0800fd65
 800fdcc:	0800fd65 	.word	0x0800fd65
 800fdd0:	0800fedf 	.word	0x0800fedf
 800fdd4:	682b      	ldr	r3, [r5, #0]
 800fdd6:	1d1a      	adds	r2, r3, #4
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	602a      	str	r2, [r5, #0]
 800fddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fde0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fde4:	2301      	movs	r3, #1
 800fde6:	e0a3      	b.n	800ff30 <_printf_i+0x1f4>
 800fde8:	6820      	ldr	r0, [r4, #0]
 800fdea:	6829      	ldr	r1, [r5, #0]
 800fdec:	0606      	lsls	r6, r0, #24
 800fdee:	f101 0304 	add.w	r3, r1, #4
 800fdf2:	d50a      	bpl.n	800fe0a <_printf_i+0xce>
 800fdf4:	680e      	ldr	r6, [r1, #0]
 800fdf6:	602b      	str	r3, [r5, #0]
 800fdf8:	2e00      	cmp	r6, #0
 800fdfa:	da03      	bge.n	800fe04 <_printf_i+0xc8>
 800fdfc:	232d      	movs	r3, #45	; 0x2d
 800fdfe:	4276      	negs	r6, r6
 800fe00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe04:	485e      	ldr	r0, [pc, #376]	; (800ff80 <_printf_i+0x244>)
 800fe06:	230a      	movs	r3, #10
 800fe08:	e019      	b.n	800fe3e <_printf_i+0x102>
 800fe0a:	680e      	ldr	r6, [r1, #0]
 800fe0c:	602b      	str	r3, [r5, #0]
 800fe0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fe12:	bf18      	it	ne
 800fe14:	b236      	sxthne	r6, r6
 800fe16:	e7ef      	b.n	800fdf8 <_printf_i+0xbc>
 800fe18:	682b      	ldr	r3, [r5, #0]
 800fe1a:	6820      	ldr	r0, [r4, #0]
 800fe1c:	1d19      	adds	r1, r3, #4
 800fe1e:	6029      	str	r1, [r5, #0]
 800fe20:	0601      	lsls	r1, r0, #24
 800fe22:	d501      	bpl.n	800fe28 <_printf_i+0xec>
 800fe24:	681e      	ldr	r6, [r3, #0]
 800fe26:	e002      	b.n	800fe2e <_printf_i+0xf2>
 800fe28:	0646      	lsls	r6, r0, #25
 800fe2a:	d5fb      	bpl.n	800fe24 <_printf_i+0xe8>
 800fe2c:	881e      	ldrh	r6, [r3, #0]
 800fe2e:	4854      	ldr	r0, [pc, #336]	; (800ff80 <_printf_i+0x244>)
 800fe30:	2f6f      	cmp	r7, #111	; 0x6f
 800fe32:	bf0c      	ite	eq
 800fe34:	2308      	moveq	r3, #8
 800fe36:	230a      	movne	r3, #10
 800fe38:	2100      	movs	r1, #0
 800fe3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe3e:	6865      	ldr	r5, [r4, #4]
 800fe40:	60a5      	str	r5, [r4, #8]
 800fe42:	2d00      	cmp	r5, #0
 800fe44:	bfa2      	ittt	ge
 800fe46:	6821      	ldrge	r1, [r4, #0]
 800fe48:	f021 0104 	bicge.w	r1, r1, #4
 800fe4c:	6021      	strge	r1, [r4, #0]
 800fe4e:	b90e      	cbnz	r6, 800fe54 <_printf_i+0x118>
 800fe50:	2d00      	cmp	r5, #0
 800fe52:	d04d      	beq.n	800fef0 <_printf_i+0x1b4>
 800fe54:	4615      	mov	r5, r2
 800fe56:	fbb6 f1f3 	udiv	r1, r6, r3
 800fe5a:	fb03 6711 	mls	r7, r3, r1, r6
 800fe5e:	5dc7      	ldrb	r7, [r0, r7]
 800fe60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fe64:	4637      	mov	r7, r6
 800fe66:	42bb      	cmp	r3, r7
 800fe68:	460e      	mov	r6, r1
 800fe6a:	d9f4      	bls.n	800fe56 <_printf_i+0x11a>
 800fe6c:	2b08      	cmp	r3, #8
 800fe6e:	d10b      	bne.n	800fe88 <_printf_i+0x14c>
 800fe70:	6823      	ldr	r3, [r4, #0]
 800fe72:	07de      	lsls	r6, r3, #31
 800fe74:	d508      	bpl.n	800fe88 <_printf_i+0x14c>
 800fe76:	6923      	ldr	r3, [r4, #16]
 800fe78:	6861      	ldr	r1, [r4, #4]
 800fe7a:	4299      	cmp	r1, r3
 800fe7c:	bfde      	ittt	le
 800fe7e:	2330      	movle	r3, #48	; 0x30
 800fe80:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fe84:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fe88:	1b52      	subs	r2, r2, r5
 800fe8a:	6122      	str	r2, [r4, #16]
 800fe8c:	f8cd a000 	str.w	sl, [sp]
 800fe90:	464b      	mov	r3, r9
 800fe92:	aa03      	add	r2, sp, #12
 800fe94:	4621      	mov	r1, r4
 800fe96:	4640      	mov	r0, r8
 800fe98:	f7ff fee2 	bl	800fc60 <_printf_common>
 800fe9c:	3001      	adds	r0, #1
 800fe9e:	d14c      	bne.n	800ff3a <_printf_i+0x1fe>
 800fea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fea4:	b004      	add	sp, #16
 800fea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feaa:	4835      	ldr	r0, [pc, #212]	; (800ff80 <_printf_i+0x244>)
 800feac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800feb0:	6829      	ldr	r1, [r5, #0]
 800feb2:	6823      	ldr	r3, [r4, #0]
 800feb4:	f851 6b04 	ldr.w	r6, [r1], #4
 800feb8:	6029      	str	r1, [r5, #0]
 800feba:	061d      	lsls	r5, r3, #24
 800febc:	d514      	bpl.n	800fee8 <_printf_i+0x1ac>
 800febe:	07df      	lsls	r7, r3, #31
 800fec0:	bf44      	itt	mi
 800fec2:	f043 0320 	orrmi.w	r3, r3, #32
 800fec6:	6023      	strmi	r3, [r4, #0]
 800fec8:	b91e      	cbnz	r6, 800fed2 <_printf_i+0x196>
 800feca:	6823      	ldr	r3, [r4, #0]
 800fecc:	f023 0320 	bic.w	r3, r3, #32
 800fed0:	6023      	str	r3, [r4, #0]
 800fed2:	2310      	movs	r3, #16
 800fed4:	e7b0      	b.n	800fe38 <_printf_i+0xfc>
 800fed6:	6823      	ldr	r3, [r4, #0]
 800fed8:	f043 0320 	orr.w	r3, r3, #32
 800fedc:	6023      	str	r3, [r4, #0]
 800fede:	2378      	movs	r3, #120	; 0x78
 800fee0:	4828      	ldr	r0, [pc, #160]	; (800ff84 <_printf_i+0x248>)
 800fee2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fee6:	e7e3      	b.n	800feb0 <_printf_i+0x174>
 800fee8:	0659      	lsls	r1, r3, #25
 800feea:	bf48      	it	mi
 800feec:	b2b6      	uxthmi	r6, r6
 800feee:	e7e6      	b.n	800febe <_printf_i+0x182>
 800fef0:	4615      	mov	r5, r2
 800fef2:	e7bb      	b.n	800fe6c <_printf_i+0x130>
 800fef4:	682b      	ldr	r3, [r5, #0]
 800fef6:	6826      	ldr	r6, [r4, #0]
 800fef8:	6961      	ldr	r1, [r4, #20]
 800fefa:	1d18      	adds	r0, r3, #4
 800fefc:	6028      	str	r0, [r5, #0]
 800fefe:	0635      	lsls	r5, r6, #24
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	d501      	bpl.n	800ff08 <_printf_i+0x1cc>
 800ff04:	6019      	str	r1, [r3, #0]
 800ff06:	e002      	b.n	800ff0e <_printf_i+0x1d2>
 800ff08:	0670      	lsls	r0, r6, #25
 800ff0a:	d5fb      	bpl.n	800ff04 <_printf_i+0x1c8>
 800ff0c:	8019      	strh	r1, [r3, #0]
 800ff0e:	2300      	movs	r3, #0
 800ff10:	6123      	str	r3, [r4, #16]
 800ff12:	4615      	mov	r5, r2
 800ff14:	e7ba      	b.n	800fe8c <_printf_i+0x150>
 800ff16:	682b      	ldr	r3, [r5, #0]
 800ff18:	1d1a      	adds	r2, r3, #4
 800ff1a:	602a      	str	r2, [r5, #0]
 800ff1c:	681d      	ldr	r5, [r3, #0]
 800ff1e:	6862      	ldr	r2, [r4, #4]
 800ff20:	2100      	movs	r1, #0
 800ff22:	4628      	mov	r0, r5
 800ff24:	f7f0 f95c 	bl	80001e0 <memchr>
 800ff28:	b108      	cbz	r0, 800ff2e <_printf_i+0x1f2>
 800ff2a:	1b40      	subs	r0, r0, r5
 800ff2c:	6060      	str	r0, [r4, #4]
 800ff2e:	6863      	ldr	r3, [r4, #4]
 800ff30:	6123      	str	r3, [r4, #16]
 800ff32:	2300      	movs	r3, #0
 800ff34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff38:	e7a8      	b.n	800fe8c <_printf_i+0x150>
 800ff3a:	6923      	ldr	r3, [r4, #16]
 800ff3c:	462a      	mov	r2, r5
 800ff3e:	4649      	mov	r1, r9
 800ff40:	4640      	mov	r0, r8
 800ff42:	47d0      	blx	sl
 800ff44:	3001      	adds	r0, #1
 800ff46:	d0ab      	beq.n	800fea0 <_printf_i+0x164>
 800ff48:	6823      	ldr	r3, [r4, #0]
 800ff4a:	079b      	lsls	r3, r3, #30
 800ff4c:	d413      	bmi.n	800ff76 <_printf_i+0x23a>
 800ff4e:	68e0      	ldr	r0, [r4, #12]
 800ff50:	9b03      	ldr	r3, [sp, #12]
 800ff52:	4298      	cmp	r0, r3
 800ff54:	bfb8      	it	lt
 800ff56:	4618      	movlt	r0, r3
 800ff58:	e7a4      	b.n	800fea4 <_printf_i+0x168>
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	4632      	mov	r2, r6
 800ff5e:	4649      	mov	r1, r9
 800ff60:	4640      	mov	r0, r8
 800ff62:	47d0      	blx	sl
 800ff64:	3001      	adds	r0, #1
 800ff66:	d09b      	beq.n	800fea0 <_printf_i+0x164>
 800ff68:	3501      	adds	r5, #1
 800ff6a:	68e3      	ldr	r3, [r4, #12]
 800ff6c:	9903      	ldr	r1, [sp, #12]
 800ff6e:	1a5b      	subs	r3, r3, r1
 800ff70:	42ab      	cmp	r3, r5
 800ff72:	dcf2      	bgt.n	800ff5a <_printf_i+0x21e>
 800ff74:	e7eb      	b.n	800ff4e <_printf_i+0x212>
 800ff76:	2500      	movs	r5, #0
 800ff78:	f104 0619 	add.w	r6, r4, #25
 800ff7c:	e7f5      	b.n	800ff6a <_printf_i+0x22e>
 800ff7e:	bf00      	nop
 800ff80:	08010651 	.word	0x08010651
 800ff84:	08010662 	.word	0x08010662

0800ff88 <__retarget_lock_acquire_recursive>:
 800ff88:	4770      	bx	lr

0800ff8a <__retarget_lock_release_recursive>:
 800ff8a:	4770      	bx	lr

0800ff8c <memcpy>:
 800ff8c:	440a      	add	r2, r1
 800ff8e:	4291      	cmp	r1, r2
 800ff90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ff94:	d100      	bne.n	800ff98 <memcpy+0xc>
 800ff96:	4770      	bx	lr
 800ff98:	b510      	push	{r4, lr}
 800ff9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffa2:	4291      	cmp	r1, r2
 800ffa4:	d1f9      	bne.n	800ff9a <memcpy+0xe>
 800ffa6:	bd10      	pop	{r4, pc}

0800ffa8 <memmove>:
 800ffa8:	4288      	cmp	r0, r1
 800ffaa:	b510      	push	{r4, lr}
 800ffac:	eb01 0402 	add.w	r4, r1, r2
 800ffb0:	d902      	bls.n	800ffb8 <memmove+0x10>
 800ffb2:	4284      	cmp	r4, r0
 800ffb4:	4623      	mov	r3, r4
 800ffb6:	d807      	bhi.n	800ffc8 <memmove+0x20>
 800ffb8:	1e43      	subs	r3, r0, #1
 800ffba:	42a1      	cmp	r1, r4
 800ffbc:	d008      	beq.n	800ffd0 <memmove+0x28>
 800ffbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ffc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ffc6:	e7f8      	b.n	800ffba <memmove+0x12>
 800ffc8:	4402      	add	r2, r0
 800ffca:	4601      	mov	r1, r0
 800ffcc:	428a      	cmp	r2, r1
 800ffce:	d100      	bne.n	800ffd2 <memmove+0x2a>
 800ffd0:	bd10      	pop	{r4, pc}
 800ffd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ffda:	e7f7      	b.n	800ffcc <memmove+0x24>

0800ffdc <_realloc_r>:
 800ffdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe0:	4680      	mov	r8, r0
 800ffe2:	4614      	mov	r4, r2
 800ffe4:	460e      	mov	r6, r1
 800ffe6:	b921      	cbnz	r1, 800fff2 <_realloc_r+0x16>
 800ffe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffec:	4611      	mov	r1, r2
 800ffee:	f7ff bc1b 	b.w	800f828 <_malloc_r>
 800fff2:	b92a      	cbnz	r2, 8010000 <_realloc_r+0x24>
 800fff4:	f7ff fbac 	bl	800f750 <_free_r>
 800fff8:	4625      	mov	r5, r4
 800fffa:	4628      	mov	r0, r5
 800fffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010000:	f000 f81b 	bl	801003a <_malloc_usable_size_r>
 8010004:	4284      	cmp	r4, r0
 8010006:	4607      	mov	r7, r0
 8010008:	d802      	bhi.n	8010010 <_realloc_r+0x34>
 801000a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801000e:	d812      	bhi.n	8010036 <_realloc_r+0x5a>
 8010010:	4621      	mov	r1, r4
 8010012:	4640      	mov	r0, r8
 8010014:	f7ff fc08 	bl	800f828 <_malloc_r>
 8010018:	4605      	mov	r5, r0
 801001a:	2800      	cmp	r0, #0
 801001c:	d0ed      	beq.n	800fffa <_realloc_r+0x1e>
 801001e:	42bc      	cmp	r4, r7
 8010020:	4622      	mov	r2, r4
 8010022:	4631      	mov	r1, r6
 8010024:	bf28      	it	cs
 8010026:	463a      	movcs	r2, r7
 8010028:	f7ff ffb0 	bl	800ff8c <memcpy>
 801002c:	4631      	mov	r1, r6
 801002e:	4640      	mov	r0, r8
 8010030:	f7ff fb8e 	bl	800f750 <_free_r>
 8010034:	e7e1      	b.n	800fffa <_realloc_r+0x1e>
 8010036:	4635      	mov	r5, r6
 8010038:	e7df      	b.n	800fffa <_realloc_r+0x1e>

0801003a <_malloc_usable_size_r>:
 801003a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801003e:	1f18      	subs	r0, r3, #4
 8010040:	2b00      	cmp	r3, #0
 8010042:	bfbc      	itt	lt
 8010044:	580b      	ldrlt	r3, [r1, r0]
 8010046:	18c0      	addlt	r0, r0, r3
 8010048:	4770      	bx	lr
	...

0801004c <_init>:
 801004c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801004e:	bf00      	nop
 8010050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010052:	bc08      	pop	{r3}
 8010054:	469e      	mov	lr, r3
 8010056:	4770      	bx	lr

08010058 <_fini>:
 8010058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801005a:	bf00      	nop
 801005c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801005e:	bc08      	pop	{r3}
 8010060:	469e      	mov	lr, r3
 8010062:	4770      	bx	lr
